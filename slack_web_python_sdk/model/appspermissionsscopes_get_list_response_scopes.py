# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Created by: https://api.slack.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slack_web_python_sdk import schemas  # noqa: F401


class AppspermissionsscopesGetListResponseScopes(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def app_home() -> typing.Type['ObjsScopes']:
                return ObjsScopes
        
            @staticmethod
            def channel() -> typing.Type['ObjsScopes']:
                return ObjsScopes
        
            @staticmethod
            def group() -> typing.Type['ObjsScopes']:
                return ObjsScopes
        
            @staticmethod
            def im() -> typing.Type['ObjsScopes']:
                return ObjsScopes
        
            @staticmethod
            def mpim() -> typing.Type['ObjsScopes']:
                return ObjsScopes
        
            @staticmethod
            def team() -> typing.Type['ObjsScopes']:
                return ObjsScopes
        
            @staticmethod
            def user() -> typing.Type['ObjsScopes']:
                return ObjsScopes
            __annotations__ = {
                "app_home": app_home,
                "channel": channel,
                "group": group,
                "im": im,
                "mpim": mpim,
                "team": team,
                "user": user,
            }
        additional_properties = schemas.AnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["app_home"]) -> 'ObjsScopes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channel"]) -> 'ObjsScopes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group"]) -> 'ObjsScopes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["im"]) -> 'ObjsScopes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mpim"]) -> 'ObjsScopes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team"]) -> 'ObjsScopes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'ObjsScopes': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["app_home"], typing_extensions.Literal["channel"], typing_extensions.Literal["group"], typing_extensions.Literal["im"], typing_extensions.Literal["mpim"], typing_extensions.Literal["team"], typing_extensions.Literal["user"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["app_home"]) -> typing.Union['ObjsScopes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channel"]) -> typing.Union['ObjsScopes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group"]) -> typing.Union['ObjsScopes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["im"]) -> typing.Union['ObjsScopes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mpim"]) -> typing.Union['ObjsScopes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team"]) -> typing.Union['ObjsScopes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union['ObjsScopes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["app_home"], typing_extensions.Literal["channel"], typing_extensions.Literal["group"], typing_extensions.Literal["im"], typing_extensions.Literal["mpim"], typing_extensions.Literal["team"], typing_extensions.Literal["user"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        app_home: typing.Union['ObjsScopes', schemas.Unset] = schemas.unset,
        channel: typing.Union['ObjsScopes', schemas.Unset] = schemas.unset,
        group: typing.Union['ObjsScopes', schemas.Unset] = schemas.unset,
        im: typing.Union['ObjsScopes', schemas.Unset] = schemas.unset,
        mpim: typing.Union['ObjsScopes', schemas.Unset] = schemas.unset,
        team: typing.Union['ObjsScopes', schemas.Unset] = schemas.unset,
        user: typing.Union['ObjsScopes', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'AppspermissionsscopesGetListResponseScopes':
        return super().__new__(
            cls,
            *args,
            app_home=app_home,
            channel=channel,
            group=group,
            im=im,
            mpim=mpim,
            team=team,
            user=user,
            _configuration=_configuration,
            **kwargs,
        )

from slack_web_python_sdk.model.objs_scopes import ObjsScopes
