# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Created by: https://api.slack.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slack_web_python_sdk import schemas  # noqa: F401


class ObjsChannelPurpose(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "last_set",
            "creator",
            "value",
        }
        
        class properties:
        
            @staticmethod
            def creator() -> typing.Type['DefsTopicPurposeCreator']:
                return DefsTopicPurposeCreator
            last_set = schemas.IntSchema
            value = schemas.StrSchema
            __annotations__ = {
                "creator": creator,
                "last_set": last_set,
                "value": value,
            }
    
    last_set: MetaOapg.properties.last_set
    creator: 'DefsTopicPurposeCreator'
    value: MetaOapg.properties.value
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creator"]) -> 'DefsTopicPurposeCreator': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_set"]) -> MetaOapg.properties.last_set: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["creator", "last_set", "value", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creator"]) -> 'DefsTopicPurposeCreator': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_set"]) -> MetaOapg.properties.last_set: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["creator", "last_set", "value", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        last_set: typing.Union[MetaOapg.properties.last_set, decimal.Decimal, int, ],
        creator: 'DefsTopicPurposeCreator',
        value: typing.Union[MetaOapg.properties.value, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ObjsChannelPurpose':
        return super().__new__(
            cls,
            *args,
            last_set=last_set,
            creator=creator,
            value=value,
            _configuration=_configuration,
            **kwargs,
        )

from slack_web_python_sdk.model.defs_topic_purpose_creator import DefsTopicPurposeCreator
