# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Created by: https://api.slack.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slack_web_python_sdk import schemas  # noqa: F401


class ObjsTeamProfileFieldOption(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class is_custom(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'is_custom':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class is_multiple_entry(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'is_multiple_entry':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class is_protected(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'is_protected':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class is_scim(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'is_scim':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "is_custom": is_custom,
                "is_multiple_entry": is_multiple_entry,
                "is_protected": is_protected,
                "is_scim": is_scim,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_custom"]) -> MetaOapg.properties.is_custom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_multiple_entry"]) -> MetaOapg.properties.is_multiple_entry: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_protected"]) -> MetaOapg.properties.is_protected: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_scim"]) -> MetaOapg.properties.is_scim: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["is_custom", "is_multiple_entry", "is_protected", "is_scim", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_custom"]) -> typing.Union[MetaOapg.properties.is_custom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_multiple_entry"]) -> typing.Union[MetaOapg.properties.is_multiple_entry, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_protected"]) -> typing.Union[MetaOapg.properties.is_protected, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_scim"]) -> typing.Union[MetaOapg.properties.is_scim, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["is_custom", "is_multiple_entry", "is_protected", "is_scim", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        is_custom: typing.Union[MetaOapg.properties.is_custom, None, bool, schemas.Unset] = schemas.unset,
        is_multiple_entry: typing.Union[MetaOapg.properties.is_multiple_entry, None, bool, schemas.Unset] = schemas.unset,
        is_protected: typing.Union[MetaOapg.properties.is_protected, None, bool, schemas.Unset] = schemas.unset,
        is_scim: typing.Union[MetaOapg.properties.is_scim, None, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ObjsTeamProfileFieldOption':
        return super().__new__(
            cls,
            *args,
            is_custom=is_custom,
            is_multiple_entry=is_multiple_entry,
            is_protected=is_protected,
            is_scim=is_scim,
            _configuration=_configuration,
            **kwargs,
        )
