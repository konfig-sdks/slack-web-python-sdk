# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Created by: https://api.slack.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slack_web_python_sdk import schemas  # noqa: F401


class ConversationsOpenResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Schema for successful response from conversations.open method when opening channels, ims, mpims
    """


    class MetaOapg:
        required = {
            "channel",
            "ok",
        }
        
        class properties:
            
            
            class channel(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class any_of_1(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    required = {
                                        "id",
                                    }
                                    
                                    class properties:
                                        created = schemas.StrSchema
                                    
                                        @staticmethod
                                        def id() -> typing.Type['DefsDmId']:
                                            return DefsDmId
                                        is_im = schemas.BoolSchema
                                        is_open = schemas.BoolSchema
                                    
                                        @staticmethod
                                        def last_read() -> typing.Type['DefsTs']:
                                            return DefsTs
                                    
                                        @staticmethod
                                        def latest() -> typing.Type['ObjsMessage']:
                                            return ObjsMessage
                                        unread_count = schemas.NumberSchema
                                        unread_count_display = schemas.NumberSchema
                                    
                                        @staticmethod
                                        def user() -> typing.Type['DefsUserId']:
                                            return DefsUserId
                                        __annotations__ = {
                                            "created": created,
                                            "id": id,
                                            "is_im": is_im,
                                            "is_open": is_open,
                                            "last_read": last_read,
                                            "latest": latest,
                                            "unread_count": unread_count,
                                            "unread_count_display": unread_count_display,
                                            "user": user,
                                        }
                                
                                id: 'DefsDmId'
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'DefsDmId': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["is_im"]) -> MetaOapg.properties.is_im: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["is_open"]) -> MetaOapg.properties.is_open: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["last_read"]) -> 'DefsTs': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["latest"]) -> 'ObjsMessage': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["unread_count"]) -> MetaOapg.properties.unread_count: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["unread_count_display"]) -> MetaOapg.properties.unread_count_display: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'DefsUserId': ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["created", "id", "is_im", "is_open", "last_read", "latest", "unread_count", "unread_count_display", "user", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> 'DefsDmId': ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["is_im"]) -> typing.Union[MetaOapg.properties.is_im, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["is_open"]) -> typing.Union[MetaOapg.properties.is_open, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["last_read"]) -> typing.Union['DefsTs', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["latest"]) -> typing.Union['ObjsMessage', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["unread_count"]) -> typing.Union[MetaOapg.properties.unread_count, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["unread_count_display"]) -> typing.Union[MetaOapg.properties.unread_count_display, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union['DefsUserId', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["created", "id", "is_im", "is_open", "last_read", "latest", "unread_count", "unread_count_display", "user", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                    id: 'DefsDmId',
                                    created: typing.Union[MetaOapg.properties.created, str, schemas.Unset] = schemas.unset,
                                    is_im: typing.Union[MetaOapg.properties.is_im, bool, schemas.Unset] = schemas.unset,
                                    is_open: typing.Union[MetaOapg.properties.is_open, bool, schemas.Unset] = schemas.unset,
                                    last_read: typing.Union['DefsTs', schemas.Unset] = schemas.unset,
                                    latest: typing.Union['ObjsMessage', schemas.Unset] = schemas.unset,
                                    unread_count: typing.Union[MetaOapg.properties.unread_count, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                    unread_count_display: typing.Union[MetaOapg.properties.unread_count_display, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                    user: typing.Union['DefsUserId', schemas.Unset] = schemas.unset,
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'any_of_1':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        id=id,
                                        created=created,
                                        is_im=is_im,
                                        is_open=is_open,
                                        last_read=last_read,
                                        latest=latest,
                                        unread_count=unread_count,
                                        unread_count_display=unread_count_display,
                                        user=user,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                            
                            @classmethod
                            @functools.lru_cache()
                            def any_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    ObjsConversation,
                                    cls.any_of_1,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'channel':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
        
            @staticmethod
            def ok() -> typing.Type['DefsOkTrue']:
                return DefsOkTrue
            already_open = schemas.BoolSchema
            no_op = schemas.BoolSchema
            __annotations__ = {
                "channel": channel,
                "ok": ok,
                "already_open": already_open,
                "no_op": no_op,
            }
    
    channel: MetaOapg.properties.channel
    ok: 'DefsOkTrue'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channel"]) -> MetaOapg.properties.channel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkTrue': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["already_open"]) -> MetaOapg.properties.already_open: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["no_op"]) -> MetaOapg.properties.no_op: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["channel", "ok", "already_open", "no_op", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channel"]) -> MetaOapg.properties.channel: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkTrue': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["already_open"]) -> typing.Union[MetaOapg.properties.already_open, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["no_op"]) -> typing.Union[MetaOapg.properties.no_op, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["channel", "ok", "already_open", "no_op", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        channel: typing.Union[MetaOapg.properties.channel, list, tuple, ],
        ok: 'DefsOkTrue',
        already_open: typing.Union[MetaOapg.properties.already_open, bool, schemas.Unset] = schemas.unset,
        no_op: typing.Union[MetaOapg.properties.no_op, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ConversationsOpenResponse':
        return super().__new__(
            cls,
            *args,
            channel=channel,
            ok=ok,
            already_open=already_open,
            no_op=no_op,
            _configuration=_configuration,
            **kwargs,
        )

from slack_web_python_sdk.model.defs_dm_id import DefsDmId
from slack_web_python_sdk.model.defs_ok_true import DefsOkTrue
from slack_web_python_sdk.model.defs_ts import DefsTs
from slack_web_python_sdk.model.defs_user_id import DefsUserId
from slack_web_python_sdk.model.objs_conversation import ObjsConversation
from slack_web_python_sdk.model.objs_message import ObjsMessage
