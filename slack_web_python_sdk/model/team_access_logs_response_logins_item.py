# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Created by: https://api.slack.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slack_web_python_sdk import schemas  # noqa: F401


class TeamAccessLogsResponseLoginsItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "country",
            "date_last",
            "user_id",
            "ip",
            "isp",
            "count",
            "date_first",
            "region",
            "user_agent",
            "username",
        }
        
        class properties:
            count = schemas.IntSchema
            
            
            class country(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'country':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            date_first = schemas.IntSchema
            date_last = schemas.IntSchema
            
            
            class ip(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ip':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class isp(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'isp':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class region(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'region':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            user_agent = schemas.StrSchema
        
            @staticmethod
            def user_id() -> typing.Type['DefsUserId']:
                return DefsUserId
            username = schemas.StrSchema
            __annotations__ = {
                "count": count,
                "country": country,
                "date_first": date_first,
                "date_last": date_last,
                "ip": ip,
                "isp": isp,
                "region": region,
                "user_agent": user_agent,
                "user_id": user_id,
                "username": username,
            }
    
    country: MetaOapg.properties.country
    date_last: MetaOapg.properties.date_last
    user_id: 'DefsUserId'
    ip: MetaOapg.properties.ip
    isp: MetaOapg.properties.isp
    count: MetaOapg.properties.count
    date_first: MetaOapg.properties.date_first
    region: MetaOapg.properties.region
    user_agent: MetaOapg.properties.user_agent
    username: MetaOapg.properties.username
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_first"]) -> MetaOapg.properties.date_first: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_last"]) -> MetaOapg.properties.date_last: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ip"]) -> MetaOapg.properties.ip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isp"]) -> MetaOapg.properties.isp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["region"]) -> MetaOapg.properties.region: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_agent"]) -> MetaOapg.properties.user_agent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_id"]) -> 'DefsUserId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["count", "country", "date_first", "date_last", "ip", "isp", "region", "user_agent", "user_id", "username", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_first"]) -> MetaOapg.properties.date_first: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_last"]) -> MetaOapg.properties.date_last: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ip"]) -> MetaOapg.properties.ip: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isp"]) -> MetaOapg.properties.isp: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["region"]) -> MetaOapg.properties.region: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_agent"]) -> MetaOapg.properties.user_agent: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_id"]) -> 'DefsUserId': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["count", "country", "date_first", "date_last", "ip", "isp", "region", "user_agent", "user_id", "username", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        country: typing.Union[MetaOapg.properties.country, None, str, ],
        date_last: typing.Union[MetaOapg.properties.date_last, decimal.Decimal, int, ],
        user_id: 'DefsUserId',
        ip: typing.Union[MetaOapg.properties.ip, None, str, ],
        isp: typing.Union[MetaOapg.properties.isp, None, str, ],
        count: typing.Union[MetaOapg.properties.count, decimal.Decimal, int, ],
        date_first: typing.Union[MetaOapg.properties.date_first, decimal.Decimal, int, ],
        region: typing.Union[MetaOapg.properties.region, None, str, ],
        user_agent: typing.Union[MetaOapg.properties.user_agent, str, ],
        username: typing.Union[MetaOapg.properties.username, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TeamAccessLogsResponseLoginsItem':
        return super().__new__(
            cls,
            *args,
            country=country,
            date_last=date_last,
            user_id=user_id,
            ip=ip,
            isp=isp,
            count=count,
            date_first=date_first,
            region=region,
            user_agent=user_agent,
            username=username,
            _configuration=_configuration,
            **kwargs,
        )

from slack_web_python_sdk.model.defs_user_id import DefsUserId
