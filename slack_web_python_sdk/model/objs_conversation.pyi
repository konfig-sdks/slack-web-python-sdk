# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Created by: https://api.slack.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slack_web_python_sdk import schemas  # noqa: F401


class ObjsConversation(
    schemas.ListSchema
):
    """NOTE:
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class items(
            schemas.ComposedSchema,
        ):
        
        
            class MetaOapg:
                
                
                class any_of_0(
                    schemas.DictSchema
                ):
                
                
                    class MetaOapg:
                        required = {
                            "is_private",
                            "creator",
                            "is_im",
                            "is_mpim",
                            "purpose",
                            "created",
                            "name_normalized",
                            "is_group",
                            "is_archived",
                            "is_channel",
                            "is_general",
                            "is_shared",
                            "name",
                            "topic",
                            "id",
                            "is_org_shared",
                        }
                        
                        class properties:
                            version = schemas.IntSchema
                        
                            @staticmethod
                            def accepted_user() -> typing.Type['DefsUserId']:
                                return DefsUserId
                            
                            
                            class connected_team_ids(
                                schemas.ListSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    @staticmethod
                                    def items() -> typing.Type['DefsWorkspaceId']:
                                        return DefsWorkspaceId
                            
                                def __new__(
                                    cls,
                                    arg: typing.Union[typing.Tuple['DefsWorkspaceId'], typing.List['DefsWorkspaceId']],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                ) -> 'connected_team_ids':
                                    return super().__new__(
                                        cls,
                                        arg,
                                        _configuration=_configuration,
                                    )
                            
                                def __getitem__(self, i: int) -> 'DefsWorkspaceId':
                                    return super().__getitem__(i)
                        
                            @staticmethod
                            def conversation_host_id() -> typing.Type['DefsWorkspaceId']:
                                return DefsWorkspaceId
                            created = schemas.IntSchema
                        
                            @staticmethod
                            def creator() -> typing.Type['DefsUserId']:
                                return DefsUserId
                            
                            
                            class display_counts(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    required = {
                                        "display_counts",
                                        "guest_counts",
                                    }
                                    
                                    class properties:
                                        display_counts = schemas.IntSchema
                                        guest_counts = schemas.IntSchema
                                        __annotations__ = {
                                            "display_counts": display_counts,
                                            "guest_counts": guest_counts,
                                        }
                                
                                display_counts: MetaOapg.properties.display_counts
                                guest_counts: MetaOapg.properties.guest_counts
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["display_counts"]) -> MetaOapg.properties.display_counts: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["guest_counts"]) -> MetaOapg.properties.guest_counts: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["display_counts", "guest_counts", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["display_counts"]) -> MetaOapg.properties.display_counts: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["guest_counts"]) -> MetaOapg.properties.guest_counts: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["display_counts", "guest_counts", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                    display_counts: typing.Union[MetaOapg.properties.display_counts, decimal.Decimal, int, ],
                                    guest_counts: typing.Union[MetaOapg.properties.guest_counts, decimal.Decimal, int, ],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'display_counts':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        display_counts=display_counts,
                                        guest_counts=guest_counts,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                        
                            @staticmethod
                            def enterprise_id() -> typing.Type['DefsEnterpriseId']:
                                return DefsEnterpriseId
                            has_pins = schemas.BoolSchema
                        
                            @staticmethod
                            def id() -> typing.Type['DefsChannel']:
                                return DefsChannel
                            
                            
                            class internal_team_ids(
                                schemas.ListSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    @staticmethod
                                    def items() -> typing.Type['DefsTeam']:
                                        return DefsTeam
                            
                                def __new__(
                                    cls,
                                    arg: typing.Union[typing.Tuple['DefsTeam'], typing.List['DefsTeam']],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                ) -> 'internal_team_ids':
                                    return super().__new__(
                                        cls,
                                        arg,
                                        _configuration=_configuration,
                                    )
                            
                                def __getitem__(self, i: int) -> 'DefsTeam':
                                    return super().__getitem__(i)
                            is_archived = schemas.BoolSchema
                            is_channel = schemas.BoolSchema
                            is_ext_shared = schemas.BoolSchema
                            is_frozen = schemas.BoolSchema
                            is_general = schemas.BoolSchema
                            is_global_shared = schemas.BoolSchema
                            is_group = schemas.BoolSchema
                            is_im = schemas.BoolSchema
                            is_member = schemas.BoolSchema
                            is_moved = schemas.IntSchema
                            
                            
                            class is_mpim(
                                schemas.EnumBase,
                                schemas.BoolSchema
                            ):
                                
                                @schemas.classproperty
                                def FALSE(cls):
                                    return cls(False)
                            is_non_threadable = schemas.BoolSchema
                            is_open = schemas.BoolSchema
                            is_org_default = schemas.BoolSchema
                            is_org_mandatory = schemas.BoolSchema
                            is_org_shared = schemas.BoolSchema
                            is_pending_ext_shared = schemas.BoolSchema
                            is_private = schemas.BoolSchema
                            is_read_only = schemas.BoolSchema
                            is_shared = schemas.BoolSchema
                            is_starred = schemas.BoolSchema
                            is_thread_only = schemas.BoolSchema
                        
                            @staticmethod
                            def last_read() -> typing.Type['DefsTs']:
                                return DefsTs
                            
                            
                            class latest(
                                schemas.ListSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    
                                    class items(
                                        schemas.ComposedSchema,
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            any_of_1 = schemas.AnyTypeSchema
                                            
                                            @classmethod
                                            @functools.lru_cache()
                                            def any_of(cls):
                                                # we need this here to make our import statements work
                                                # we must store _composed_schemas in here so the code is only run
                                                # when we invoke this method. If we kept this at the class
                                                # level we would get an error because the class level
                                                # code would be run when this module is imported, and these composed
                                                # classes don't exist yet because their module has not finished
                                                # loading
                                                return [
                                                    ObjsMessage,
                                                    cls.any_of_1,
                                                ]
                                    
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'items':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                            
                                def __new__(
                                    cls,
                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                ) -> 'latest':
                                    return super().__new__(
                                        cls,
                                        arg,
                                        _configuration=_configuration,
                                    )
                            
                                def __getitem__(self, i: int) -> MetaOapg.items:
                                    return super().__getitem__(i)
                            
                            
                            class members(
                                schemas.ListSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    @staticmethod
                                    def items() -> typing.Type['DefsUserId']:
                                        return DefsUserId
                            
                                def __new__(
                                    cls,
                                    arg: typing.Union[typing.Tuple['DefsUserId'], typing.List['DefsUserId']],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                ) -> 'members':
                                    return super().__new__(
                                        cls,
                                        arg,
                                        _configuration=_configuration,
                                    )
                            
                                def __getitem__(self, i: int) -> 'DefsUserId':
                                    return super().__getitem__(i)
                            name = schemas.StrSchema
                            name_normalized = schemas.StrSchema
                            num_members = schemas.IntSchema
                            
                            
                            class parent_conversation(
                                schemas.ListSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    
                                    class items(
                                        schemas.ComposedSchema,
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            any_of_1 = schemas.AnyTypeSchema
                                            
                                            @classmethod
                                            @functools.lru_cache()
                                            def any_of(cls):
                                                # we need this here to make our import statements work
                                                # we must store _composed_schemas in here so the code is only run
                                                # when we invoke this method. If we kept this at the class
                                                # level we would get an error because the class level
                                                # code would be run when this module is imported, and these composed
                                                # classes don't exist yet because their module has not finished
                                                # loading
                                                return [
                                                    DefsChannel,
                                                    cls.any_of_1,
                                                ]
                                    
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'items':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                            
                                def __new__(
                                    cls,
                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                ) -> 'parent_conversation':
                                    return super().__new__(
                                        cls,
                                        arg,
                                        _configuration=_configuration,
                                    )
                            
                                def __getitem__(self, i: int) -> MetaOapg.items:
                                    return super().__getitem__(i)
                            
                            
                            class pending_connected_team_ids(
                                schemas.ListSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    @staticmethod
                                    def items() -> typing.Type['DefsTeam']:
                                        return DefsTeam
                            
                                def __new__(
                                    cls,
                                    arg: typing.Union[typing.Tuple['DefsTeam'], typing.List['DefsTeam']],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                ) -> 'pending_connected_team_ids':
                                    return super().__new__(
                                        cls,
                                        arg,
                                        _configuration=_configuration,
                                    )
                            
                                def __getitem__(self, i: int) -> 'DefsTeam':
                                    return super().__getitem__(i)
                            
                            
                            class pending_shared(
                                schemas.ListSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    @staticmethod
                                    def items() -> typing.Type['DefsTeam']:
                                        return DefsTeam
                            
                                def __new__(
                                    cls,
                                    arg: typing.Union[typing.Tuple['DefsTeam'], typing.List['DefsTeam']],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                ) -> 'pending_shared':
                                    return super().__new__(
                                        cls,
                                        arg,
                                        _configuration=_configuration,
                                    )
                            
                                def __getitem__(self, i: int) -> 'DefsTeam':
                                    return super().__getitem__(i)
                            pin_count = schemas.IntSchema
                            
                            
                            class previous_names(
                                schemas.ListSchema
                            ):
                            
                            
                                class MetaOapg:
                                    items = schemas.StrSchema
                            
                                def __new__(
                                    cls,
                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                ) -> 'previous_names':
                                    return super().__new__(
                                        cls,
                                        arg,
                                        _configuration=_configuration,
                                    )
                            
                                def __getitem__(self, i: int) -> MetaOapg.items:
                                    return super().__getitem__(i)
                            priority = schemas.NumberSchema
                            
                            
                            class purpose(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    required = {
                                        "last_set",
                                        "creator",
                                        "value",
                                    }
                                    
                                    class properties:
                                    
                                        @staticmethod
                                        def creator() -> typing.Type['DefsTopicPurposeCreator']:
                                            return DefsTopicPurposeCreator
                                        last_set = schemas.IntSchema
                                        value = schemas.StrSchema
                                        __annotations__ = {
                                            "creator": creator,
                                            "last_set": last_set,
                                            "value": value,
                                        }
                                
                                last_set: MetaOapg.properties.last_set
                                creator: 'DefsTopicPurposeCreator'
                                value: MetaOapg.properties.value
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["creator"]) -> 'DefsTopicPurposeCreator': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["last_set"]) -> MetaOapg.properties.last_set: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["creator", "last_set", "value", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["creator"]) -> 'DefsTopicPurposeCreator': ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["last_set"]) -> MetaOapg.properties.last_set: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["creator", "last_set", "value", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                    last_set: typing.Union[MetaOapg.properties.last_set, decimal.Decimal, int, ],
                                    creator: 'DefsTopicPurposeCreator',
                                    value: typing.Union[MetaOapg.properties.value, str, ],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'purpose':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        last_set=last_set,
                                        creator=creator,
                                        value=value,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                            
                            
                            class shared_team_ids(
                                schemas.ListSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    @staticmethod
                                    def items() -> typing.Type['DefsTeam']:
                                        return DefsTeam
                            
                                def __new__(
                                    cls,
                                    arg: typing.Union[typing.Tuple['DefsTeam'], typing.List['DefsTeam']],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                ) -> 'shared_team_ids':
                                    return super().__new__(
                                        cls,
                                        arg,
                                        _configuration=_configuration,
                                    )
                            
                                def __getitem__(self, i: int) -> 'DefsTeam':
                                    return super().__getitem__(i)
                            
                            
                            class shares(
                                schemas.ListSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    
                                    class items(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            required = {
                                                "is_active",
                                                "team",
                                                "user",
                                            }
                                            
                                            class properties:
                                            
                                                @staticmethod
                                                def accepted_user() -> typing.Type['DefsUserId']:
                                                    return DefsUserId
                                                is_active = schemas.BoolSchema
                                            
                                                @staticmethod
                                                def team() -> typing.Type['ObjsTeam']:
                                                    return ObjsTeam
                                            
                                                @staticmethod
                                                def user() -> typing.Type['DefsUserId']:
                                                    return DefsUserId
                                                __annotations__ = {
                                                    "accepted_user": accepted_user,
                                                    "is_active": is_active,
                                                    "team": team,
                                                    "user": user,
                                                }
                                        
                                        is_active: MetaOapg.properties.is_active
                                        team: 'ObjsTeam'
                                        user: 'DefsUserId'
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["accepted_user"]) -> 'DefsUserId': ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["is_active"]) -> MetaOapg.properties.is_active: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["team"]) -> 'ObjsTeam': ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'DefsUserId': ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["accepted_user", "is_active", "team", "user", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["accepted_user"]) -> typing.Union['DefsUserId', schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["is_active"]) -> MetaOapg.properties.is_active: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["team"]) -> 'ObjsTeam': ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> 'DefsUserId': ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["accepted_user", "is_active", "team", "user", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                            is_active: typing.Union[MetaOapg.properties.is_active, bool, ],
                                            team: 'ObjsTeam',
                                            user: 'DefsUserId',
                                            accepted_user: typing.Union['DefsUserId', schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'items':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                is_active=is_active,
                                                team=team,
                                                user=user,
                                                accepted_user=accepted_user,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                            
                                def __new__(
                                    cls,
                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                ) -> 'shares':
                                    return super().__new__(
                                        cls,
                                        arg,
                                        _configuration=_configuration,
                                    )
                            
                                def __getitem__(self, i: int) -> MetaOapg.items:
                                    return super().__getitem__(i)
                            timezone_count = schemas.IntSchema
                            
                            
                            class topic(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    required = {
                                        "last_set",
                                        "creator",
                                        "value",
                                    }
                                    
                                    class properties:
                                    
                                        @staticmethod
                                        def creator() -> typing.Type['DefsTopicPurposeCreator']:
                                            return DefsTopicPurposeCreator
                                        last_set = schemas.IntSchema
                                        value = schemas.StrSchema
                                        __annotations__ = {
                                            "creator": creator,
                                            "last_set": last_set,
                                            "value": value,
                                        }
                                
                                last_set: MetaOapg.properties.last_set
                                creator: 'DefsTopicPurposeCreator'
                                value: MetaOapg.properties.value
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["creator"]) -> 'DefsTopicPurposeCreator': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["last_set"]) -> MetaOapg.properties.last_set: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["creator", "last_set", "value", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["creator"]) -> 'DefsTopicPurposeCreator': ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["last_set"]) -> MetaOapg.properties.last_set: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["creator", "last_set", "value", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                    last_set: typing.Union[MetaOapg.properties.last_set, decimal.Decimal, int, ],
                                    creator: 'DefsTopicPurposeCreator',
                                    value: typing.Union[MetaOapg.properties.value, str, ],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'topic':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        last_set=last_set,
                                        creator=creator,
                                        value=value,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                            unlinked = schemas.IntSchema
                            unread_count = schemas.IntSchema
                            unread_count_display = schemas.IntSchema
                            use_case = schemas.StrSchema
                        
                            @staticmethod
                            def user() -> typing.Type['DefsUserId']:
                                return DefsUserId
                            __annotations__ = {
                                "version": version,
                                "accepted_user": accepted_user,
                                "connected_team_ids": connected_team_ids,
                                "conversation_host_id": conversation_host_id,
                                "created": created,
                                "creator": creator,
                                "display_counts": display_counts,
                                "enterprise_id": enterprise_id,
                                "has_pins": has_pins,
                                "id": id,
                                "internal_team_ids": internal_team_ids,
                                "is_archived": is_archived,
                                "is_channel": is_channel,
                                "is_ext_shared": is_ext_shared,
                                "is_frozen": is_frozen,
                                "is_general": is_general,
                                "is_global_shared": is_global_shared,
                                "is_group": is_group,
                                "is_im": is_im,
                                "is_member": is_member,
                                "is_moved": is_moved,
                                "is_mpim": is_mpim,
                                "is_non_threadable": is_non_threadable,
                                "is_open": is_open,
                                "is_org_default": is_org_default,
                                "is_org_mandatory": is_org_mandatory,
                                "is_org_shared": is_org_shared,
                                "is_pending_ext_shared": is_pending_ext_shared,
                                "is_private": is_private,
                                "is_read_only": is_read_only,
                                "is_shared": is_shared,
                                "is_starred": is_starred,
                                "is_thread_only": is_thread_only,
                                "last_read": last_read,
                                "latest": latest,
                                "members": members,
                                "name": name,
                                "name_normalized": name_normalized,
                                "num_members": num_members,
                                "parent_conversation": parent_conversation,
                                "pending_connected_team_ids": pending_connected_team_ids,
                                "pending_shared": pending_shared,
                                "pin_count": pin_count,
                                "previous_names": previous_names,
                                "priority": priority,
                                "purpose": purpose,
                                "shared_team_ids": shared_team_ids,
                                "shares": shares,
                                "timezone_count": timezone_count,
                                "topic": topic,
                                "unlinked": unlinked,
                                "unread_count": unread_count,
                                "unread_count_display": unread_count_display,
                                "use_case": use_case,
                                "user": user,
                            }
                    
                    is_private: MetaOapg.properties.is_private
                    creator: 'DefsUserId'
                    is_im: MetaOapg.properties.is_im
                    is_mpim: MetaOapg.properties.is_mpim
                    purpose: MetaOapg.properties.purpose
                    created: MetaOapg.properties.created
                    name_normalized: MetaOapg.properties.name_normalized
                    is_group: MetaOapg.properties.is_group
                    is_archived: MetaOapg.properties.is_archived
                    is_channel: MetaOapg.properties.is_channel
                    is_general: MetaOapg.properties.is_general
                    is_shared: MetaOapg.properties.is_shared
                    name: MetaOapg.properties.name
                    topic: MetaOapg.properties.topic
                    id: 'DefsChannel'
                    is_org_shared: MetaOapg.properties.is_org_shared
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["accepted_user"]) -> 'DefsUserId': ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["connected_team_ids"]) -> MetaOapg.properties.connected_team_ids: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["conversation_host_id"]) -> 'DefsWorkspaceId': ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["creator"]) -> 'DefsUserId': ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["display_counts"]) -> MetaOapg.properties.display_counts: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["enterprise_id"]) -> 'DefsEnterpriseId': ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["has_pins"]) -> MetaOapg.properties.has_pins: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'DefsChannel': ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["internal_team_ids"]) -> MetaOapg.properties.internal_team_ids: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_archived"]) -> MetaOapg.properties.is_archived: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_channel"]) -> MetaOapg.properties.is_channel: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_ext_shared"]) -> MetaOapg.properties.is_ext_shared: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_frozen"]) -> MetaOapg.properties.is_frozen: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_general"]) -> MetaOapg.properties.is_general: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_global_shared"]) -> MetaOapg.properties.is_global_shared: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_group"]) -> MetaOapg.properties.is_group: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_im"]) -> MetaOapg.properties.is_im: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_member"]) -> MetaOapg.properties.is_member: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_moved"]) -> MetaOapg.properties.is_moved: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_mpim"]) -> MetaOapg.properties.is_mpim: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_non_threadable"]) -> MetaOapg.properties.is_non_threadable: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_open"]) -> MetaOapg.properties.is_open: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_org_default"]) -> MetaOapg.properties.is_org_default: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_org_mandatory"]) -> MetaOapg.properties.is_org_mandatory: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_org_shared"]) -> MetaOapg.properties.is_org_shared: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_pending_ext_shared"]) -> MetaOapg.properties.is_pending_ext_shared: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_private"]) -> MetaOapg.properties.is_private: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_read_only"]) -> MetaOapg.properties.is_read_only: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_shared"]) -> MetaOapg.properties.is_shared: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_starred"]) -> MetaOapg.properties.is_starred: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_thread_only"]) -> MetaOapg.properties.is_thread_only: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["last_read"]) -> 'DefsTs': ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["latest"]) -> MetaOapg.properties.latest: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["members"]) -> MetaOapg.properties.members: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["name_normalized"]) -> MetaOapg.properties.name_normalized: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["num_members"]) -> MetaOapg.properties.num_members: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["parent_conversation"]) -> MetaOapg.properties.parent_conversation: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["pending_connected_team_ids"]) -> MetaOapg.properties.pending_connected_team_ids: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["pending_shared"]) -> MetaOapg.properties.pending_shared: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["pin_count"]) -> MetaOapg.properties.pin_count: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["previous_names"]) -> MetaOapg.properties.previous_names: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["priority"]) -> MetaOapg.properties.priority: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["purpose"]) -> MetaOapg.properties.purpose: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["shared_team_ids"]) -> MetaOapg.properties.shared_team_ids: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["shares"]) -> MetaOapg.properties.shares: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["timezone_count"]) -> MetaOapg.properties.timezone_count: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["topic"]) -> MetaOapg.properties.topic: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["unlinked"]) -> MetaOapg.properties.unlinked: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["unread_count"]) -> MetaOapg.properties.unread_count: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["unread_count_display"]) -> MetaOapg.properties.unread_count_display: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["use_case"]) -> MetaOapg.properties.use_case: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'DefsUserId': ...
                    
                    @typing.overload
                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                    
                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["version", "accepted_user", "connected_team_ids", "conversation_host_id", "created", "creator", "display_counts", "enterprise_id", "has_pins", "id", "internal_team_ids", "is_archived", "is_channel", "is_ext_shared", "is_frozen", "is_general", "is_global_shared", "is_group", "is_im", "is_member", "is_moved", "is_mpim", "is_non_threadable", "is_open", "is_org_default", "is_org_mandatory", "is_org_shared", "is_pending_ext_shared", "is_private", "is_read_only", "is_shared", "is_starred", "is_thread_only", "last_read", "latest", "members", "name", "name_normalized", "num_members", "parent_conversation", "pending_connected_team_ids", "pending_shared", "pin_count", "previous_names", "priority", "purpose", "shared_team_ids", "shares", "timezone_count", "topic", "unlinked", "unread_count", "unread_count_display", "use_case", "user", ], str]):
                        # dict_instance[name] accessor
                        return super().__getitem__(name)
                    
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["accepted_user"]) -> typing.Union['DefsUserId', schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["connected_team_ids"]) -> typing.Union[MetaOapg.properties.connected_team_ids, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["conversation_host_id"]) -> typing.Union['DefsWorkspaceId', schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["creator"]) -> 'DefsUserId': ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["display_counts"]) -> typing.Union[MetaOapg.properties.display_counts, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["enterprise_id"]) -> typing.Union['DefsEnterpriseId', schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["has_pins"]) -> typing.Union[MetaOapg.properties.has_pins, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> 'DefsChannel': ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["internal_team_ids"]) -> typing.Union[MetaOapg.properties.internal_team_ids, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_archived"]) -> MetaOapg.properties.is_archived: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_channel"]) -> MetaOapg.properties.is_channel: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_ext_shared"]) -> typing.Union[MetaOapg.properties.is_ext_shared, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_frozen"]) -> typing.Union[MetaOapg.properties.is_frozen, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_general"]) -> MetaOapg.properties.is_general: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_global_shared"]) -> typing.Union[MetaOapg.properties.is_global_shared, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_group"]) -> MetaOapg.properties.is_group: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_im"]) -> MetaOapg.properties.is_im: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_member"]) -> typing.Union[MetaOapg.properties.is_member, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_moved"]) -> typing.Union[MetaOapg.properties.is_moved, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_mpim"]) -> MetaOapg.properties.is_mpim: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_non_threadable"]) -> typing.Union[MetaOapg.properties.is_non_threadable, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_open"]) -> typing.Union[MetaOapg.properties.is_open, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_org_default"]) -> typing.Union[MetaOapg.properties.is_org_default, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_org_mandatory"]) -> typing.Union[MetaOapg.properties.is_org_mandatory, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_org_shared"]) -> MetaOapg.properties.is_org_shared: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_pending_ext_shared"]) -> typing.Union[MetaOapg.properties.is_pending_ext_shared, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_private"]) -> MetaOapg.properties.is_private: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_read_only"]) -> typing.Union[MetaOapg.properties.is_read_only, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_shared"]) -> MetaOapg.properties.is_shared: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_starred"]) -> typing.Union[MetaOapg.properties.is_starred, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_thread_only"]) -> typing.Union[MetaOapg.properties.is_thread_only, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["last_read"]) -> typing.Union['DefsTs', schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["latest"]) -> typing.Union[MetaOapg.properties.latest, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["members"]) -> typing.Union[MetaOapg.properties.members, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["name_normalized"]) -> MetaOapg.properties.name_normalized: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["num_members"]) -> typing.Union[MetaOapg.properties.num_members, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["parent_conversation"]) -> typing.Union[MetaOapg.properties.parent_conversation, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["pending_connected_team_ids"]) -> typing.Union[MetaOapg.properties.pending_connected_team_ids, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["pending_shared"]) -> typing.Union[MetaOapg.properties.pending_shared, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["pin_count"]) -> typing.Union[MetaOapg.properties.pin_count, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["previous_names"]) -> typing.Union[MetaOapg.properties.previous_names, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["priority"]) -> typing.Union[MetaOapg.properties.priority, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["purpose"]) -> MetaOapg.properties.purpose: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["shared_team_ids"]) -> typing.Union[MetaOapg.properties.shared_team_ids, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["shares"]) -> typing.Union[MetaOapg.properties.shares, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["timezone_count"]) -> typing.Union[MetaOapg.properties.timezone_count, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["topic"]) -> MetaOapg.properties.topic: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["unlinked"]) -> typing.Union[MetaOapg.properties.unlinked, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["unread_count"]) -> typing.Union[MetaOapg.properties.unread_count, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["unread_count_display"]) -> typing.Union[MetaOapg.properties.unread_count_display, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["use_case"]) -> typing.Union[MetaOapg.properties.use_case, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union['DefsUserId', schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                    
                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["version", "accepted_user", "connected_team_ids", "conversation_host_id", "created", "creator", "display_counts", "enterprise_id", "has_pins", "id", "internal_team_ids", "is_archived", "is_channel", "is_ext_shared", "is_frozen", "is_general", "is_global_shared", "is_group", "is_im", "is_member", "is_moved", "is_mpim", "is_non_threadable", "is_open", "is_org_default", "is_org_mandatory", "is_org_shared", "is_pending_ext_shared", "is_private", "is_read_only", "is_shared", "is_starred", "is_thread_only", "last_read", "latest", "members", "name", "name_normalized", "num_members", "parent_conversation", "pending_connected_team_ids", "pending_shared", "pin_count", "previous_names", "priority", "purpose", "shared_team_ids", "shares", "timezone_count", "topic", "unlinked", "unread_count", "unread_count_display", "use_case", "user", ], str]):
                        return super().get_item_oapg(name)
                    
                
                    def __new__(
                        cls,
                        *args: typing.Union[dict, frozendict.frozendict, ],
                        is_private: typing.Union[MetaOapg.properties.is_private, bool, ],
                        creator: 'DefsUserId',
                        is_im: typing.Union[MetaOapg.properties.is_im, bool, ],
                        is_mpim: typing.Union[MetaOapg.properties.is_mpim, bool, ],
                        purpose: typing.Union[MetaOapg.properties.purpose, dict, frozendict.frozendict, ],
                        created: typing.Union[MetaOapg.properties.created, decimal.Decimal, int, ],
                        name_normalized: typing.Union[MetaOapg.properties.name_normalized, str, ],
                        is_group: typing.Union[MetaOapg.properties.is_group, bool, ],
                        is_archived: typing.Union[MetaOapg.properties.is_archived, bool, ],
                        is_channel: typing.Union[MetaOapg.properties.is_channel, bool, ],
                        is_general: typing.Union[MetaOapg.properties.is_general, bool, ],
                        is_shared: typing.Union[MetaOapg.properties.is_shared, bool, ],
                        name: typing.Union[MetaOapg.properties.name, str, ],
                        topic: typing.Union[MetaOapg.properties.topic, dict, frozendict.frozendict, ],
                        id: 'DefsChannel',
                        is_org_shared: typing.Union[MetaOapg.properties.is_org_shared, bool, ],
                        version: typing.Union[MetaOapg.properties.version, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                        accepted_user: typing.Union['DefsUserId', schemas.Unset] = schemas.unset,
                        connected_team_ids: typing.Union[MetaOapg.properties.connected_team_ids, list, tuple, schemas.Unset] = schemas.unset,
                        conversation_host_id: typing.Union['DefsWorkspaceId', schemas.Unset] = schemas.unset,
                        display_counts: typing.Union[MetaOapg.properties.display_counts, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                        enterprise_id: typing.Union['DefsEnterpriseId', schemas.Unset] = schemas.unset,
                        has_pins: typing.Union[MetaOapg.properties.has_pins, bool, schemas.Unset] = schemas.unset,
                        internal_team_ids: typing.Union[MetaOapg.properties.internal_team_ids, list, tuple, schemas.Unset] = schemas.unset,
                        is_ext_shared: typing.Union[MetaOapg.properties.is_ext_shared, bool, schemas.Unset] = schemas.unset,
                        is_frozen: typing.Union[MetaOapg.properties.is_frozen, bool, schemas.Unset] = schemas.unset,
                        is_global_shared: typing.Union[MetaOapg.properties.is_global_shared, bool, schemas.Unset] = schemas.unset,
                        is_member: typing.Union[MetaOapg.properties.is_member, bool, schemas.Unset] = schemas.unset,
                        is_moved: typing.Union[MetaOapg.properties.is_moved, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                        is_non_threadable: typing.Union[MetaOapg.properties.is_non_threadable, bool, schemas.Unset] = schemas.unset,
                        is_open: typing.Union[MetaOapg.properties.is_open, bool, schemas.Unset] = schemas.unset,
                        is_org_default: typing.Union[MetaOapg.properties.is_org_default, bool, schemas.Unset] = schemas.unset,
                        is_org_mandatory: typing.Union[MetaOapg.properties.is_org_mandatory, bool, schemas.Unset] = schemas.unset,
                        is_pending_ext_shared: typing.Union[MetaOapg.properties.is_pending_ext_shared, bool, schemas.Unset] = schemas.unset,
                        is_read_only: typing.Union[MetaOapg.properties.is_read_only, bool, schemas.Unset] = schemas.unset,
                        is_starred: typing.Union[MetaOapg.properties.is_starred, bool, schemas.Unset] = schemas.unset,
                        is_thread_only: typing.Union[MetaOapg.properties.is_thread_only, bool, schemas.Unset] = schemas.unset,
                        last_read: typing.Union['DefsTs', schemas.Unset] = schemas.unset,
                        latest: typing.Union[MetaOapg.properties.latest, list, tuple, schemas.Unset] = schemas.unset,
                        members: typing.Union[MetaOapg.properties.members, list, tuple, schemas.Unset] = schemas.unset,
                        num_members: typing.Union[MetaOapg.properties.num_members, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                        parent_conversation: typing.Union[MetaOapg.properties.parent_conversation, list, tuple, schemas.Unset] = schemas.unset,
                        pending_connected_team_ids: typing.Union[MetaOapg.properties.pending_connected_team_ids, list, tuple, schemas.Unset] = schemas.unset,
                        pending_shared: typing.Union[MetaOapg.properties.pending_shared, list, tuple, schemas.Unset] = schemas.unset,
                        pin_count: typing.Union[MetaOapg.properties.pin_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                        previous_names: typing.Union[MetaOapg.properties.previous_names, list, tuple, schemas.Unset] = schemas.unset,
                        priority: typing.Union[MetaOapg.properties.priority, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                        shared_team_ids: typing.Union[MetaOapg.properties.shared_team_ids, list, tuple, schemas.Unset] = schemas.unset,
                        shares: typing.Union[MetaOapg.properties.shares, list, tuple, schemas.Unset] = schemas.unset,
                        timezone_count: typing.Union[MetaOapg.properties.timezone_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                        unlinked: typing.Union[MetaOapg.properties.unlinked, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                        unread_count: typing.Union[MetaOapg.properties.unread_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                        unread_count_display: typing.Union[MetaOapg.properties.unread_count_display, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                        use_case: typing.Union[MetaOapg.properties.use_case, str, schemas.Unset] = schemas.unset,
                        user: typing.Union['DefsUserId', schemas.Unset] = schemas.unset,
                        _configuration: typing.Optional[schemas.Configuration] = None,
                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                    ) -> 'any_of_0':
                        return super().__new__(
                            cls,
                            *args,
                            is_private=is_private,
                            creator=creator,
                            is_im=is_im,
                            is_mpim=is_mpim,
                            purpose=purpose,
                            created=created,
                            name_normalized=name_normalized,
                            is_group=is_group,
                            is_archived=is_archived,
                            is_channel=is_channel,
                            is_general=is_general,
                            is_shared=is_shared,
                            name=name,
                            topic=topic,
                            id=id,
                            is_org_shared=is_org_shared,
                            version=version,
                            accepted_user=accepted_user,
                            connected_team_ids=connected_team_ids,
                            conversation_host_id=conversation_host_id,
                            display_counts=display_counts,
                            enterprise_id=enterprise_id,
                            has_pins=has_pins,
                            internal_team_ids=internal_team_ids,
                            is_ext_shared=is_ext_shared,
                            is_frozen=is_frozen,
                            is_global_shared=is_global_shared,
                            is_member=is_member,
                            is_moved=is_moved,
                            is_non_threadable=is_non_threadable,
                            is_open=is_open,
                            is_org_default=is_org_default,
                            is_org_mandatory=is_org_mandatory,
                            is_pending_ext_shared=is_pending_ext_shared,
                            is_read_only=is_read_only,
                            is_starred=is_starred,
                            is_thread_only=is_thread_only,
                            last_read=last_read,
                            latest=latest,
                            members=members,
                            num_members=num_members,
                            parent_conversation=parent_conversation,
                            pending_connected_team_ids=pending_connected_team_ids,
                            pending_shared=pending_shared,
                            pin_count=pin_count,
                            previous_names=previous_names,
                            priority=priority,
                            shared_team_ids=shared_team_ids,
                            shares=shares,
                            timezone_count=timezone_count,
                            unlinked=unlinked,
                            unread_count=unread_count,
                            unread_count_display=unread_count_display,
                            use_case=use_case,
                            user=user,
                            _configuration=_configuration,
                            **kwargs,
                        )
                
                
                class any_of_1(
                    schemas.DictSchema
                ):
                
                
                    class MetaOapg:
                        required = {
                            "is_private",
                            "creator",
                            "is_im",
                            "is_mpim",
                            "purpose",
                            "created",
                            "name_normalized",
                            "is_group",
                            "is_archived",
                            "is_channel",
                            "is_general",
                            "is_shared",
                            "name",
                            "topic",
                            "id",
                            "is_org_shared",
                        }
                        
                        class properties:
                            version = schemas.IntSchema
                        
                            @staticmethod
                            def accepted_user() -> typing.Type['DefsUserId']:
                                return DefsUserId
                            
                            
                            class connected_team_ids(
                                schemas.ListSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    @staticmethod
                                    def items() -> typing.Type['DefsTeam']:
                                        return DefsTeam
                            
                                def __new__(
                                    cls,
                                    arg: typing.Union[typing.Tuple['DefsTeam'], typing.List['DefsTeam']],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                ) -> 'connected_team_ids':
                                    return super().__new__(
                                        cls,
                                        arg,
                                        _configuration=_configuration,
                                    )
                            
                                def __getitem__(self, i: int) -> 'DefsTeam':
                                    return super().__getitem__(i)
                        
                            @staticmethod
                            def conversation_host_id() -> typing.Type['DefsWorkspaceId']:
                                return DefsWorkspaceId
                            created = schemas.IntSchema
                        
                            @staticmethod
                            def creator() -> typing.Type['DefsUserId']:
                                return DefsUserId
                            
                            
                            class display_counts(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    required = {
                                        "display_counts",
                                        "guest_counts",
                                    }
                                    
                                    class properties:
                                        display_counts = schemas.IntSchema
                                        guest_counts = schemas.IntSchema
                                        __annotations__ = {
                                            "display_counts": display_counts,
                                            "guest_counts": guest_counts,
                                        }
                                
                                display_counts: MetaOapg.properties.display_counts
                                guest_counts: MetaOapg.properties.guest_counts
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["display_counts"]) -> MetaOapg.properties.display_counts: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["guest_counts"]) -> MetaOapg.properties.guest_counts: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["display_counts", "guest_counts", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["display_counts"]) -> MetaOapg.properties.display_counts: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["guest_counts"]) -> MetaOapg.properties.guest_counts: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["display_counts", "guest_counts", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                    display_counts: typing.Union[MetaOapg.properties.display_counts, decimal.Decimal, int, ],
                                    guest_counts: typing.Union[MetaOapg.properties.guest_counts, decimal.Decimal, int, ],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'display_counts':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        display_counts=display_counts,
                                        guest_counts=guest_counts,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                        
                            @staticmethod
                            def id() -> typing.Type['DefsChannel']:
                                return DefsChannel
                            
                            
                            class internal_team_ids(
                                schemas.ListSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    @staticmethod
                                    def items() -> typing.Type['DefsTeam']:
                                        return DefsTeam
                            
                                def __new__(
                                    cls,
                                    arg: typing.Union[typing.Tuple['DefsTeam'], typing.List['DefsTeam']],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                ) -> 'internal_team_ids':
                                    return super().__new__(
                                        cls,
                                        arg,
                                        _configuration=_configuration,
                                    )
                            
                                def __getitem__(self, i: int) -> 'DefsTeam':
                                    return super().__getitem__(i)
                            is_archived = schemas.BoolSchema
                            is_channel = schemas.BoolSchema
                            is_ext_shared = schemas.BoolSchema
                            is_frozen = schemas.BoolSchema
                            is_general = schemas.BoolSchema
                            is_group = schemas.BoolSchema
                            is_im = schemas.BoolSchema
                            is_member = schemas.BoolSchema
                            is_moved = schemas.IntSchema
                            
                            
                            class is_mpim(
                                schemas.EnumBase,
                                schemas.BoolSchema
                            ):
                                
                                @schemas.classproperty
                                def TRUE(cls):
                                    return cls(True)
                            is_non_threadable = schemas.BoolSchema
                            is_open = schemas.BoolSchema
                            is_org_shared = schemas.BoolSchema
                            is_pending_ext_shared = schemas.BoolSchema
                            is_private = schemas.BoolSchema
                            is_read_only = schemas.BoolSchema
                            is_shared = schemas.BoolSchema
                            is_starred = schemas.BoolSchema
                            is_thread_only = schemas.BoolSchema
                        
                            @staticmethod
                            def last_read() -> typing.Type['DefsTs']:
                                return DefsTs
                            
                            
                            class latest(
                                schemas.ListSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    
                                    class items(
                                        schemas.ComposedSchema,
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            any_of_1 = schemas.AnyTypeSchema
                                            
                                            @classmethod
                                            @functools.lru_cache()
                                            def any_of(cls):
                                                # we need this here to make our import statements work
                                                # we must store _composed_schemas in here so the code is only run
                                                # when we invoke this method. If we kept this at the class
                                                # level we would get an error because the class level
                                                # code would be run when this module is imported, and these composed
                                                # classes don't exist yet because their module has not finished
                                                # loading
                                                return [
                                                    ObjsMessage,
                                                    cls.any_of_1,
                                                ]
                                    
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'items':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                            
                                def __new__(
                                    cls,
                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                ) -> 'latest':
                                    return super().__new__(
                                        cls,
                                        arg,
                                        _configuration=_configuration,
                                    )
                            
                                def __getitem__(self, i: int) -> MetaOapg.items:
                                    return super().__getitem__(i)
                            
                            
                            class members(
                                schemas.ListSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    @staticmethod
                                    def items() -> typing.Type['DefsUserId']:
                                        return DefsUserId
                            
                                def __new__(
                                    cls,
                                    arg: typing.Union[typing.Tuple['DefsUserId'], typing.List['DefsUserId']],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                ) -> 'members':
                                    return super().__new__(
                                        cls,
                                        arg,
                                        _configuration=_configuration,
                                    )
                            
                                def __getitem__(self, i: int) -> 'DefsUserId':
                                    return super().__getitem__(i)
                            name = schemas.StrSchema
                            name_normalized = schemas.StrSchema
                            num_members = schemas.IntSchema
                            
                            
                            class parent_conversation(
                                schemas.ListSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    
                                    class items(
                                        schemas.ComposedSchema,
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            any_of_1 = schemas.AnyTypeSchema
                                            
                                            @classmethod
                                            @functools.lru_cache()
                                            def any_of(cls):
                                                # we need this here to make our import statements work
                                                # we must store _composed_schemas in here so the code is only run
                                                # when we invoke this method. If we kept this at the class
                                                # level we would get an error because the class level
                                                # code would be run when this module is imported, and these composed
                                                # classes don't exist yet because their module has not finished
                                                # loading
                                                return [
                                                    DefsChannel,
                                                    cls.any_of_1,
                                                ]
                                    
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'items':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                            
                                def __new__(
                                    cls,
                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                ) -> 'parent_conversation':
                                    return super().__new__(
                                        cls,
                                        arg,
                                        _configuration=_configuration,
                                    )
                            
                                def __getitem__(self, i: int) -> MetaOapg.items:
                                    return super().__getitem__(i)
                            
                            
                            class pending_connected_team_ids(
                                schemas.ListSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    @staticmethod
                                    def items() -> typing.Type['DefsTeam']:
                                        return DefsTeam
                            
                                def __new__(
                                    cls,
                                    arg: typing.Union[typing.Tuple['DefsTeam'], typing.List['DefsTeam']],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                ) -> 'pending_connected_team_ids':
                                    return super().__new__(
                                        cls,
                                        arg,
                                        _configuration=_configuration,
                                    )
                            
                                def __getitem__(self, i: int) -> 'DefsTeam':
                                    return super().__getitem__(i)
                            
                            
                            class pending_shared(
                                schemas.ListSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    @staticmethod
                                    def items() -> typing.Type['DefsTeam']:
                                        return DefsTeam
                            
                                def __new__(
                                    cls,
                                    arg: typing.Union[typing.Tuple['DefsTeam'], typing.List['DefsTeam']],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                ) -> 'pending_shared':
                                    return super().__new__(
                                        cls,
                                        arg,
                                        _configuration=_configuration,
                                    )
                            
                                def __getitem__(self, i: int) -> 'DefsTeam':
                                    return super().__getitem__(i)
                            pin_count = schemas.IntSchema
                            
                            
                            class previous_names(
                                schemas.ListSchema
                            ):
                            
                            
                                class MetaOapg:
                                    items = schemas.StrSchema
                            
                                def __new__(
                                    cls,
                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                ) -> 'previous_names':
                                    return super().__new__(
                                        cls,
                                        arg,
                                        _configuration=_configuration,
                                    )
                            
                                def __getitem__(self, i: int) -> MetaOapg.items:
                                    return super().__getitem__(i)
                            priority = schemas.NumberSchema
                            
                            
                            class purpose(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    required = {
                                        "last_set",
                                        "creator",
                                        "value",
                                    }
                                    
                                    class properties:
                                    
                                        @staticmethod
                                        def creator() -> typing.Type['DefsTopicPurposeCreator']:
                                            return DefsTopicPurposeCreator
                                        last_set = schemas.IntSchema
                                        value = schemas.StrSchema
                                        __annotations__ = {
                                            "creator": creator,
                                            "last_set": last_set,
                                            "value": value,
                                        }
                                
                                last_set: MetaOapg.properties.last_set
                                creator: 'DefsTopicPurposeCreator'
                                value: MetaOapg.properties.value
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["creator"]) -> 'DefsTopicPurposeCreator': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["last_set"]) -> MetaOapg.properties.last_set: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["creator", "last_set", "value", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["creator"]) -> 'DefsTopicPurposeCreator': ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["last_set"]) -> MetaOapg.properties.last_set: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["creator", "last_set", "value", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                    last_set: typing.Union[MetaOapg.properties.last_set, decimal.Decimal, int, ],
                                    creator: 'DefsTopicPurposeCreator',
                                    value: typing.Union[MetaOapg.properties.value, str, ],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'purpose':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        last_set=last_set,
                                        creator=creator,
                                        value=value,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                            
                            
                            class shared_team_ids(
                                schemas.ListSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    @staticmethod
                                    def items() -> typing.Type['DefsTeam']:
                                        return DefsTeam
                            
                                def __new__(
                                    cls,
                                    arg: typing.Union[typing.Tuple['DefsTeam'], typing.List['DefsTeam']],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                ) -> 'shared_team_ids':
                                    return super().__new__(
                                        cls,
                                        arg,
                                        _configuration=_configuration,
                                    )
                            
                                def __getitem__(self, i: int) -> 'DefsTeam':
                                    return super().__getitem__(i)
                            
                            
                            class shares(
                                schemas.ListSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    
                                    class items(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            required = {
                                                "is_active",
                                                "team",
                                                "user",
                                            }
                                            
                                            class properties:
                                            
                                                @staticmethod
                                                def accepted_user() -> typing.Type['DefsUserId']:
                                                    return DefsUserId
                                                is_active = schemas.BoolSchema
                                            
                                                @staticmethod
                                                def team() -> typing.Type['ObjsTeam']:
                                                    return ObjsTeam
                                            
                                                @staticmethod
                                                def user() -> typing.Type['DefsUserId']:
                                                    return DefsUserId
                                                __annotations__ = {
                                                    "accepted_user": accepted_user,
                                                    "is_active": is_active,
                                                    "team": team,
                                                    "user": user,
                                                }
                                        
                                        is_active: MetaOapg.properties.is_active
                                        team: 'ObjsTeam'
                                        user: 'DefsUserId'
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["accepted_user"]) -> 'DefsUserId': ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["is_active"]) -> MetaOapg.properties.is_active: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["team"]) -> 'ObjsTeam': ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'DefsUserId': ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["accepted_user", "is_active", "team", "user", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["accepted_user"]) -> typing.Union['DefsUserId', schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["is_active"]) -> MetaOapg.properties.is_active: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["team"]) -> 'ObjsTeam': ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> 'DefsUserId': ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["accepted_user", "is_active", "team", "user", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                            is_active: typing.Union[MetaOapg.properties.is_active, bool, ],
                                            team: 'ObjsTeam',
                                            user: 'DefsUserId',
                                            accepted_user: typing.Union['DefsUserId', schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'items':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                is_active=is_active,
                                                team=team,
                                                user=user,
                                                accepted_user=accepted_user,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                            
                                def __new__(
                                    cls,
                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                ) -> 'shares':
                                    return super().__new__(
                                        cls,
                                        arg,
                                        _configuration=_configuration,
                                    )
                            
                                def __getitem__(self, i: int) -> MetaOapg.items:
                                    return super().__getitem__(i)
                            timezone_count = schemas.IntSchema
                            
                            
                            class topic(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    required = {
                                        "last_set",
                                        "creator",
                                        "value",
                                    }
                                    
                                    class properties:
                                    
                                        @staticmethod
                                        def creator() -> typing.Type['DefsTopicPurposeCreator']:
                                            return DefsTopicPurposeCreator
                                        last_set = schemas.IntSchema
                                        value = schemas.StrSchema
                                        __annotations__ = {
                                            "creator": creator,
                                            "last_set": last_set,
                                            "value": value,
                                        }
                                
                                last_set: MetaOapg.properties.last_set
                                creator: 'DefsTopicPurposeCreator'
                                value: MetaOapg.properties.value
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["creator"]) -> 'DefsTopicPurposeCreator': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["last_set"]) -> MetaOapg.properties.last_set: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["creator", "last_set", "value", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["creator"]) -> 'DefsTopicPurposeCreator': ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["last_set"]) -> MetaOapg.properties.last_set: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["creator", "last_set", "value", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                    last_set: typing.Union[MetaOapg.properties.last_set, decimal.Decimal, int, ],
                                    creator: 'DefsTopicPurposeCreator',
                                    value: typing.Union[MetaOapg.properties.value, str, ],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'topic':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        last_set=last_set,
                                        creator=creator,
                                        value=value,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                            unlinked = schemas.IntSchema
                            unread_count = schemas.IntSchema
                            unread_count_display = schemas.IntSchema
                        
                            @staticmethod
                            def user() -> typing.Type['DefsUserId']:
                                return DefsUserId
                            __annotations__ = {
                                "version": version,
                                "accepted_user": accepted_user,
                                "connected_team_ids": connected_team_ids,
                                "conversation_host_id": conversation_host_id,
                                "created": created,
                                "creator": creator,
                                "display_counts": display_counts,
                                "id": id,
                                "internal_team_ids": internal_team_ids,
                                "is_archived": is_archived,
                                "is_channel": is_channel,
                                "is_ext_shared": is_ext_shared,
                                "is_frozen": is_frozen,
                                "is_general": is_general,
                                "is_group": is_group,
                                "is_im": is_im,
                                "is_member": is_member,
                                "is_moved": is_moved,
                                "is_mpim": is_mpim,
                                "is_non_threadable": is_non_threadable,
                                "is_open": is_open,
                                "is_org_shared": is_org_shared,
                                "is_pending_ext_shared": is_pending_ext_shared,
                                "is_private": is_private,
                                "is_read_only": is_read_only,
                                "is_shared": is_shared,
                                "is_starred": is_starred,
                                "is_thread_only": is_thread_only,
                                "last_read": last_read,
                                "latest": latest,
                                "members": members,
                                "name": name,
                                "name_normalized": name_normalized,
                                "num_members": num_members,
                                "parent_conversation": parent_conversation,
                                "pending_connected_team_ids": pending_connected_team_ids,
                                "pending_shared": pending_shared,
                                "pin_count": pin_count,
                                "previous_names": previous_names,
                                "priority": priority,
                                "purpose": purpose,
                                "shared_team_ids": shared_team_ids,
                                "shares": shares,
                                "timezone_count": timezone_count,
                                "topic": topic,
                                "unlinked": unlinked,
                                "unread_count": unread_count,
                                "unread_count_display": unread_count_display,
                                "user": user,
                            }
                    
                    is_private: MetaOapg.properties.is_private
                    creator: 'DefsUserId'
                    is_im: MetaOapg.properties.is_im
                    is_mpim: MetaOapg.properties.is_mpim
                    purpose: MetaOapg.properties.purpose
                    created: MetaOapg.properties.created
                    name_normalized: MetaOapg.properties.name_normalized
                    is_group: MetaOapg.properties.is_group
                    is_archived: MetaOapg.properties.is_archived
                    is_channel: MetaOapg.properties.is_channel
                    is_general: MetaOapg.properties.is_general
                    is_shared: MetaOapg.properties.is_shared
                    name: MetaOapg.properties.name
                    topic: MetaOapg.properties.topic
                    id: 'DefsChannel'
                    is_org_shared: MetaOapg.properties.is_org_shared
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["accepted_user"]) -> 'DefsUserId': ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["connected_team_ids"]) -> MetaOapg.properties.connected_team_ids: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["conversation_host_id"]) -> 'DefsWorkspaceId': ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["creator"]) -> 'DefsUserId': ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["display_counts"]) -> MetaOapg.properties.display_counts: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'DefsChannel': ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["internal_team_ids"]) -> MetaOapg.properties.internal_team_ids: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_archived"]) -> MetaOapg.properties.is_archived: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_channel"]) -> MetaOapg.properties.is_channel: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_ext_shared"]) -> MetaOapg.properties.is_ext_shared: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_frozen"]) -> MetaOapg.properties.is_frozen: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_general"]) -> MetaOapg.properties.is_general: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_group"]) -> MetaOapg.properties.is_group: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_im"]) -> MetaOapg.properties.is_im: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_member"]) -> MetaOapg.properties.is_member: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_moved"]) -> MetaOapg.properties.is_moved: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_mpim"]) -> MetaOapg.properties.is_mpim: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_non_threadable"]) -> MetaOapg.properties.is_non_threadable: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_open"]) -> MetaOapg.properties.is_open: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_org_shared"]) -> MetaOapg.properties.is_org_shared: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_pending_ext_shared"]) -> MetaOapg.properties.is_pending_ext_shared: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_private"]) -> MetaOapg.properties.is_private: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_read_only"]) -> MetaOapg.properties.is_read_only: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_shared"]) -> MetaOapg.properties.is_shared: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_starred"]) -> MetaOapg.properties.is_starred: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_thread_only"]) -> MetaOapg.properties.is_thread_only: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["last_read"]) -> 'DefsTs': ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["latest"]) -> MetaOapg.properties.latest: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["members"]) -> MetaOapg.properties.members: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["name_normalized"]) -> MetaOapg.properties.name_normalized: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["num_members"]) -> MetaOapg.properties.num_members: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["parent_conversation"]) -> MetaOapg.properties.parent_conversation: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["pending_connected_team_ids"]) -> MetaOapg.properties.pending_connected_team_ids: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["pending_shared"]) -> MetaOapg.properties.pending_shared: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["pin_count"]) -> MetaOapg.properties.pin_count: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["previous_names"]) -> MetaOapg.properties.previous_names: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["priority"]) -> MetaOapg.properties.priority: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["purpose"]) -> MetaOapg.properties.purpose: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["shared_team_ids"]) -> MetaOapg.properties.shared_team_ids: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["shares"]) -> MetaOapg.properties.shares: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["timezone_count"]) -> MetaOapg.properties.timezone_count: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["topic"]) -> MetaOapg.properties.topic: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["unlinked"]) -> MetaOapg.properties.unlinked: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["unread_count"]) -> MetaOapg.properties.unread_count: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["unread_count_display"]) -> MetaOapg.properties.unread_count_display: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'DefsUserId': ...
                    
                    @typing.overload
                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                    
                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["version", "accepted_user", "connected_team_ids", "conversation_host_id", "created", "creator", "display_counts", "id", "internal_team_ids", "is_archived", "is_channel", "is_ext_shared", "is_frozen", "is_general", "is_group", "is_im", "is_member", "is_moved", "is_mpim", "is_non_threadable", "is_open", "is_org_shared", "is_pending_ext_shared", "is_private", "is_read_only", "is_shared", "is_starred", "is_thread_only", "last_read", "latest", "members", "name", "name_normalized", "num_members", "parent_conversation", "pending_connected_team_ids", "pending_shared", "pin_count", "previous_names", "priority", "purpose", "shared_team_ids", "shares", "timezone_count", "topic", "unlinked", "unread_count", "unread_count_display", "user", ], str]):
                        # dict_instance[name] accessor
                        return super().__getitem__(name)
                    
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["accepted_user"]) -> typing.Union['DefsUserId', schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["connected_team_ids"]) -> typing.Union[MetaOapg.properties.connected_team_ids, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["conversation_host_id"]) -> typing.Union['DefsWorkspaceId', schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["creator"]) -> 'DefsUserId': ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["display_counts"]) -> typing.Union[MetaOapg.properties.display_counts, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> 'DefsChannel': ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["internal_team_ids"]) -> typing.Union[MetaOapg.properties.internal_team_ids, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_archived"]) -> MetaOapg.properties.is_archived: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_channel"]) -> MetaOapg.properties.is_channel: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_ext_shared"]) -> typing.Union[MetaOapg.properties.is_ext_shared, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_frozen"]) -> typing.Union[MetaOapg.properties.is_frozen, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_general"]) -> MetaOapg.properties.is_general: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_group"]) -> MetaOapg.properties.is_group: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_im"]) -> MetaOapg.properties.is_im: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_member"]) -> typing.Union[MetaOapg.properties.is_member, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_moved"]) -> typing.Union[MetaOapg.properties.is_moved, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_mpim"]) -> MetaOapg.properties.is_mpim: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_non_threadable"]) -> typing.Union[MetaOapg.properties.is_non_threadable, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_open"]) -> typing.Union[MetaOapg.properties.is_open, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_org_shared"]) -> MetaOapg.properties.is_org_shared: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_pending_ext_shared"]) -> typing.Union[MetaOapg.properties.is_pending_ext_shared, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_private"]) -> MetaOapg.properties.is_private: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_read_only"]) -> typing.Union[MetaOapg.properties.is_read_only, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_shared"]) -> MetaOapg.properties.is_shared: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_starred"]) -> typing.Union[MetaOapg.properties.is_starred, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_thread_only"]) -> typing.Union[MetaOapg.properties.is_thread_only, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["last_read"]) -> typing.Union['DefsTs', schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["latest"]) -> typing.Union[MetaOapg.properties.latest, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["members"]) -> typing.Union[MetaOapg.properties.members, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["name_normalized"]) -> MetaOapg.properties.name_normalized: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["num_members"]) -> typing.Union[MetaOapg.properties.num_members, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["parent_conversation"]) -> typing.Union[MetaOapg.properties.parent_conversation, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["pending_connected_team_ids"]) -> typing.Union[MetaOapg.properties.pending_connected_team_ids, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["pending_shared"]) -> typing.Union[MetaOapg.properties.pending_shared, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["pin_count"]) -> typing.Union[MetaOapg.properties.pin_count, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["previous_names"]) -> typing.Union[MetaOapg.properties.previous_names, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["priority"]) -> typing.Union[MetaOapg.properties.priority, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["purpose"]) -> MetaOapg.properties.purpose: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["shared_team_ids"]) -> typing.Union[MetaOapg.properties.shared_team_ids, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["shares"]) -> typing.Union[MetaOapg.properties.shares, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["timezone_count"]) -> typing.Union[MetaOapg.properties.timezone_count, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["topic"]) -> MetaOapg.properties.topic: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["unlinked"]) -> typing.Union[MetaOapg.properties.unlinked, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["unread_count"]) -> typing.Union[MetaOapg.properties.unread_count, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["unread_count_display"]) -> typing.Union[MetaOapg.properties.unread_count_display, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union['DefsUserId', schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                    
                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["version", "accepted_user", "connected_team_ids", "conversation_host_id", "created", "creator", "display_counts", "id", "internal_team_ids", "is_archived", "is_channel", "is_ext_shared", "is_frozen", "is_general", "is_group", "is_im", "is_member", "is_moved", "is_mpim", "is_non_threadable", "is_open", "is_org_shared", "is_pending_ext_shared", "is_private", "is_read_only", "is_shared", "is_starred", "is_thread_only", "last_read", "latest", "members", "name", "name_normalized", "num_members", "parent_conversation", "pending_connected_team_ids", "pending_shared", "pin_count", "previous_names", "priority", "purpose", "shared_team_ids", "shares", "timezone_count", "topic", "unlinked", "unread_count", "unread_count_display", "user", ], str]):
                        return super().get_item_oapg(name)
                    
                
                    def __new__(
                        cls,
                        *args: typing.Union[dict, frozendict.frozendict, ],
                        is_private: typing.Union[MetaOapg.properties.is_private, bool, ],
                        creator: 'DefsUserId',
                        is_im: typing.Union[MetaOapg.properties.is_im, bool, ],
                        is_mpim: typing.Union[MetaOapg.properties.is_mpim, bool, ],
                        purpose: typing.Union[MetaOapg.properties.purpose, dict, frozendict.frozendict, ],
                        created: typing.Union[MetaOapg.properties.created, decimal.Decimal, int, ],
                        name_normalized: typing.Union[MetaOapg.properties.name_normalized, str, ],
                        is_group: typing.Union[MetaOapg.properties.is_group, bool, ],
                        is_archived: typing.Union[MetaOapg.properties.is_archived, bool, ],
                        is_channel: typing.Union[MetaOapg.properties.is_channel, bool, ],
                        is_general: typing.Union[MetaOapg.properties.is_general, bool, ],
                        is_shared: typing.Union[MetaOapg.properties.is_shared, bool, ],
                        name: typing.Union[MetaOapg.properties.name, str, ],
                        topic: typing.Union[MetaOapg.properties.topic, dict, frozendict.frozendict, ],
                        id: 'DefsChannel',
                        is_org_shared: typing.Union[MetaOapg.properties.is_org_shared, bool, ],
                        version: typing.Union[MetaOapg.properties.version, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                        accepted_user: typing.Union['DefsUserId', schemas.Unset] = schemas.unset,
                        connected_team_ids: typing.Union[MetaOapg.properties.connected_team_ids, list, tuple, schemas.Unset] = schemas.unset,
                        conversation_host_id: typing.Union['DefsWorkspaceId', schemas.Unset] = schemas.unset,
                        display_counts: typing.Union[MetaOapg.properties.display_counts, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                        internal_team_ids: typing.Union[MetaOapg.properties.internal_team_ids, list, tuple, schemas.Unset] = schemas.unset,
                        is_ext_shared: typing.Union[MetaOapg.properties.is_ext_shared, bool, schemas.Unset] = schemas.unset,
                        is_frozen: typing.Union[MetaOapg.properties.is_frozen, bool, schemas.Unset] = schemas.unset,
                        is_member: typing.Union[MetaOapg.properties.is_member, bool, schemas.Unset] = schemas.unset,
                        is_moved: typing.Union[MetaOapg.properties.is_moved, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                        is_non_threadable: typing.Union[MetaOapg.properties.is_non_threadable, bool, schemas.Unset] = schemas.unset,
                        is_open: typing.Union[MetaOapg.properties.is_open, bool, schemas.Unset] = schemas.unset,
                        is_pending_ext_shared: typing.Union[MetaOapg.properties.is_pending_ext_shared, bool, schemas.Unset] = schemas.unset,
                        is_read_only: typing.Union[MetaOapg.properties.is_read_only, bool, schemas.Unset] = schemas.unset,
                        is_starred: typing.Union[MetaOapg.properties.is_starred, bool, schemas.Unset] = schemas.unset,
                        is_thread_only: typing.Union[MetaOapg.properties.is_thread_only, bool, schemas.Unset] = schemas.unset,
                        last_read: typing.Union['DefsTs', schemas.Unset] = schemas.unset,
                        latest: typing.Union[MetaOapg.properties.latest, list, tuple, schemas.Unset] = schemas.unset,
                        members: typing.Union[MetaOapg.properties.members, list, tuple, schemas.Unset] = schemas.unset,
                        num_members: typing.Union[MetaOapg.properties.num_members, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                        parent_conversation: typing.Union[MetaOapg.properties.parent_conversation, list, tuple, schemas.Unset] = schemas.unset,
                        pending_connected_team_ids: typing.Union[MetaOapg.properties.pending_connected_team_ids, list, tuple, schemas.Unset] = schemas.unset,
                        pending_shared: typing.Union[MetaOapg.properties.pending_shared, list, tuple, schemas.Unset] = schemas.unset,
                        pin_count: typing.Union[MetaOapg.properties.pin_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                        previous_names: typing.Union[MetaOapg.properties.previous_names, list, tuple, schemas.Unset] = schemas.unset,
                        priority: typing.Union[MetaOapg.properties.priority, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                        shared_team_ids: typing.Union[MetaOapg.properties.shared_team_ids, list, tuple, schemas.Unset] = schemas.unset,
                        shares: typing.Union[MetaOapg.properties.shares, list, tuple, schemas.Unset] = schemas.unset,
                        timezone_count: typing.Union[MetaOapg.properties.timezone_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                        unlinked: typing.Union[MetaOapg.properties.unlinked, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                        unread_count: typing.Union[MetaOapg.properties.unread_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                        unread_count_display: typing.Union[MetaOapg.properties.unread_count_display, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                        user: typing.Union['DefsUserId', schemas.Unset] = schemas.unset,
                        _configuration: typing.Optional[schemas.Configuration] = None,
                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                    ) -> 'any_of_1':
                        return super().__new__(
                            cls,
                            *args,
                            is_private=is_private,
                            creator=creator,
                            is_im=is_im,
                            is_mpim=is_mpim,
                            purpose=purpose,
                            created=created,
                            name_normalized=name_normalized,
                            is_group=is_group,
                            is_archived=is_archived,
                            is_channel=is_channel,
                            is_general=is_general,
                            is_shared=is_shared,
                            name=name,
                            topic=topic,
                            id=id,
                            is_org_shared=is_org_shared,
                            version=version,
                            accepted_user=accepted_user,
                            connected_team_ids=connected_team_ids,
                            conversation_host_id=conversation_host_id,
                            display_counts=display_counts,
                            internal_team_ids=internal_team_ids,
                            is_ext_shared=is_ext_shared,
                            is_frozen=is_frozen,
                            is_member=is_member,
                            is_moved=is_moved,
                            is_non_threadable=is_non_threadable,
                            is_open=is_open,
                            is_pending_ext_shared=is_pending_ext_shared,
                            is_read_only=is_read_only,
                            is_starred=is_starred,
                            is_thread_only=is_thread_only,
                            last_read=last_read,
                            latest=latest,
                            members=members,
                            num_members=num_members,
                            parent_conversation=parent_conversation,
                            pending_connected_team_ids=pending_connected_team_ids,
                            pending_shared=pending_shared,
                            pin_count=pin_count,
                            previous_names=previous_names,
                            priority=priority,
                            shared_team_ids=shared_team_ids,
                            shares=shares,
                            timezone_count=timezone_count,
                            unlinked=unlinked,
                            unread_count=unread_count,
                            unread_count_display=unread_count_display,
                            user=user,
                            _configuration=_configuration,
                            **kwargs,
                        )
                
                
                class any_of_2(
                    schemas.DictSchema
                ):
                
                
                    class MetaOapg:
                        required = {
                            "is_im",
                            "created",
                            "id",
                            "priority",
                            "is_org_shared",
                            "user",
                        }
                        
                        class properties:
                            version = schemas.IntSchema
                            created = schemas.IntSchema
                            has_pins = schemas.BoolSchema
                        
                            @staticmethod
                            def id() -> typing.Type['DefsDmId']:
                                return DefsDmId
                            is_archived = schemas.BoolSchema
                            is_ext_shared = schemas.BoolSchema
                            is_frozen = schemas.BoolSchema
                            is_im = schemas.BoolSchema
                            is_open = schemas.BoolSchema
                            is_org_shared = schemas.BoolSchema
                            is_shared = schemas.BoolSchema
                            is_starred = schemas.BoolSchema
                            is_user_deleted = schemas.BoolSchema
                        
                            @staticmethod
                            def last_read() -> typing.Type['DefsTs']:
                                return DefsTs
                            
                            
                            class latest(
                                schemas.ListSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    
                                    class items(
                                        schemas.ComposedSchema,
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            any_of_1 = schemas.AnyTypeSchema
                                            
                                            @classmethod
                                            @functools.lru_cache()
                                            def any_of(cls):
                                                # we need this here to make our import statements work
                                                # we must store _composed_schemas in here so the code is only run
                                                # when we invoke this method. If we kept this at the class
                                                # level we would get an error because the class level
                                                # code would be run when this module is imported, and these composed
                                                # classes don't exist yet because their module has not finished
                                                # loading
                                                return [
                                                    ObjsMessage,
                                                    cls.any_of_1,
                                                ]
                                    
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'items':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                            
                                def __new__(
                                    cls,
                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                ) -> 'latest':
                                    return super().__new__(
                                        cls,
                                        arg,
                                        _configuration=_configuration,
                                    )
                            
                                def __getitem__(self, i: int) -> MetaOapg.items:
                                    return super().__getitem__(i)
                            
                            
                            class parent_conversation(
                                schemas.ListSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    
                                    class items(
                                        schemas.ComposedSchema,
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            any_of_1 = schemas.AnyTypeSchema
                                            
                                            @classmethod
                                            @functools.lru_cache()
                                            def any_of(cls):
                                                # we need this here to make our import statements work
                                                # we must store _composed_schemas in here so the code is only run
                                                # when we invoke this method. If we kept this at the class
                                                # level we would get an error because the class level
                                                # code would be run when this module is imported, and these composed
                                                # classes don't exist yet because their module has not finished
                                                # loading
                                                return [
                                                    DefsChannel,
                                                    cls.any_of_1,
                                                ]
                                    
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'items':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                            
                                def __new__(
                                    cls,
                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                ) -> 'parent_conversation':
                                    return super().__new__(
                                        cls,
                                        arg,
                                        _configuration=_configuration,
                                    )
                            
                                def __getitem__(self, i: int) -> MetaOapg.items:
                                    return super().__getitem__(i)
                            pin_count = schemas.IntSchema
                            priority = schemas.NumberSchema
                            
                            
                            class shares(
                                schemas.ListSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    
                                    class items(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            required = {
                                                "is_active",
                                                "date_create",
                                                "name",
                                                "id",
                                                "team",
                                            }
                                            
                                            class properties:
                                                date_create = schemas.IntSchema
                                            
                                                @staticmethod
                                                def id() -> typing.Type['DefsTeam']:
                                                    return DefsTeam
                                                is_active = schemas.BoolSchema
                                                name = schemas.StrSchema
                                            
                                                @staticmethod
                                                def team() -> typing.Type['ObjsTeam']:
                                                    return ObjsTeam
                                                __annotations__ = {
                                                    "date_create": date_create,
                                                    "id": id,
                                                    "is_active": is_active,
                                                    "name": name,
                                                    "team": team,
                                                }
                                        
                                        is_active: MetaOapg.properties.is_active
                                        date_create: MetaOapg.properties.date_create
                                        name: MetaOapg.properties.name
                                        id: 'DefsTeam'
                                        team: 'ObjsTeam'
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["date_create"]) -> MetaOapg.properties.date_create: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'DefsTeam': ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["is_active"]) -> MetaOapg.properties.is_active: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["team"]) -> 'ObjsTeam': ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["date_create", "id", "is_active", "name", "team", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["date_create"]) -> MetaOapg.properties.date_create: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> 'DefsTeam': ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["is_active"]) -> MetaOapg.properties.is_active: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["team"]) -> 'ObjsTeam': ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["date_create", "id", "is_active", "name", "team", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                            is_active: typing.Union[MetaOapg.properties.is_active, bool, ],
                                            date_create: typing.Union[MetaOapg.properties.date_create, decimal.Decimal, int, ],
                                            name: typing.Union[MetaOapg.properties.name, str, ],
                                            id: 'DefsTeam',
                                            team: 'ObjsTeam',
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'items':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                is_active=is_active,
                                                date_create=date_create,
                                                name=name,
                                                id=id,
                                                team=team,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                            
                                def __new__(
                                    cls,
                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                ) -> 'shares':
                                    return super().__new__(
                                        cls,
                                        arg,
                                        _configuration=_configuration,
                                    )
                            
                                def __getitem__(self, i: int) -> MetaOapg.items:
                                    return super().__getitem__(i)
                            unread_count = schemas.IntSchema
                            unread_count_display = schemas.IntSchema
                        
                            @staticmethod
                            def user() -> typing.Type['DefsUserId']:
                                return DefsUserId
                            __annotations__ = {
                                "version": version,
                                "created": created,
                                "has_pins": has_pins,
                                "id": id,
                                "is_archived": is_archived,
                                "is_ext_shared": is_ext_shared,
                                "is_frozen": is_frozen,
                                "is_im": is_im,
                                "is_open": is_open,
                                "is_org_shared": is_org_shared,
                                "is_shared": is_shared,
                                "is_starred": is_starred,
                                "is_user_deleted": is_user_deleted,
                                "last_read": last_read,
                                "latest": latest,
                                "parent_conversation": parent_conversation,
                                "pin_count": pin_count,
                                "priority": priority,
                                "shares": shares,
                                "unread_count": unread_count,
                                "unread_count_display": unread_count_display,
                                "user": user,
                            }
                    
                    is_im: MetaOapg.properties.is_im
                    created: MetaOapg.properties.created
                    id: 'DefsDmId'
                    priority: MetaOapg.properties.priority
                    is_org_shared: MetaOapg.properties.is_org_shared
                    user: 'DefsUserId'
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["has_pins"]) -> MetaOapg.properties.has_pins: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'DefsDmId': ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_archived"]) -> MetaOapg.properties.is_archived: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_ext_shared"]) -> MetaOapg.properties.is_ext_shared: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_frozen"]) -> MetaOapg.properties.is_frozen: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_im"]) -> MetaOapg.properties.is_im: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_open"]) -> MetaOapg.properties.is_open: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_org_shared"]) -> MetaOapg.properties.is_org_shared: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_shared"]) -> MetaOapg.properties.is_shared: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_starred"]) -> MetaOapg.properties.is_starred: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_user_deleted"]) -> MetaOapg.properties.is_user_deleted: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["last_read"]) -> 'DefsTs': ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["latest"]) -> MetaOapg.properties.latest: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["parent_conversation"]) -> MetaOapg.properties.parent_conversation: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["pin_count"]) -> MetaOapg.properties.pin_count: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["priority"]) -> MetaOapg.properties.priority: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["shares"]) -> MetaOapg.properties.shares: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["unread_count"]) -> MetaOapg.properties.unread_count: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["unread_count_display"]) -> MetaOapg.properties.unread_count_display: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'DefsUserId': ...
                    
                    @typing.overload
                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                    
                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["version", "created", "has_pins", "id", "is_archived", "is_ext_shared", "is_frozen", "is_im", "is_open", "is_org_shared", "is_shared", "is_starred", "is_user_deleted", "last_read", "latest", "parent_conversation", "pin_count", "priority", "shares", "unread_count", "unread_count_display", "user", ], str]):
                        # dict_instance[name] accessor
                        return super().__getitem__(name)
                    
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["has_pins"]) -> typing.Union[MetaOapg.properties.has_pins, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> 'DefsDmId': ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_archived"]) -> typing.Union[MetaOapg.properties.is_archived, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_ext_shared"]) -> typing.Union[MetaOapg.properties.is_ext_shared, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_frozen"]) -> typing.Union[MetaOapg.properties.is_frozen, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_im"]) -> MetaOapg.properties.is_im: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_open"]) -> typing.Union[MetaOapg.properties.is_open, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_org_shared"]) -> MetaOapg.properties.is_org_shared: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_shared"]) -> typing.Union[MetaOapg.properties.is_shared, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_starred"]) -> typing.Union[MetaOapg.properties.is_starred, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_user_deleted"]) -> typing.Union[MetaOapg.properties.is_user_deleted, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["last_read"]) -> typing.Union['DefsTs', schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["latest"]) -> typing.Union[MetaOapg.properties.latest, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["parent_conversation"]) -> typing.Union[MetaOapg.properties.parent_conversation, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["pin_count"]) -> typing.Union[MetaOapg.properties.pin_count, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["priority"]) -> MetaOapg.properties.priority: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["shares"]) -> typing.Union[MetaOapg.properties.shares, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["unread_count"]) -> typing.Union[MetaOapg.properties.unread_count, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["unread_count_display"]) -> typing.Union[MetaOapg.properties.unread_count_display, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> 'DefsUserId': ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                    
                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["version", "created", "has_pins", "id", "is_archived", "is_ext_shared", "is_frozen", "is_im", "is_open", "is_org_shared", "is_shared", "is_starred", "is_user_deleted", "last_read", "latest", "parent_conversation", "pin_count", "priority", "shares", "unread_count", "unread_count_display", "user", ], str]):
                        return super().get_item_oapg(name)
                    
                
                    def __new__(
                        cls,
                        *args: typing.Union[dict, frozendict.frozendict, ],
                        is_im: typing.Union[MetaOapg.properties.is_im, bool, ],
                        created: typing.Union[MetaOapg.properties.created, decimal.Decimal, int, ],
                        id: 'DefsDmId',
                        priority: typing.Union[MetaOapg.properties.priority, decimal.Decimal, int, float, ],
                        is_org_shared: typing.Union[MetaOapg.properties.is_org_shared, bool, ],
                        user: 'DefsUserId',
                        version: typing.Union[MetaOapg.properties.version, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                        has_pins: typing.Union[MetaOapg.properties.has_pins, bool, schemas.Unset] = schemas.unset,
                        is_archived: typing.Union[MetaOapg.properties.is_archived, bool, schemas.Unset] = schemas.unset,
                        is_ext_shared: typing.Union[MetaOapg.properties.is_ext_shared, bool, schemas.Unset] = schemas.unset,
                        is_frozen: typing.Union[MetaOapg.properties.is_frozen, bool, schemas.Unset] = schemas.unset,
                        is_open: typing.Union[MetaOapg.properties.is_open, bool, schemas.Unset] = schemas.unset,
                        is_shared: typing.Union[MetaOapg.properties.is_shared, bool, schemas.Unset] = schemas.unset,
                        is_starred: typing.Union[MetaOapg.properties.is_starred, bool, schemas.Unset] = schemas.unset,
                        is_user_deleted: typing.Union[MetaOapg.properties.is_user_deleted, bool, schemas.Unset] = schemas.unset,
                        last_read: typing.Union['DefsTs', schemas.Unset] = schemas.unset,
                        latest: typing.Union[MetaOapg.properties.latest, list, tuple, schemas.Unset] = schemas.unset,
                        parent_conversation: typing.Union[MetaOapg.properties.parent_conversation, list, tuple, schemas.Unset] = schemas.unset,
                        pin_count: typing.Union[MetaOapg.properties.pin_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                        shares: typing.Union[MetaOapg.properties.shares, list, tuple, schemas.Unset] = schemas.unset,
                        unread_count: typing.Union[MetaOapg.properties.unread_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                        unread_count_display: typing.Union[MetaOapg.properties.unread_count_display, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                        _configuration: typing.Optional[schemas.Configuration] = None,
                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                    ) -> 'any_of_2':
                        return super().__new__(
                            cls,
                            *args,
                            is_im=is_im,
                            created=created,
                            id=id,
                            priority=priority,
                            is_org_shared=is_org_shared,
                            user=user,
                            version=version,
                            has_pins=has_pins,
                            is_archived=is_archived,
                            is_ext_shared=is_ext_shared,
                            is_frozen=is_frozen,
                            is_open=is_open,
                            is_shared=is_shared,
                            is_starred=is_starred,
                            is_user_deleted=is_user_deleted,
                            last_read=last_read,
                            latest=latest,
                            parent_conversation=parent_conversation,
                            pin_count=pin_count,
                            shares=shares,
                            unread_count=unread_count,
                            unread_count_display=unread_count_display,
                            _configuration=_configuration,
                            **kwargs,
                        )
                
                @classmethod
                @functools.lru_cache()
                def any_of(cls):
                    # we need this here to make our import statements work
                    # we must store _composed_schemas in here so the code is only run
                    # when we invoke this method. If we kept this at the class
                    # level we would get an error because the class level
                    # code would be run when this module is imported, and these composed
                    # classes don't exist yet because their module has not finished
                    # loading
                    return [
                        cls.any_of_0,
                        cls.any_of_1,
                        cls.any_of_2,
                    ]
        
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'items':
                return super().__new__(
                    cls,
                    *args,
                    _configuration=_configuration,
                    **kwargs,
                )

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ObjsConversation':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)

from slack_web_python_sdk.model.defs_channel import DefsChannel
from slack_web_python_sdk.model.defs_dm_id import DefsDmId
from slack_web_python_sdk.model.defs_enterprise_id import DefsEnterpriseId
from slack_web_python_sdk.model.defs_team import DefsTeam
from slack_web_python_sdk.model.defs_topic_purpose_creator import DefsTopicPurposeCreator
from slack_web_python_sdk.model.defs_ts import DefsTs
from slack_web_python_sdk.model.defs_user_id import DefsUserId
from slack_web_python_sdk.model.defs_workspace_id import DefsWorkspaceId
from slack_web_python_sdk.model.objs_message import ObjsMessage
from slack_web_python_sdk.model.objs_team import ObjsTeam
