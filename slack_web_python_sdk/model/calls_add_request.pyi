# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Created by: https://api.slack.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slack_web_python_sdk import schemas  # noqa: F401


class CallsAddRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "join_url",
            "external_unique_id",
        }
        
        class properties:
            external_unique_id = schemas.StrSchema
            join_url = schemas.StrSchema
            title = schemas.StrSchema
            created_by = schemas.StrSchema
            date_start = schemas.IntSchema
            desktop_app_join_url = schemas.StrSchema
            external_display_id = schemas.StrSchema
            users = schemas.StrSchema
            __annotations__ = {
                "external_unique_id": external_unique_id,
                "join_url": join_url,
                "title": title,
                "created_by": created_by,
                "date_start": date_start,
                "desktop_app_join_url": desktop_app_join_url,
                "external_display_id": external_display_id,
                "users": users,
            }
    
    join_url: MetaOapg.properties.join_url
    external_unique_id: MetaOapg.properties.external_unique_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["external_unique_id"]) -> MetaOapg.properties.external_unique_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["join_url"]) -> MetaOapg.properties.join_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_by"]) -> MetaOapg.properties.created_by: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_start"]) -> MetaOapg.properties.date_start: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["desktop_app_join_url"]) -> MetaOapg.properties.desktop_app_join_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["external_display_id"]) -> MetaOapg.properties.external_display_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["users"]) -> MetaOapg.properties.users: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["external_unique_id", "join_url", "title", "created_by", "date_start", "desktop_app_join_url", "external_display_id", "users", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["external_unique_id"]) -> MetaOapg.properties.external_unique_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["join_url"]) -> MetaOapg.properties.join_url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_by"]) -> typing.Union[MetaOapg.properties.created_by, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_start"]) -> typing.Union[MetaOapg.properties.date_start, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["desktop_app_join_url"]) -> typing.Union[MetaOapg.properties.desktop_app_join_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["external_display_id"]) -> typing.Union[MetaOapg.properties.external_display_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["users"]) -> typing.Union[MetaOapg.properties.users, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["external_unique_id", "join_url", "title", "created_by", "date_start", "desktop_app_join_url", "external_display_id", "users", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        join_url: typing.Union[MetaOapg.properties.join_url, str, ],
        external_unique_id: typing.Union[MetaOapg.properties.external_unique_id, str, ],
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        created_by: typing.Union[MetaOapg.properties.created_by, str, schemas.Unset] = schemas.unset,
        date_start: typing.Union[MetaOapg.properties.date_start, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        desktop_app_join_url: typing.Union[MetaOapg.properties.desktop_app_join_url, str, schemas.Unset] = schemas.unset,
        external_display_id: typing.Union[MetaOapg.properties.external_display_id, str, schemas.Unset] = schemas.unset,
        users: typing.Union[MetaOapg.properties.users, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CallsAddRequest':
        return super().__new__(
            cls,
            *args,
            join_url=join_url,
            external_unique_id=external_unique_id,
            title=title,
            created_by=created_by,
            date_start=date_start,
            desktop_app_join_url=desktop_app_join_url,
            external_display_id=external_display_id,
            users=users,
            _configuration=_configuration,
            **kwargs,
        )
