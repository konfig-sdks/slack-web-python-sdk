# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Created by: https://api.slack.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slack_web_python_sdk import schemas  # noqa: F401


class ObjsTeam(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "domain",
            "icon",
            "name",
            "email_domain",
            "id",
        }
        
        class properties:
            domain = schemas.StrSchema
            email_domain = schemas.StrSchema
        
            @staticmethod
            def icon() -> typing.Type['ObjsIcon']:
                return ObjsIcon
        
            @staticmethod
            def id() -> typing.Type['DefsWorkspaceId']:
                return DefsWorkspaceId
            name = schemas.StrSchema
            
            
            class description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'description':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            archived = schemas.BoolSchema
            avatar_base_url = schemas.StrSchema
            created = schemas.IntSchema
            date_create = schemas.IntSchema
            deleted = schemas.BoolSchema
            
            
            class discoverable(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            any_of_0 = schemas.AnyTypeSchema
                            any_of_1 = schemas.StrSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def any_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    cls.any_of_0,
                                    cls.any_of_1,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'discoverable':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
        
            @staticmethod
            def enterprise_id() -> typing.Type['DefsEnterpriseId']:
                return DefsEnterpriseId
            enterprise_name = schemas.StrSchema
        
            @staticmethod
            def external_org_migrations() -> typing.Type['ObjsExternalOrgMigrations']:
                return ObjsExternalOrgMigrations
            has_compliance_export = schemas.BoolSchema
            is_assigned = schemas.BoolSchema
            is_enterprise = schemas.IntSchema
            is_over_storage_limit = schemas.BoolSchema
            limit_ts = schemas.IntSchema
            locale = schemas.StrSchema
            messages_count = schemas.IntSchema
            msg_edit_window_mins = schemas.IntSchema
            over_integrations_limit = schemas.BoolSchema
            over_storage_limit = schemas.BoolSchema
            pay_prod_cur = schemas.StrSchema
            
            
            class plan(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "": "EMPTY",
                        "std": "STD",
                        "plus": "PLUS",
                        "compliance": "COMPLIANCE",
                        "enterprise": "ENTERPRISE",
                    }
                
                @schemas.classproperty
                def EMPTY(cls):
                    return cls("")
                
                @schemas.classproperty
                def STD(cls):
                    return cls("std")
                
                @schemas.classproperty
                def PLUS(cls):
                    return cls("plus")
                
                @schemas.classproperty
                def COMPLIANCE(cls):
                    return cls("compliance")
                
                @schemas.classproperty
                def ENTERPRISE(cls):
                    return cls("enterprise")
        
            @staticmethod
            def primary_owner() -> typing.Type['ObjsPrimaryOwner']:
                return ObjsPrimaryOwner
        
            @staticmethod
            def sso_provider() -> typing.Type['ObjsTeamSsoProvider']:
                return ObjsTeamSsoProvider
            __annotations__ = {
                "domain": domain,
                "email_domain": email_domain,
                "icon": icon,
                "id": id,
                "name": name,
                "description": description,
                "archived": archived,
                "avatar_base_url": avatar_base_url,
                "created": created,
                "date_create": date_create,
                "deleted": deleted,
                "discoverable": discoverable,
                "enterprise_id": enterprise_id,
                "enterprise_name": enterprise_name,
                "external_org_migrations": external_org_migrations,
                "has_compliance_export": has_compliance_export,
                "is_assigned": is_assigned,
                "is_enterprise": is_enterprise,
                "is_over_storage_limit": is_over_storage_limit,
                "limit_ts": limit_ts,
                "locale": locale,
                "messages_count": messages_count,
                "msg_edit_window_mins": msg_edit_window_mins,
                "over_integrations_limit": over_integrations_limit,
                "over_storage_limit": over_storage_limit,
                "pay_prod_cur": pay_prod_cur,
                "plan": plan,
                "primary_owner": primary_owner,
                "sso_provider": sso_provider,
            }
    
    domain: MetaOapg.properties.domain
    icon: 'ObjsIcon'
    name: MetaOapg.properties.name
    email_domain: MetaOapg.properties.email_domain
    id: 'DefsWorkspaceId'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domain"]) -> MetaOapg.properties.domain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email_domain"]) -> MetaOapg.properties.email_domain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["icon"]) -> 'ObjsIcon': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'DefsWorkspaceId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["archived"]) -> MetaOapg.properties.archived: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["avatar_base_url"]) -> MetaOapg.properties.avatar_base_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_create"]) -> MetaOapg.properties.date_create: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleted"]) -> MetaOapg.properties.deleted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["discoverable"]) -> MetaOapg.properties.discoverable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enterprise_id"]) -> 'DefsEnterpriseId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enterprise_name"]) -> MetaOapg.properties.enterprise_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["external_org_migrations"]) -> 'ObjsExternalOrgMigrations': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_compliance_export"]) -> MetaOapg.properties.has_compliance_export: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_assigned"]) -> MetaOapg.properties.is_assigned: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_enterprise"]) -> MetaOapg.properties.is_enterprise: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_over_storage_limit"]) -> MetaOapg.properties.is_over_storage_limit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["limit_ts"]) -> MetaOapg.properties.limit_ts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locale"]) -> MetaOapg.properties.locale: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["messages_count"]) -> MetaOapg.properties.messages_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["msg_edit_window_mins"]) -> MetaOapg.properties.msg_edit_window_mins: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["over_integrations_limit"]) -> MetaOapg.properties.over_integrations_limit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["over_storage_limit"]) -> MetaOapg.properties.over_storage_limit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pay_prod_cur"]) -> MetaOapg.properties.pay_prod_cur: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["plan"]) -> MetaOapg.properties.plan: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primary_owner"]) -> 'ObjsPrimaryOwner': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sso_provider"]) -> 'ObjsTeamSsoProvider': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["domain", "email_domain", "icon", "id", "name", "description", "archived", "avatar_base_url", "created", "date_create", "deleted", "discoverable", "enterprise_id", "enterprise_name", "external_org_migrations", "has_compliance_export", "is_assigned", "is_enterprise", "is_over_storage_limit", "limit_ts", "locale", "messages_count", "msg_edit_window_mins", "over_integrations_limit", "over_storage_limit", "pay_prod_cur", "plan", "primary_owner", "sso_provider", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domain"]) -> MetaOapg.properties.domain: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email_domain"]) -> MetaOapg.properties.email_domain: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["icon"]) -> 'ObjsIcon': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> 'DefsWorkspaceId': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["archived"]) -> typing.Union[MetaOapg.properties.archived, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["avatar_base_url"]) -> typing.Union[MetaOapg.properties.avatar_base_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_create"]) -> typing.Union[MetaOapg.properties.date_create, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleted"]) -> typing.Union[MetaOapg.properties.deleted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["discoverable"]) -> typing.Union[MetaOapg.properties.discoverable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enterprise_id"]) -> typing.Union['DefsEnterpriseId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enterprise_name"]) -> typing.Union[MetaOapg.properties.enterprise_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["external_org_migrations"]) -> typing.Union['ObjsExternalOrgMigrations', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_compliance_export"]) -> typing.Union[MetaOapg.properties.has_compliance_export, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_assigned"]) -> typing.Union[MetaOapg.properties.is_assigned, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_enterprise"]) -> typing.Union[MetaOapg.properties.is_enterprise, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_over_storage_limit"]) -> typing.Union[MetaOapg.properties.is_over_storage_limit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["limit_ts"]) -> typing.Union[MetaOapg.properties.limit_ts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locale"]) -> typing.Union[MetaOapg.properties.locale, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["messages_count"]) -> typing.Union[MetaOapg.properties.messages_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["msg_edit_window_mins"]) -> typing.Union[MetaOapg.properties.msg_edit_window_mins, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["over_integrations_limit"]) -> typing.Union[MetaOapg.properties.over_integrations_limit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["over_storage_limit"]) -> typing.Union[MetaOapg.properties.over_storage_limit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pay_prod_cur"]) -> typing.Union[MetaOapg.properties.pay_prod_cur, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["plan"]) -> typing.Union[MetaOapg.properties.plan, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primary_owner"]) -> typing.Union['ObjsPrimaryOwner', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sso_provider"]) -> typing.Union['ObjsTeamSsoProvider', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["domain", "email_domain", "icon", "id", "name", "description", "archived", "avatar_base_url", "created", "date_create", "deleted", "discoverable", "enterprise_id", "enterprise_name", "external_org_migrations", "has_compliance_export", "is_assigned", "is_enterprise", "is_over_storage_limit", "limit_ts", "locale", "messages_count", "msg_edit_window_mins", "over_integrations_limit", "over_storage_limit", "pay_prod_cur", "plan", "primary_owner", "sso_provider", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        domain: typing.Union[MetaOapg.properties.domain, str, ],
        icon: 'ObjsIcon',
        name: typing.Union[MetaOapg.properties.name, str, ],
        email_domain: typing.Union[MetaOapg.properties.email_domain, str, ],
        id: 'DefsWorkspaceId',
        description: typing.Union[MetaOapg.properties.description, None, str, schemas.Unset] = schemas.unset,
        archived: typing.Union[MetaOapg.properties.archived, bool, schemas.Unset] = schemas.unset,
        avatar_base_url: typing.Union[MetaOapg.properties.avatar_base_url, str, schemas.Unset] = schemas.unset,
        created: typing.Union[MetaOapg.properties.created, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        date_create: typing.Union[MetaOapg.properties.date_create, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        deleted: typing.Union[MetaOapg.properties.deleted, bool, schemas.Unset] = schemas.unset,
        discoverable: typing.Union[MetaOapg.properties.discoverable, list, tuple, schemas.Unset] = schemas.unset,
        enterprise_id: typing.Union['DefsEnterpriseId', schemas.Unset] = schemas.unset,
        enterprise_name: typing.Union[MetaOapg.properties.enterprise_name, str, schemas.Unset] = schemas.unset,
        external_org_migrations: typing.Union['ObjsExternalOrgMigrations', schemas.Unset] = schemas.unset,
        has_compliance_export: typing.Union[MetaOapg.properties.has_compliance_export, bool, schemas.Unset] = schemas.unset,
        is_assigned: typing.Union[MetaOapg.properties.is_assigned, bool, schemas.Unset] = schemas.unset,
        is_enterprise: typing.Union[MetaOapg.properties.is_enterprise, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        is_over_storage_limit: typing.Union[MetaOapg.properties.is_over_storage_limit, bool, schemas.Unset] = schemas.unset,
        limit_ts: typing.Union[MetaOapg.properties.limit_ts, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        locale: typing.Union[MetaOapg.properties.locale, str, schemas.Unset] = schemas.unset,
        messages_count: typing.Union[MetaOapg.properties.messages_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        msg_edit_window_mins: typing.Union[MetaOapg.properties.msg_edit_window_mins, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        over_integrations_limit: typing.Union[MetaOapg.properties.over_integrations_limit, bool, schemas.Unset] = schemas.unset,
        over_storage_limit: typing.Union[MetaOapg.properties.over_storage_limit, bool, schemas.Unset] = schemas.unset,
        pay_prod_cur: typing.Union[MetaOapg.properties.pay_prod_cur, str, schemas.Unset] = schemas.unset,
        plan: typing.Union[MetaOapg.properties.plan, str, schemas.Unset] = schemas.unset,
        primary_owner: typing.Union['ObjsPrimaryOwner', schemas.Unset] = schemas.unset,
        sso_provider: typing.Union['ObjsTeamSsoProvider', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ObjsTeam':
        return super().__new__(
            cls,
            *args,
            domain=domain,
            icon=icon,
            name=name,
            email_domain=email_domain,
            id=id,
            description=description,
            archived=archived,
            avatar_base_url=avatar_base_url,
            created=created,
            date_create=date_create,
            deleted=deleted,
            discoverable=discoverable,
            enterprise_id=enterprise_id,
            enterprise_name=enterprise_name,
            external_org_migrations=external_org_migrations,
            has_compliance_export=has_compliance_export,
            is_assigned=is_assigned,
            is_enterprise=is_enterprise,
            is_over_storage_limit=is_over_storage_limit,
            limit_ts=limit_ts,
            locale=locale,
            messages_count=messages_count,
            msg_edit_window_mins=msg_edit_window_mins,
            over_integrations_limit=over_integrations_limit,
            over_storage_limit=over_storage_limit,
            pay_prod_cur=pay_prod_cur,
            plan=plan,
            primary_owner=primary_owner,
            sso_provider=sso_provider,
            _configuration=_configuration,
            **kwargs,
        )

from slack_web_python_sdk.model.defs_enterprise_id import DefsEnterpriseId
from slack_web_python_sdk.model.defs_workspace_id import DefsWorkspaceId
from slack_web_python_sdk.model.objs_external_org_migrations import ObjsExternalOrgMigrations
from slack_web_python_sdk.model.objs_icon import ObjsIcon
from slack_web_python_sdk.model.objs_primary_owner import ObjsPrimaryOwner
from slack_web_python_sdk.model.objs_team_sso_provider import ObjsTeamSsoProvider
