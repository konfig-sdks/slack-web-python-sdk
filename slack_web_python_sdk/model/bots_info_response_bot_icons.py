# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Created by: https://api.slack.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slack_web_python_sdk import schemas  # noqa: F401


class BotsInfoResponseBotIcons(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "image_36",
            "image_48",
            "image_72",
        }
        
        class properties:
            image_36 = schemas.StrSchema
            image_48 = schemas.StrSchema
            image_72 = schemas.StrSchema
            __annotations__ = {
                "image_36": image_36,
                "image_48": image_48,
                "image_72": image_72,
            }
    
    image_36: MetaOapg.properties.image_36
    image_48: MetaOapg.properties.image_48
    image_72: MetaOapg.properties.image_72
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image_36"]) -> MetaOapg.properties.image_36: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image_48"]) -> MetaOapg.properties.image_48: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image_72"]) -> MetaOapg.properties.image_72: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["image_36", "image_48", "image_72", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image_36"]) -> MetaOapg.properties.image_36: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image_48"]) -> MetaOapg.properties.image_48: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image_72"]) -> MetaOapg.properties.image_72: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["image_36", "image_48", "image_72", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        image_36: typing.Union[MetaOapg.properties.image_36, str, ],
        image_48: typing.Union[MetaOapg.properties.image_48, str, ],
        image_72: typing.Union[MetaOapg.properties.image_72, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BotsInfoResponseBotIcons':
        return super().__new__(
            cls,
            *args,
            image_36=image_36,
            image_48=image_48,
            image_72=image_72,
            _configuration=_configuration,
            **kwargs,
        )
