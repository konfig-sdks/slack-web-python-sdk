# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Created by: https://api.slack.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slack_web_python_sdk import schemas  # noqa: F401


class ChatUnfurlRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "channel",
            "ts",
        }
        
        class properties:
            channel = schemas.StrSchema
            ts = schemas.StrSchema
            unfurls = schemas.StrSchema
            user_auth_message = schemas.StrSchema
            user_auth_required = schemas.BoolSchema
            user_auth_url = schemas.StrSchema
            __annotations__ = {
                "channel": channel,
                "ts": ts,
                "unfurls": unfurls,
                "user_auth_message": user_auth_message,
                "user_auth_required": user_auth_required,
                "user_auth_url": user_auth_url,
            }
    
    channel: MetaOapg.properties.channel
    ts: MetaOapg.properties.ts
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channel"]) -> MetaOapg.properties.channel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ts"]) -> MetaOapg.properties.ts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unfurls"]) -> MetaOapg.properties.unfurls: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_auth_message"]) -> MetaOapg.properties.user_auth_message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_auth_required"]) -> MetaOapg.properties.user_auth_required: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_auth_url"]) -> MetaOapg.properties.user_auth_url: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["channel", "ts", "unfurls", "user_auth_message", "user_auth_required", "user_auth_url", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channel"]) -> MetaOapg.properties.channel: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ts"]) -> MetaOapg.properties.ts: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unfurls"]) -> typing.Union[MetaOapg.properties.unfurls, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_auth_message"]) -> typing.Union[MetaOapg.properties.user_auth_message, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_auth_required"]) -> typing.Union[MetaOapg.properties.user_auth_required, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_auth_url"]) -> typing.Union[MetaOapg.properties.user_auth_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["channel", "ts", "unfurls", "user_auth_message", "user_auth_required", "user_auth_url", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        channel: typing.Union[MetaOapg.properties.channel, str, ],
        ts: typing.Union[MetaOapg.properties.ts, str, ],
        unfurls: typing.Union[MetaOapg.properties.unfurls, str, schemas.Unset] = schemas.unset,
        user_auth_message: typing.Union[MetaOapg.properties.user_auth_message, str, schemas.Unset] = schemas.unset,
        user_auth_required: typing.Union[MetaOapg.properties.user_auth_required, bool, schemas.Unset] = schemas.unset,
        user_auth_url: typing.Union[MetaOapg.properties.user_auth_url, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ChatUnfurlRequest':
        return super().__new__(
            cls,
            *args,
            channel=channel,
            ts=ts,
            unfurls=unfurls,
            user_auth_message=user_auth_message,
            user_auth_required=user_auth_required,
            user_auth_url=user_auth_url,
            _configuration=_configuration,
            **kwargs,
        )
