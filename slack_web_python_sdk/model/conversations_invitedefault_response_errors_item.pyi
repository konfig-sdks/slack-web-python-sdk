# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Created by: https://api.slack.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slack_web_python_sdk import schemas  # noqa: F401


class ConversationsInvitedefaultResponseErrorsItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "error",
            "ok",
        }
        
        class properties:
            
            
            class error(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def METHOD_NOT_SUPPORTED_FOR_CHANNEL_TYPE(cls):
                    return cls("method_not_supported_for_channel_type")
                
                @schemas.classproperty
                def MISSING_SCOPE(cls):
                    return cls("missing_scope")
                
                @schemas.classproperty
                def CHANNEL_NOT_FOUND(cls):
                    return cls("channel_not_found")
                
                @schemas.classproperty
                def USER_NOT_FOUND(cls):
                    return cls("user_not_found")
                
                @schemas.classproperty
                def NO_USER(cls):
                    return cls("no_user")
                
                @schemas.classproperty
                def CANT_INVITE_SELF(cls):
                    return cls("cant_invite_self")
                
                @schemas.classproperty
                def NOT_IN_CHANNEL(cls):
                    return cls("not_in_channel")
                
                @schemas.classproperty
                def ALREADY_IN_CHANNEL(cls):
                    return cls("already_in_channel")
                
                @schemas.classproperty
                def IS_ARCHIVED(cls):
                    return cls("is_archived")
                
                @schemas.classproperty
                def CANT_INVITE(cls):
                    return cls("cant_invite")
                
                @schemas.classproperty
                def TOO_MANY_USERS(cls):
                    return cls("too_many_users")
                
                @schemas.classproperty
                def URA_MAX_CHANNELS(cls):
                    return cls("ura_max_channels")
                
                @schemas.classproperty
                def NOT_AUTHED(cls):
                    return cls("not_authed")
                
                @schemas.classproperty
                def INVALID_AUTH(cls):
                    return cls("invalid_auth")
                
                @schemas.classproperty
                def ACCOUNT_INACTIVE(cls):
                    return cls("account_inactive")
                
                @schemas.classproperty
                def USER_IS_BOT(cls):
                    return cls("user_is_bot")
                
                @schemas.classproperty
                def USER_IS_RESTRICTED(cls):
                    return cls("user_is_restricted")
                
                @schemas.classproperty
                def USER_IS_ULTRA_RESTRICTED(cls):
                    return cls("user_is_ultra_restricted")
                
                @schemas.classproperty
                def INVALID_ARG_NAME(cls):
                    return cls("invalid_arg_name")
                
                @schemas.classproperty
                def INVALID_ARRAY_ARG(cls):
                    return cls("invalid_array_arg")
                
                @schemas.classproperty
                def INVALID_CHARSET(cls):
                    return cls("invalid_charset")
                
                @schemas.classproperty
                def INVALID_FORM_DATA(cls):
                    return cls("invalid_form_data")
                
                @schemas.classproperty
                def INVALID_POST_TYPE(cls):
                    return cls("invalid_post_type")
                
                @schemas.classproperty
                def MISSING_POST_TYPE(cls):
                    return cls("missing_post_type")
                
                @schemas.classproperty
                def INVALID_JSON(cls):
                    return cls("invalid_json")
                
                @schemas.classproperty
                def JSON_NOT_OBJECT(cls):
                    return cls("json_not_object")
                
                @schemas.classproperty
                def REQUEST_TIMEOUT(cls):
                    return cls("request_timeout")
                
                @schemas.classproperty
                def UPGRADE_REQUIRED(cls):
                    return cls("upgrade_required")
                
                @schemas.classproperty
                def TEAM_ADDED_TO_ORG(cls):
                    return cls("team_added_to_org")
                
                @schemas.classproperty
                def MISSING_CHARSET(cls):
                    return cls("missing_charset")
                
                @schemas.classproperty
                def SUPERFLUOUS_CHARSET(cls):
                    return cls("superfluous_charset")
        
            @staticmethod
            def ok() -> typing.Type['DefsOkFalse']:
                return DefsOkFalse
        
            @staticmethod
            def user() -> typing.Type['DefsUserId']:
                return DefsUserId
            __annotations__ = {
                "error": error,
                "ok": ok,
                "user": user,
            }
    
    error: MetaOapg.properties.error
    ok: 'DefsOkFalse'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error"]) -> MetaOapg.properties.error: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkFalse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'DefsUserId': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["error", "ok", "user", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error"]) -> MetaOapg.properties.error: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkFalse': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union['DefsUserId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["error", "ok", "user", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        error: typing.Union[MetaOapg.properties.error, str, ],
        ok: 'DefsOkFalse',
        user: typing.Union['DefsUserId', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ConversationsInvitedefaultResponseErrorsItem':
        return super().__new__(
            cls,
            *args,
            error=error,
            ok=ok,
            user=user,
            _configuration=_configuration,
            **kwargs,
        )

from slack_web_python_sdk.model.defs_ok_false import DefsOkFalse
from slack_web_python_sdk.model.defs_user_id import DefsUserId
