# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Created by: https://api.slack.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slack_web_python_sdk import schemas  # noqa: F401


class StarsListResponseItems(
    schemas.ListSchema
):
    """NOTE:
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class items(
            schemas.ListSchema
        ):
        
        
            class MetaOapg:
                
                
                class items(
                    schemas.ComposedSchema,
                ):
                
                
                    class MetaOapg:
                        
                        
                        class any_of_0(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                required = {
                                    "date_create",
                                    "channel",
                                    "message",
                                    "type",
                                }
                                
                                class properties:
                                
                                    @staticmethod
                                    def channel() -> typing.Type['DefsChannel']:
                                        return DefsChannel
                                    date_create = schemas.IntSchema
                                
                                    @staticmethod
                                    def message() -> typing.Type['ObjsMessage']:
                                        return ObjsMessage
                                    
                                    
                                    class type(
                                        schemas.EnumBase,
                                        schemas.StrSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            enum_value_to_name = {
                                                "message": "MESSAGE",
                                            }
                                        
                                        @schemas.classproperty
                                        def MESSAGE(cls):
                                            return cls("message")
                                    __annotations__ = {
                                        "channel": channel,
                                        "date_create": date_create,
                                        "message": message,
                                        "type": type,
                                    }
                            
                            date_create: MetaOapg.properties.date_create
                            channel: 'DefsChannel'
                            message: 'ObjsMessage'
                            type: MetaOapg.properties.type
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["channel"]) -> 'DefsChannel': ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["date_create"]) -> MetaOapg.properties.date_create: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["message"]) -> 'ObjsMessage': ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["channel", "date_create", "message", "type", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["channel"]) -> 'DefsChannel': ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["date_create"]) -> MetaOapg.properties.date_create: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> 'ObjsMessage': ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["channel", "date_create", "message", "type", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                date_create: typing.Union[MetaOapg.properties.date_create, decimal.Decimal, int, ],
                                channel: 'DefsChannel',
                                message: 'ObjsMessage',
                                type: typing.Union[MetaOapg.properties.type, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'any_of_0':
                                return super().__new__(
                                    cls,
                                    *args,
                                    date_create=date_create,
                                    channel=channel,
                                    message=message,
                                    type=type,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class any_of_1(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                required = {
                                    "file",
                                    "date_create",
                                    "type",
                                }
                                
                                class properties:
                                    date_create = schemas.IntSchema
                                
                                    @staticmethod
                                    def file() -> typing.Type['ObjsFile']:
                                        return ObjsFile
                                    
                                    
                                    class type(
                                        schemas.EnumBase,
                                        schemas.StrSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            enum_value_to_name = {
                                                "file": "FILE",
                                            }
                                        
                                        @schemas.classproperty
                                        def FILE(cls):
                                            return cls("file")
                                    __annotations__ = {
                                        "date_create": date_create,
                                        "file": file,
                                        "type": type,
                                    }
                            
                            file: 'ObjsFile'
                            date_create: MetaOapg.properties.date_create
                            type: MetaOapg.properties.type
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["date_create"]) -> MetaOapg.properties.date_create: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["file"]) -> 'ObjsFile': ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["date_create", "file", "type", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["date_create"]) -> MetaOapg.properties.date_create: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["file"]) -> 'ObjsFile': ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["date_create", "file", "type", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                file: 'ObjsFile',
                                date_create: typing.Union[MetaOapg.properties.date_create, decimal.Decimal, int, ],
                                type: typing.Union[MetaOapg.properties.type, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'any_of_1':
                                return super().__new__(
                                    cls,
                                    *args,
                                    file=file,
                                    date_create=date_create,
                                    type=type,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class any_of_2(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                required = {
                                    "file",
                                    "date_create",
                                    "comment",
                                    "type",
                                }
                                
                                class properties:
                                
                                    @staticmethod
                                    def comment() -> typing.Type['ObjsComment']:
                                        return ObjsComment
                                    date_create = schemas.IntSchema
                                
                                    @staticmethod
                                    def file() -> typing.Type['ObjsFile']:
                                        return ObjsFile
                                    
                                    
                                    class type(
                                        schemas.EnumBase,
                                        schemas.StrSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            enum_value_to_name = {
                                                "file_comment": "FILE_COMMENT",
                                            }
                                        
                                        @schemas.classproperty
                                        def FILE_COMMENT(cls):
                                            return cls("file_comment")
                                    __annotations__ = {
                                        "comment": comment,
                                        "date_create": date_create,
                                        "file": file,
                                        "type": type,
                                    }
                            
                            file: 'ObjsFile'
                            date_create: MetaOapg.properties.date_create
                            comment: 'ObjsComment'
                            type: MetaOapg.properties.type
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["comment"]) -> 'ObjsComment': ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["date_create"]) -> MetaOapg.properties.date_create: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["file"]) -> 'ObjsFile': ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["comment", "date_create", "file", "type", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["comment"]) -> 'ObjsComment': ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["date_create"]) -> MetaOapg.properties.date_create: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["file"]) -> 'ObjsFile': ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["comment", "date_create", "file", "type", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                file: 'ObjsFile',
                                date_create: typing.Union[MetaOapg.properties.date_create, decimal.Decimal, int, ],
                                comment: 'ObjsComment',
                                type: typing.Union[MetaOapg.properties.type, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'any_of_2':
                                return super().__new__(
                                    cls,
                                    *args,
                                    file=file,
                                    date_create=date_create,
                                    comment=comment,
                                    type=type,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class any_of_3(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                required = {
                                    "date_create",
                                    "channel",
                                    "type",
                                }
                                
                                class properties:
                                
                                    @staticmethod
                                    def channel() -> typing.Type['DefsChannel']:
                                        return DefsChannel
                                    date_create = schemas.IntSchema
                                    
                                    
                                    class type(
                                        schemas.EnumBase,
                                        schemas.StrSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            enum_value_to_name = {
                                                "channel": "CHANNEL",
                                            }
                                        
                                        @schemas.classproperty
                                        def CHANNEL(cls):
                                            return cls("channel")
                                    __annotations__ = {
                                        "channel": channel,
                                        "date_create": date_create,
                                        "type": type,
                                    }
                            
                            date_create: MetaOapg.properties.date_create
                            channel: 'DefsChannel'
                            type: MetaOapg.properties.type
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["channel"]) -> 'DefsChannel': ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["date_create"]) -> MetaOapg.properties.date_create: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["channel", "date_create", "type", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["channel"]) -> 'DefsChannel': ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["date_create"]) -> MetaOapg.properties.date_create: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["channel", "date_create", "type", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                date_create: typing.Union[MetaOapg.properties.date_create, decimal.Decimal, int, ],
                                channel: 'DefsChannel',
                                type: typing.Union[MetaOapg.properties.type, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'any_of_3':
                                return super().__new__(
                                    cls,
                                    *args,
                                    date_create=date_create,
                                    channel=channel,
                                    type=type,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class any_of_4(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                required = {
                                    "date_create",
                                    "channel",
                                    "type",
                                }
                                
                                class properties:
                                
                                    @staticmethod
                                    def channel() -> typing.Type['DefsDmId']:
                                        return DefsDmId
                                    date_create = schemas.IntSchema
                                    
                                    
                                    class type(
                                        schemas.EnumBase,
                                        schemas.StrSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            enum_value_to_name = {
                                                "im": "IM",
                                            }
                                        
                                        @schemas.classproperty
                                        def IM(cls):
                                            return cls("im")
                                    __annotations__ = {
                                        "channel": channel,
                                        "date_create": date_create,
                                        "type": type,
                                    }
                            
                            date_create: MetaOapg.properties.date_create
                            channel: 'DefsDmId'
                            type: MetaOapg.properties.type
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["channel"]) -> 'DefsDmId': ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["date_create"]) -> MetaOapg.properties.date_create: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["channel", "date_create", "type", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["channel"]) -> 'DefsDmId': ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["date_create"]) -> MetaOapg.properties.date_create: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["channel", "date_create", "type", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                date_create: typing.Union[MetaOapg.properties.date_create, decimal.Decimal, int, ],
                                channel: 'DefsDmId',
                                type: typing.Union[MetaOapg.properties.type, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'any_of_4':
                                return super().__new__(
                                    cls,
                                    *args,
                                    date_create=date_create,
                                    channel=channel,
                                    type=type,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class any_of_5(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                required = {
                                    "date_create",
                                    "channel",
                                    "type",
                                }
                                
                                class properties:
                                
                                    @staticmethod
                                    def channel() -> typing.Type['DefsGroupId']:
                                        return DefsGroupId
                                    date_create = schemas.IntSchema
                                    
                                    
                                    class type(
                                        schemas.EnumBase,
                                        schemas.StrSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            enum_value_to_name = {
                                                "group": "GROUP",
                                            }
                                        
                                        @schemas.classproperty
                                        def GROUP(cls):
                                            return cls("group")
                                    __annotations__ = {
                                        "channel": channel,
                                        "date_create": date_create,
                                        "type": type,
                                    }
                            
                            date_create: MetaOapg.properties.date_create
                            channel: 'DefsGroupId'
                            type: MetaOapg.properties.type
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["channel"]) -> 'DefsGroupId': ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["date_create"]) -> MetaOapg.properties.date_create: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["channel", "date_create", "type", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["channel"]) -> 'DefsGroupId': ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["date_create"]) -> MetaOapg.properties.date_create: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["channel", "date_create", "type", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                date_create: typing.Union[MetaOapg.properties.date_create, decimal.Decimal, int, ],
                                channel: 'DefsGroupId',
                                type: typing.Union[MetaOapg.properties.type, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'any_of_5':
                                return super().__new__(
                                    cls,
                                    *args,
                                    date_create=date_create,
                                    channel=channel,
                                    type=type,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        @classmethod
                        @functools.lru_cache()
                        def any_of(cls):
                            # we need this here to make our import statements work
                            # we must store _composed_schemas in here so the code is only run
                            # when we invoke this method. If we kept this at the class
                            # level we would get an error because the class level
                            # code would be run when this module is imported, and these composed
                            # classes don't exist yet because their module has not finished
                            # loading
                            return [
                                cls.any_of_0,
                                cls.any_of_1,
                                cls.any_of_2,
                                cls.any_of_3,
                                cls.any_of_4,
                                cls.any_of_5,
                            ]
                
                
                    def __new__(
                        cls,
                        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                        _configuration: typing.Optional[schemas.Configuration] = None,
                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                    ) -> 'items':
                        return super().__new__(
                            cls,
                            *args,
                            _configuration=_configuration,
                            **kwargs,
                        )
        
            def __new__(
                cls,
                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                _configuration: typing.Optional[schemas.Configuration] = None,
            ) -> 'items':
                return super().__new__(
                    cls,
                    arg,
                    _configuration=_configuration,
                )
        
            def __getitem__(self, i: int) -> MetaOapg.items:
                return super().__getitem__(i)

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, list, tuple, ]], typing.List[typing.Union[MetaOapg.items, list, tuple, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'StarsListResponseItems':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)

from slack_web_python_sdk.model.defs_channel import DefsChannel
from slack_web_python_sdk.model.defs_dm_id import DefsDmId
from slack_web_python_sdk.model.defs_group_id import DefsGroupId
from slack_web_python_sdk.model.objs_comment import ObjsComment
from slack_web_python_sdk.model.objs_file import ObjsFile
from slack_web_python_sdk.model.objs_message import ObjsMessage
