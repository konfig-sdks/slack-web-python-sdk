# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Created by: https://api.slack.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slack_web_python_sdk import schemas  # noqa: F401


class MigrationExchangeResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Schema for successful response from migration.exchange method
    """


    class MetaOapg:
        required = {
            "team_id",
            "enterprise_id",
            "ok",
        }
        
        class properties:
            enterprise_id = schemas.StrSchema
        
            @staticmethod
            def ok() -> typing.Type['DefsOkTrue']:
                return DefsOkTrue
        
            @staticmethod
            def team_id() -> typing.Type['DefsTeam']:
                return DefsTeam
        
            @staticmethod
            def invalid_user_ids() -> typing.Type['MigrationExchangeResponseInvalidUserIds']:
                return MigrationExchangeResponseInvalidUserIds
        
            @staticmethod
            def user_id_map() -> typing.Type['MigrationExchangeResponseUserIdMap']:
                return MigrationExchangeResponseUserIdMap
            __annotations__ = {
                "enterprise_id": enterprise_id,
                "ok": ok,
                "team_id": team_id,
                "invalid_user_ids": invalid_user_ids,
                "user_id_map": user_id_map,
            }
        additional_properties = schemas.AnyTypeSchema
    
    team_id: 'DefsTeam'
    enterprise_id: MetaOapg.properties.enterprise_id
    ok: 'DefsOkTrue'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team_id"]) -> 'DefsTeam': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enterprise_id"]) -> MetaOapg.properties.enterprise_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkTrue': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invalid_user_ids"]) -> 'MigrationExchangeResponseInvalidUserIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_id_map"]) -> 'MigrationExchangeResponseUserIdMap': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["team_id"], typing_extensions.Literal["enterprise_id"], typing_extensions.Literal["ok"], typing_extensions.Literal["invalid_user_ids"], typing_extensions.Literal["user_id_map"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team_id"]) -> 'DefsTeam': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enterprise_id"]) -> MetaOapg.properties.enterprise_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkTrue': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invalid_user_ids"]) -> typing.Union['MigrationExchangeResponseInvalidUserIds', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_id_map"]) -> typing.Union['MigrationExchangeResponseUserIdMap', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["team_id"], typing_extensions.Literal["enterprise_id"], typing_extensions.Literal["ok"], typing_extensions.Literal["invalid_user_ids"], typing_extensions.Literal["user_id_map"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        team_id: 'DefsTeam',
        enterprise_id: typing.Union[MetaOapg.properties.enterprise_id, str, ],
        ok: 'DefsOkTrue',
        invalid_user_ids: typing.Union['MigrationExchangeResponseInvalidUserIds', schemas.Unset] = schemas.unset,
        user_id_map: typing.Union['MigrationExchangeResponseUserIdMap', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'MigrationExchangeResponse':
        return super().__new__(
            cls,
            *args,
            team_id=team_id,
            enterprise_id=enterprise_id,
            ok=ok,
            invalid_user_ids=invalid_user_ids,
            user_id_map=user_id_map,
            _configuration=_configuration,
            **kwargs,
        )

from slack_web_python_sdk.model.defs_ok_true import DefsOkTrue
from slack_web_python_sdk.model.defs_team import DefsTeam
from slack_web_python_sdk.model.migration_exchange_response_invalid_user_ids import MigrationExchangeResponseInvalidUserIds
from slack_web_python_sdk.model.migration_exchange_response_user_id_map import MigrationExchangeResponseUserIdMap
