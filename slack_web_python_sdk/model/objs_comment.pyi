# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Created by: https://api.slack.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slack_web_python_sdk import schemas  # noqa: F401


class ObjsComment(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "created",
            "is_intro",
            "comment",
            "id",
            "user",
            "timestamp",
        }
        
        class properties:
            comment = schemas.StrSchema
            created = schemas.IntSchema
        
            @staticmethod
            def id() -> typing.Type['DefsCommentId']:
                return DefsCommentId
            is_intro = schemas.BoolSchema
            timestamp = schemas.IntSchema
        
            @staticmethod
            def user() -> typing.Type['DefsUserId']:
                return DefsUserId
            is_starred = schemas.BoolSchema
            num_stars = schemas.IntSchema
            pinned_info = schemas.DictSchema
            
            
            class pinned_to(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DefsChannel']:
                        return DefsChannel
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['DefsChannel'], typing.List['DefsChannel']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'pinned_to':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DefsChannel':
                    return super().__getitem__(i)
            
            
            class reactions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ObjsReaction']:
                        return ObjsReaction
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ObjsReaction'], typing.List['ObjsReaction']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'reactions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ObjsReaction':
                    return super().__getitem__(i)
            __annotations__ = {
                "comment": comment,
                "created": created,
                "id": id,
                "is_intro": is_intro,
                "timestamp": timestamp,
                "user": user,
                "is_starred": is_starred,
                "num_stars": num_stars,
                "pinned_info": pinned_info,
                "pinned_to": pinned_to,
                "reactions": reactions,
            }
    
    created: MetaOapg.properties.created
    is_intro: MetaOapg.properties.is_intro
    comment: MetaOapg.properties.comment
    id: 'DefsCommentId'
    user: 'DefsUserId'
    timestamp: MetaOapg.properties.timestamp
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comment"]) -> MetaOapg.properties.comment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'DefsCommentId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_intro"]) -> MetaOapg.properties.is_intro: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'DefsUserId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_starred"]) -> MetaOapg.properties.is_starred: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["num_stars"]) -> MetaOapg.properties.num_stars: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pinned_info"]) -> MetaOapg.properties.pinned_info: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pinned_to"]) -> MetaOapg.properties.pinned_to: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reactions"]) -> MetaOapg.properties.reactions: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["comment", "created", "id", "is_intro", "timestamp", "user", "is_starred", "num_stars", "pinned_info", "pinned_to", "reactions", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comment"]) -> MetaOapg.properties.comment: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> 'DefsCommentId': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_intro"]) -> MetaOapg.properties.is_intro: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> 'DefsUserId': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_starred"]) -> typing.Union[MetaOapg.properties.is_starred, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["num_stars"]) -> typing.Union[MetaOapg.properties.num_stars, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pinned_info"]) -> typing.Union[MetaOapg.properties.pinned_info, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pinned_to"]) -> typing.Union[MetaOapg.properties.pinned_to, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reactions"]) -> typing.Union[MetaOapg.properties.reactions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["comment", "created", "id", "is_intro", "timestamp", "user", "is_starred", "num_stars", "pinned_info", "pinned_to", "reactions", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        created: typing.Union[MetaOapg.properties.created, decimal.Decimal, int, ],
        is_intro: typing.Union[MetaOapg.properties.is_intro, bool, ],
        comment: typing.Union[MetaOapg.properties.comment, str, ],
        id: 'DefsCommentId',
        user: 'DefsUserId',
        timestamp: typing.Union[MetaOapg.properties.timestamp, decimal.Decimal, int, ],
        is_starred: typing.Union[MetaOapg.properties.is_starred, bool, schemas.Unset] = schemas.unset,
        num_stars: typing.Union[MetaOapg.properties.num_stars, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        pinned_info: typing.Union[MetaOapg.properties.pinned_info, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        pinned_to: typing.Union[MetaOapg.properties.pinned_to, list, tuple, schemas.Unset] = schemas.unset,
        reactions: typing.Union[MetaOapg.properties.reactions, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ObjsComment':
        return super().__new__(
            cls,
            *args,
            created=created,
            is_intro=is_intro,
            comment=comment,
            id=id,
            user=user,
            timestamp=timestamp,
            is_starred=is_starred,
            num_stars=num_stars,
            pinned_info=pinned_info,
            pinned_to=pinned_to,
            reactions=reactions,
            _configuration=_configuration,
            **kwargs,
        )

from slack_web_python_sdk.model.defs_channel import DefsChannel
from slack_web_python_sdk.model.defs_comment_id import DefsCommentId
from slack_web_python_sdk.model.defs_user_id import DefsUserId
from slack_web_python_sdk.model.objs_reaction import ObjsReaction
