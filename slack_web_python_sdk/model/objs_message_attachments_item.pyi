# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Created by: https://api.slack.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slack_web_python_sdk import schemas  # noqa: F401


class ObjsMessageAttachmentsItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "id",
        }
        
        class properties:
            id = schemas.IntSchema
            fallback = schemas.StrSchema
            image_bytes = schemas.IntSchema
            image_height = schemas.IntSchema
            image_url = schemas.StrSchema
            image_width = schemas.IntSchema
            __annotations__ = {
                "id": id,
                "fallback": fallback,
                "image_bytes": image_bytes,
                "image_height": image_height,
                "image_url": image_url,
                "image_width": image_width,
            }
    
    id: MetaOapg.properties.id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fallback"]) -> MetaOapg.properties.fallback: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image_bytes"]) -> MetaOapg.properties.image_bytes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image_height"]) -> MetaOapg.properties.image_height: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image_url"]) -> MetaOapg.properties.image_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image_width"]) -> MetaOapg.properties.image_width: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "fallback", "image_bytes", "image_height", "image_url", "image_width", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fallback"]) -> typing.Union[MetaOapg.properties.fallback, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image_bytes"]) -> typing.Union[MetaOapg.properties.image_bytes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image_height"]) -> typing.Union[MetaOapg.properties.image_height, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image_url"]) -> typing.Union[MetaOapg.properties.image_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image_width"]) -> typing.Union[MetaOapg.properties.image_width, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "fallback", "image_bytes", "image_height", "image_url", "image_width", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        fallback: typing.Union[MetaOapg.properties.fallback, str, schemas.Unset] = schemas.unset,
        image_bytes: typing.Union[MetaOapg.properties.image_bytes, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        image_height: typing.Union[MetaOapg.properties.image_height, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        image_url: typing.Union[MetaOapg.properties.image_url, str, schemas.Unset] = schemas.unset,
        image_width: typing.Union[MetaOapg.properties.image_width, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ObjsMessageAttachmentsItem':
        return super().__new__(
            cls,
            *args,
            id=id,
            fallback=fallback,
            image_bytes=image_bytes,
            image_height=image_height,
            image_url=image_url,
            image_width=image_width,
            _configuration=_configuration,
            **kwargs,
        )
