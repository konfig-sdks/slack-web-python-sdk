# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Created by: https://api.slack.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slack_web_python_sdk import schemas  # noqa: F401


class ChatScheduleMessageResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Schema for successful response of chat.scheduleMessage method
    """


    class MetaOapg:
        required = {
            "scheduled_message_id",
            "channel",
            "message",
            "ok",
            "post_at",
        }
        
        class properties:
        
            @staticmethod
            def channel() -> typing.Type['DefsChannel']:
                return DefsChannel
        
            @staticmethod
            def message() -> typing.Type['ChatScheduleMessageResponseMessage']:
                return ChatScheduleMessageResponseMessage
        
            @staticmethod
            def ok() -> typing.Type['DefsOkTrue']:
                return DefsOkTrue
            
            
            class post_at(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
            
            
            class scheduled_message_id(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^[Q][A-Z0-9]{8,}$',
                    }]
            __annotations__ = {
                "channel": channel,
                "message": message,
                "ok": ok,
                "post_at": post_at,
                "scheduled_message_id": scheduled_message_id,
            }
    
    scheduled_message_id: MetaOapg.properties.scheduled_message_id
    channel: 'DefsChannel'
    message: 'ChatScheduleMessageResponseMessage'
    ok: 'DefsOkTrue'
    post_at: MetaOapg.properties.post_at
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channel"]) -> 'DefsChannel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message"]) -> 'ChatScheduleMessageResponseMessage': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkTrue': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["post_at"]) -> MetaOapg.properties.post_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scheduled_message_id"]) -> MetaOapg.properties.scheduled_message_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["channel", "message", "ok", "post_at", "scheduled_message_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channel"]) -> 'DefsChannel': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> 'ChatScheduleMessageResponseMessage': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkTrue': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["post_at"]) -> MetaOapg.properties.post_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scheduled_message_id"]) -> MetaOapg.properties.scheduled_message_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["channel", "message", "ok", "post_at", "scheduled_message_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        scheduled_message_id: typing.Union[MetaOapg.properties.scheduled_message_id, str, ],
        channel: 'DefsChannel',
        message: 'ChatScheduleMessageResponseMessage',
        ok: 'DefsOkTrue',
        post_at: typing.Union[MetaOapg.properties.post_at, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ChatScheduleMessageResponse':
        return super().__new__(
            cls,
            *args,
            scheduled_message_id=scheduled_message_id,
            channel=channel,
            message=message,
            ok=ok,
            post_at=post_at,
            _configuration=_configuration,
            **kwargs,
        )

from slack_web_python_sdk.model.chat_schedule_message_response_message import ChatScheduleMessageResponseMessage
from slack_web_python_sdk.model.defs_channel import DefsChannel
from slack_web_python_sdk.model.defs_ok_true import DefsOkTrue
