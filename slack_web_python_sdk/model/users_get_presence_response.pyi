# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Created by: https://api.slack.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slack_web_python_sdk import schemas  # noqa: F401


class UsersGetPresenceResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Generated from users.getPresence with shasum e7251aec575d8863f9e0eb38663ae9dc26655f65
    """


    class MetaOapg:
        required = {
            "ok",
            "presence",
        }
        
        class properties:
        
            @staticmethod
            def ok() -> typing.Type['DefsOkTrue']:
                return DefsOkTrue
            presence = schemas.StrSchema
            auto_away = schemas.BoolSchema
            connection_count = schemas.IntSchema
            last_activity = schemas.IntSchema
            manual_away = schemas.BoolSchema
            online = schemas.BoolSchema
            __annotations__ = {
                "ok": ok,
                "presence": presence,
                "auto_away": auto_away,
                "connection_count": connection_count,
                "last_activity": last_activity,
                "manual_away": manual_away,
                "online": online,
            }
        additional_properties = schemas.AnyTypeSchema
    
    ok: 'DefsOkTrue'
    presence: MetaOapg.properties.presence
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkTrue': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presence"]) -> MetaOapg.properties.presence: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auto_away"]) -> MetaOapg.properties.auto_away: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connection_count"]) -> MetaOapg.properties.connection_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_activity"]) -> MetaOapg.properties.last_activity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["manual_away"]) -> MetaOapg.properties.manual_away: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["online"]) -> MetaOapg.properties.online: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ok"], typing_extensions.Literal["presence"], typing_extensions.Literal["auto_away"], typing_extensions.Literal["connection_count"], typing_extensions.Literal["last_activity"], typing_extensions.Literal["manual_away"], typing_extensions.Literal["online"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkTrue': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presence"]) -> MetaOapg.properties.presence: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auto_away"]) -> typing.Union[MetaOapg.properties.auto_away, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connection_count"]) -> typing.Union[MetaOapg.properties.connection_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_activity"]) -> typing.Union[MetaOapg.properties.last_activity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["manual_away"]) -> typing.Union[MetaOapg.properties.manual_away, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["online"]) -> typing.Union[MetaOapg.properties.online, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ok"], typing_extensions.Literal["presence"], typing_extensions.Literal["auto_away"], typing_extensions.Literal["connection_count"], typing_extensions.Literal["last_activity"], typing_extensions.Literal["manual_away"], typing_extensions.Literal["online"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        ok: 'DefsOkTrue',
        presence: typing.Union[MetaOapg.properties.presence, str, ],
        auto_away: typing.Union[MetaOapg.properties.auto_away, bool, schemas.Unset] = schemas.unset,
        connection_count: typing.Union[MetaOapg.properties.connection_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        last_activity: typing.Union[MetaOapg.properties.last_activity, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        manual_away: typing.Union[MetaOapg.properties.manual_away, bool, schemas.Unset] = schemas.unset,
        online: typing.Union[MetaOapg.properties.online, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'UsersGetPresenceResponse':
        return super().__new__(
            cls,
            *args,
            ok=ok,
            presence=presence,
            auto_away=auto_away,
            connection_count=connection_count,
            last_activity=last_activity,
            manual_away=manual_away,
            online=online,
            _configuration=_configuration,
            **kwargs,
        )

from slack_web_python_sdk.model.defs_ok_true import DefsOkTrue
