# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Created by: https://api.slack.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slack_web_python_sdk import schemas  # noqa: F401


class ObjsMessage(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "text",
            "type",
            "ts",
        }
        
        class properties:
            text = schemas.StrSchema
        
            @staticmethod
            def ts() -> typing.Type['DefsTs']:
                return DefsTs
            type = schemas.StrSchema
        
            @staticmethod
            def attachments() -> typing.Type['ObjsMessageAttachments']:
                return ObjsMessageAttachments
        
            @staticmethod
            def blocks() -> typing.Type['Blocks']:
                return Blocks
            
            
            class bot_id(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            any_of_1 = schemas.AnyTypeSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def any_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    DefsBotId,
                                    cls.any_of_1,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'bot_id':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
        
            @staticmethod
            def bot_profile() -> typing.Type['ObjsBotProfile']:
                return ObjsBotProfile
            client_msg_id = schemas.StrSchema
        
            @staticmethod
            def comment() -> typing.Type['ObjsComment']:
                return ObjsComment
            display_as_bot = schemas.BoolSchema
        
            @staticmethod
            def file() -> typing.Type['ObjsFile']:
                return ObjsFile
            
            
            class files(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ObjsFile']:
                        return ObjsFile
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ObjsFile'], typing.List['ObjsFile']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'files':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ObjsFile':
                    return super().__getitem__(i)
        
            @staticmethod
            def icons() -> typing.Type['ObjsMessageIcons']:
                return ObjsMessageIcons
        
            @staticmethod
            def inviter() -> typing.Type['DefsUserId']:
                return DefsUserId
            is_delayed_message = schemas.BoolSchema
            is_intro = schemas.BoolSchema
            is_starred = schemas.BoolSchema
        
            @staticmethod
            def last_read() -> typing.Type['DefsTs']:
                return DefsTs
        
            @staticmethod
            def latest_reply() -> typing.Type['DefsTs']:
                return DefsTs
            name = schemas.StrSchema
            old_name = schemas.StrSchema
        
            @staticmethod
            def parent_user_id() -> typing.Type['DefsUserId']:
                return DefsUserId
            permalink = schemas.StrSchema
            
            
            class pinned_to(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DefsChannel']:
                        return DefsChannel
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['DefsChannel'], typing.List['DefsChannel']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'pinned_to':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DefsChannel':
                    return super().__getitem__(i)
            purpose = schemas.StrSchema
            
            
            class reactions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ObjsReaction']:
                        return ObjsReaction
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ObjsReaction'], typing.List['ObjsReaction']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'reactions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ObjsReaction':
                    return super().__getitem__(i)
            reply_count = schemas.IntSchema
            
            
            class reply_users(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DefsUserId']:
                        return DefsUserId
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['DefsUserId'], typing.List['DefsUserId']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'reply_users':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DefsUserId':
                    return super().__getitem__(i)
            reply_users_count = schemas.IntSchema
        
            @staticmethod
            def source_team() -> typing.Type['DefsWorkspaceId']:
                return DefsWorkspaceId
            subscribed = schemas.BoolSchema
            subtype = schemas.StrSchema
        
            @staticmethod
            def team() -> typing.Type['DefsWorkspaceId']:
                return DefsWorkspaceId
        
            @staticmethod
            def thread_ts() -> typing.Type['DefsTs']:
                return DefsTs
            topic = schemas.StrSchema
            unread_count = schemas.IntSchema
            upload = schemas.BoolSchema
        
            @staticmethod
            def user() -> typing.Type['DefsUserId']:
                return DefsUserId
        
            @staticmethod
            def user_profile() -> typing.Type['ObjsUserProfileShort']:
                return ObjsUserProfileShort
        
            @staticmethod
            def user_team() -> typing.Type['DefsWorkspaceId']:
                return DefsWorkspaceId
            username = schemas.StrSchema
            __annotations__ = {
                "text": text,
                "ts": ts,
                "type": type,
                "attachments": attachments,
                "blocks": blocks,
                "bot_id": bot_id,
                "bot_profile": bot_profile,
                "client_msg_id": client_msg_id,
                "comment": comment,
                "display_as_bot": display_as_bot,
                "file": file,
                "files": files,
                "icons": icons,
                "inviter": inviter,
                "is_delayed_message": is_delayed_message,
                "is_intro": is_intro,
                "is_starred": is_starred,
                "last_read": last_read,
                "latest_reply": latest_reply,
                "name": name,
                "old_name": old_name,
                "parent_user_id": parent_user_id,
                "permalink": permalink,
                "pinned_to": pinned_to,
                "purpose": purpose,
                "reactions": reactions,
                "reply_count": reply_count,
                "reply_users": reply_users,
                "reply_users_count": reply_users_count,
                "source_team": source_team,
                "subscribed": subscribed,
                "subtype": subtype,
                "team": team,
                "thread_ts": thread_ts,
                "topic": topic,
                "unread_count": unread_count,
                "upload": upload,
                "user": user,
                "user_profile": user_profile,
                "user_team": user_team,
                "username": username,
            }
    
    text: MetaOapg.properties.text
    type: MetaOapg.properties.type
    ts: 'DefsTs'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ts"]) -> 'DefsTs': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attachments"]) -> 'ObjsMessageAttachments': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blocks"]) -> 'Blocks': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bot_id"]) -> MetaOapg.properties.bot_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bot_profile"]) -> 'ObjsBotProfile': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_msg_id"]) -> MetaOapg.properties.client_msg_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comment"]) -> 'ObjsComment': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["display_as_bot"]) -> MetaOapg.properties.display_as_bot: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["file"]) -> 'ObjsFile': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["files"]) -> MetaOapg.properties.files: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["icons"]) -> 'ObjsMessageIcons': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inviter"]) -> 'DefsUserId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_delayed_message"]) -> MetaOapg.properties.is_delayed_message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_intro"]) -> MetaOapg.properties.is_intro: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_starred"]) -> MetaOapg.properties.is_starred: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_read"]) -> 'DefsTs': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["latest_reply"]) -> 'DefsTs': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["old_name"]) -> MetaOapg.properties.old_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parent_user_id"]) -> 'DefsUserId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permalink"]) -> MetaOapg.properties.permalink: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pinned_to"]) -> MetaOapg.properties.pinned_to: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purpose"]) -> MetaOapg.properties.purpose: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reactions"]) -> MetaOapg.properties.reactions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reply_count"]) -> MetaOapg.properties.reply_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reply_users"]) -> MetaOapg.properties.reply_users: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reply_users_count"]) -> MetaOapg.properties.reply_users_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source_team"]) -> 'DefsWorkspaceId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subscribed"]) -> MetaOapg.properties.subscribed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subtype"]) -> MetaOapg.properties.subtype: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team"]) -> 'DefsWorkspaceId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thread_ts"]) -> 'DefsTs': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["topic"]) -> MetaOapg.properties.topic: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unread_count"]) -> MetaOapg.properties.unread_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["upload"]) -> MetaOapg.properties.upload: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'DefsUserId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_profile"]) -> 'ObjsUserProfileShort': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_team"]) -> 'DefsWorkspaceId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["text", "ts", "type", "attachments", "blocks", "bot_id", "bot_profile", "client_msg_id", "comment", "display_as_bot", "file", "files", "icons", "inviter", "is_delayed_message", "is_intro", "is_starred", "last_read", "latest_reply", "name", "old_name", "parent_user_id", "permalink", "pinned_to", "purpose", "reactions", "reply_count", "reply_users", "reply_users_count", "source_team", "subscribed", "subtype", "team", "thread_ts", "topic", "unread_count", "upload", "user", "user_profile", "user_team", "username", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ts"]) -> 'DefsTs': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attachments"]) -> typing.Union['ObjsMessageAttachments', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blocks"]) -> typing.Union['Blocks', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bot_id"]) -> typing.Union[MetaOapg.properties.bot_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bot_profile"]) -> typing.Union['ObjsBotProfile', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_msg_id"]) -> typing.Union[MetaOapg.properties.client_msg_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comment"]) -> typing.Union['ObjsComment', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["display_as_bot"]) -> typing.Union[MetaOapg.properties.display_as_bot, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["file"]) -> typing.Union['ObjsFile', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["files"]) -> typing.Union[MetaOapg.properties.files, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["icons"]) -> typing.Union['ObjsMessageIcons', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inviter"]) -> typing.Union['DefsUserId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_delayed_message"]) -> typing.Union[MetaOapg.properties.is_delayed_message, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_intro"]) -> typing.Union[MetaOapg.properties.is_intro, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_starred"]) -> typing.Union[MetaOapg.properties.is_starred, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_read"]) -> typing.Union['DefsTs', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["latest_reply"]) -> typing.Union['DefsTs', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["old_name"]) -> typing.Union[MetaOapg.properties.old_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parent_user_id"]) -> typing.Union['DefsUserId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permalink"]) -> typing.Union[MetaOapg.properties.permalink, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pinned_to"]) -> typing.Union[MetaOapg.properties.pinned_to, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purpose"]) -> typing.Union[MetaOapg.properties.purpose, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reactions"]) -> typing.Union[MetaOapg.properties.reactions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reply_count"]) -> typing.Union[MetaOapg.properties.reply_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reply_users"]) -> typing.Union[MetaOapg.properties.reply_users, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reply_users_count"]) -> typing.Union[MetaOapg.properties.reply_users_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source_team"]) -> typing.Union['DefsWorkspaceId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subscribed"]) -> typing.Union[MetaOapg.properties.subscribed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subtype"]) -> typing.Union[MetaOapg.properties.subtype, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team"]) -> typing.Union['DefsWorkspaceId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thread_ts"]) -> typing.Union['DefsTs', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["topic"]) -> typing.Union[MetaOapg.properties.topic, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unread_count"]) -> typing.Union[MetaOapg.properties.unread_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["upload"]) -> typing.Union[MetaOapg.properties.upload, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union['DefsUserId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_profile"]) -> typing.Union['ObjsUserProfileShort', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_team"]) -> typing.Union['DefsWorkspaceId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> typing.Union[MetaOapg.properties.username, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["text", "ts", "type", "attachments", "blocks", "bot_id", "bot_profile", "client_msg_id", "comment", "display_as_bot", "file", "files", "icons", "inviter", "is_delayed_message", "is_intro", "is_starred", "last_read", "latest_reply", "name", "old_name", "parent_user_id", "permalink", "pinned_to", "purpose", "reactions", "reply_count", "reply_users", "reply_users_count", "source_team", "subscribed", "subtype", "team", "thread_ts", "topic", "unread_count", "upload", "user", "user_profile", "user_team", "username", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        text: typing.Union[MetaOapg.properties.text, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        ts: 'DefsTs',
        attachments: typing.Union['ObjsMessageAttachments', schemas.Unset] = schemas.unset,
        blocks: typing.Union['Blocks', schemas.Unset] = schemas.unset,
        bot_id: typing.Union[MetaOapg.properties.bot_id, list, tuple, schemas.Unset] = schemas.unset,
        bot_profile: typing.Union['ObjsBotProfile', schemas.Unset] = schemas.unset,
        client_msg_id: typing.Union[MetaOapg.properties.client_msg_id, str, schemas.Unset] = schemas.unset,
        comment: typing.Union['ObjsComment', schemas.Unset] = schemas.unset,
        display_as_bot: typing.Union[MetaOapg.properties.display_as_bot, bool, schemas.Unset] = schemas.unset,
        file: typing.Union['ObjsFile', schemas.Unset] = schemas.unset,
        files: typing.Union[MetaOapg.properties.files, list, tuple, schemas.Unset] = schemas.unset,
        icons: typing.Union['ObjsMessageIcons', schemas.Unset] = schemas.unset,
        inviter: typing.Union['DefsUserId', schemas.Unset] = schemas.unset,
        is_delayed_message: typing.Union[MetaOapg.properties.is_delayed_message, bool, schemas.Unset] = schemas.unset,
        is_intro: typing.Union[MetaOapg.properties.is_intro, bool, schemas.Unset] = schemas.unset,
        is_starred: typing.Union[MetaOapg.properties.is_starred, bool, schemas.Unset] = schemas.unset,
        last_read: typing.Union['DefsTs', schemas.Unset] = schemas.unset,
        latest_reply: typing.Union['DefsTs', schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        old_name: typing.Union[MetaOapg.properties.old_name, str, schemas.Unset] = schemas.unset,
        parent_user_id: typing.Union['DefsUserId', schemas.Unset] = schemas.unset,
        permalink: typing.Union[MetaOapg.properties.permalink, str, schemas.Unset] = schemas.unset,
        pinned_to: typing.Union[MetaOapg.properties.pinned_to, list, tuple, schemas.Unset] = schemas.unset,
        purpose: typing.Union[MetaOapg.properties.purpose, str, schemas.Unset] = schemas.unset,
        reactions: typing.Union[MetaOapg.properties.reactions, list, tuple, schemas.Unset] = schemas.unset,
        reply_count: typing.Union[MetaOapg.properties.reply_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        reply_users: typing.Union[MetaOapg.properties.reply_users, list, tuple, schemas.Unset] = schemas.unset,
        reply_users_count: typing.Union[MetaOapg.properties.reply_users_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        source_team: typing.Union['DefsWorkspaceId', schemas.Unset] = schemas.unset,
        subscribed: typing.Union[MetaOapg.properties.subscribed, bool, schemas.Unset] = schemas.unset,
        subtype: typing.Union[MetaOapg.properties.subtype, str, schemas.Unset] = schemas.unset,
        team: typing.Union['DefsWorkspaceId', schemas.Unset] = schemas.unset,
        thread_ts: typing.Union['DefsTs', schemas.Unset] = schemas.unset,
        topic: typing.Union[MetaOapg.properties.topic, str, schemas.Unset] = schemas.unset,
        unread_count: typing.Union[MetaOapg.properties.unread_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        upload: typing.Union[MetaOapg.properties.upload, bool, schemas.Unset] = schemas.unset,
        user: typing.Union['DefsUserId', schemas.Unset] = schemas.unset,
        user_profile: typing.Union['ObjsUserProfileShort', schemas.Unset] = schemas.unset,
        user_team: typing.Union['DefsWorkspaceId', schemas.Unset] = schemas.unset,
        username: typing.Union[MetaOapg.properties.username, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ObjsMessage':
        return super().__new__(
            cls,
            *args,
            text=text,
            type=type,
            ts=ts,
            attachments=attachments,
            blocks=blocks,
            bot_id=bot_id,
            bot_profile=bot_profile,
            client_msg_id=client_msg_id,
            comment=comment,
            display_as_bot=display_as_bot,
            file=file,
            files=files,
            icons=icons,
            inviter=inviter,
            is_delayed_message=is_delayed_message,
            is_intro=is_intro,
            is_starred=is_starred,
            last_read=last_read,
            latest_reply=latest_reply,
            name=name,
            old_name=old_name,
            parent_user_id=parent_user_id,
            permalink=permalink,
            pinned_to=pinned_to,
            purpose=purpose,
            reactions=reactions,
            reply_count=reply_count,
            reply_users=reply_users,
            reply_users_count=reply_users_count,
            source_team=source_team,
            subscribed=subscribed,
            subtype=subtype,
            team=team,
            thread_ts=thread_ts,
            topic=topic,
            unread_count=unread_count,
            upload=upload,
            user=user,
            user_profile=user_profile,
            user_team=user_team,
            username=username,
            _configuration=_configuration,
            **kwargs,
        )

from slack_web_python_sdk.model.blocks import Blocks
from slack_web_python_sdk.model.defs_bot_id import DefsBotId
from slack_web_python_sdk.model.defs_channel import DefsChannel
from slack_web_python_sdk.model.defs_ts import DefsTs
from slack_web_python_sdk.model.defs_user_id import DefsUserId
from slack_web_python_sdk.model.defs_workspace_id import DefsWorkspaceId
from slack_web_python_sdk.model.objs_bot_profile import ObjsBotProfile
from slack_web_python_sdk.model.objs_comment import ObjsComment
from slack_web_python_sdk.model.objs_file import ObjsFile
from slack_web_python_sdk.model.objs_message_attachments import ObjsMessageAttachments
from slack_web_python_sdk.model.objs_message_icons import ObjsMessageIcons
from slack_web_python_sdk.model.objs_reaction import ObjsReaction
from slack_web_python_sdk.model.objs_user_profile_short import ObjsUserProfileShort
