# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Created by: https://api.slack.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slack_web_python_sdk import schemas  # noqa: F401


class TeamIntegrationLogsResponseLogsItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "date",
            "app_type",
            "user_id",
            "user_name",
            "scope",
            "change_type",
            "app_id",
        }
        
        class properties:
        
            @staticmethod
            def app_id() -> typing.Type['DefsAppId']:
                return DefsAppId
            app_type = schemas.StrSchema
            change_type = schemas.StrSchema
            date = schemas.StrSchema
            scope = schemas.StrSchema
        
            @staticmethod
            def user_id() -> typing.Type['DefsUserId']:
                return DefsUserId
            user_name = schemas.StrSchema
        
            @staticmethod
            def admin_app_id() -> typing.Type['DefsAppId']:
                return DefsAppId
        
            @staticmethod
            def channel() -> typing.Type['DefsChannel']:
                return DefsChannel
            service_id = schemas.StrSchema
            service_type = schemas.StrSchema
            __annotations__ = {
                "app_id": app_id,
                "app_type": app_type,
                "change_type": change_type,
                "date": date,
                "scope": scope,
                "user_id": user_id,
                "user_name": user_name,
                "admin_app_id": admin_app_id,
                "channel": channel,
                "service_id": service_id,
                "service_type": service_type,
            }
    
    date: MetaOapg.properties.date
    app_type: MetaOapg.properties.app_type
    user_id: 'DefsUserId'
    user_name: MetaOapg.properties.user_name
    scope: MetaOapg.properties.scope
    change_type: MetaOapg.properties.change_type
    app_id: 'DefsAppId'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["app_id"]) -> 'DefsAppId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["app_type"]) -> MetaOapg.properties.app_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["change_type"]) -> MetaOapg.properties.change_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scope"]) -> MetaOapg.properties.scope: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_id"]) -> 'DefsUserId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_name"]) -> MetaOapg.properties.user_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["admin_app_id"]) -> 'DefsAppId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channel"]) -> 'DefsChannel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["service_id"]) -> MetaOapg.properties.service_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["service_type"]) -> MetaOapg.properties.service_type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["app_id", "app_type", "change_type", "date", "scope", "user_id", "user_name", "admin_app_id", "channel", "service_id", "service_type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["app_id"]) -> 'DefsAppId': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["app_type"]) -> MetaOapg.properties.app_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["change_type"]) -> MetaOapg.properties.change_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scope"]) -> MetaOapg.properties.scope: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_id"]) -> 'DefsUserId': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_name"]) -> MetaOapg.properties.user_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["admin_app_id"]) -> typing.Union['DefsAppId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channel"]) -> typing.Union['DefsChannel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["service_id"]) -> typing.Union[MetaOapg.properties.service_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["service_type"]) -> typing.Union[MetaOapg.properties.service_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["app_id", "app_type", "change_type", "date", "scope", "user_id", "user_name", "admin_app_id", "channel", "service_id", "service_type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        date: typing.Union[MetaOapg.properties.date, str, ],
        app_type: typing.Union[MetaOapg.properties.app_type, str, ],
        user_id: 'DefsUserId',
        user_name: typing.Union[MetaOapg.properties.user_name, str, ],
        scope: typing.Union[MetaOapg.properties.scope, str, ],
        change_type: typing.Union[MetaOapg.properties.change_type, str, ],
        app_id: 'DefsAppId',
        admin_app_id: typing.Union['DefsAppId', schemas.Unset] = schemas.unset,
        channel: typing.Union['DefsChannel', schemas.Unset] = schemas.unset,
        service_id: typing.Union[MetaOapg.properties.service_id, str, schemas.Unset] = schemas.unset,
        service_type: typing.Union[MetaOapg.properties.service_type, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TeamIntegrationLogsResponseLogsItem':
        return super().__new__(
            cls,
            *args,
            date=date,
            app_type=app_type,
            user_id=user_id,
            user_name=user_name,
            scope=scope,
            change_type=change_type,
            app_id=app_id,
            admin_app_id=admin_app_id,
            channel=channel,
            service_id=service_id,
            service_type=service_type,
            _configuration=_configuration,
            **kwargs,
        )

from slack_web_python_sdk.model.defs_app_id import DefsAppId
from slack_web_python_sdk.model.defs_channel import DefsChannel
from slack_web_python_sdk.model.defs_user_id import DefsUserId
