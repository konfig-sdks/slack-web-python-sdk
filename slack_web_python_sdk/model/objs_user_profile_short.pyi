# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Created by: https://api.slack.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slack_web_python_sdk import schemas  # noqa: F401


class ObjsUserProfileShort(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "is_ultra_restricted",
            "is_restricted",
            "name",
            "real_name",
            "team",
            "avatar_hash",
            "display_name",
            "image_72",
            "first_name",
        }
        
        class properties:
            avatar_hash = schemas.StrSchema
            display_name = schemas.StrSchema
            
            
            class first_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'first_name':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            image_72 = schemas.StrSchema
            is_restricted = schemas.BoolSchema
            is_ultra_restricted = schemas.BoolSchema
            name = schemas.StrSchema
            real_name = schemas.StrSchema
        
            @staticmethod
            def team() -> typing.Type['DefsWorkspaceId']:
                return DefsWorkspaceId
            display_name_normalized = schemas.StrSchema
            real_name_normalized = schemas.StrSchema
            __annotations__ = {
                "avatar_hash": avatar_hash,
                "display_name": display_name,
                "first_name": first_name,
                "image_72": image_72,
                "is_restricted": is_restricted,
                "is_ultra_restricted": is_ultra_restricted,
                "name": name,
                "real_name": real_name,
                "team": team,
                "display_name_normalized": display_name_normalized,
                "real_name_normalized": real_name_normalized,
            }
    
    is_ultra_restricted: MetaOapg.properties.is_ultra_restricted
    is_restricted: MetaOapg.properties.is_restricted
    name: MetaOapg.properties.name
    real_name: MetaOapg.properties.real_name
    team: 'DefsWorkspaceId'
    avatar_hash: MetaOapg.properties.avatar_hash
    display_name: MetaOapg.properties.display_name
    image_72: MetaOapg.properties.image_72
    first_name: MetaOapg.properties.first_name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["avatar_hash"]) -> MetaOapg.properties.avatar_hash: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["display_name"]) -> MetaOapg.properties.display_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["first_name"]) -> MetaOapg.properties.first_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image_72"]) -> MetaOapg.properties.image_72: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_restricted"]) -> MetaOapg.properties.is_restricted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_ultra_restricted"]) -> MetaOapg.properties.is_ultra_restricted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["real_name"]) -> MetaOapg.properties.real_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team"]) -> 'DefsWorkspaceId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["display_name_normalized"]) -> MetaOapg.properties.display_name_normalized: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["real_name_normalized"]) -> MetaOapg.properties.real_name_normalized: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["avatar_hash", "display_name", "first_name", "image_72", "is_restricted", "is_ultra_restricted", "name", "real_name", "team", "display_name_normalized", "real_name_normalized", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["avatar_hash"]) -> MetaOapg.properties.avatar_hash: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["display_name"]) -> MetaOapg.properties.display_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["first_name"]) -> MetaOapg.properties.first_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image_72"]) -> MetaOapg.properties.image_72: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_restricted"]) -> MetaOapg.properties.is_restricted: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_ultra_restricted"]) -> MetaOapg.properties.is_ultra_restricted: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["real_name"]) -> MetaOapg.properties.real_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team"]) -> 'DefsWorkspaceId': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["display_name_normalized"]) -> typing.Union[MetaOapg.properties.display_name_normalized, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["real_name_normalized"]) -> typing.Union[MetaOapg.properties.real_name_normalized, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["avatar_hash", "display_name", "first_name", "image_72", "is_restricted", "is_ultra_restricted", "name", "real_name", "team", "display_name_normalized", "real_name_normalized", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        is_ultra_restricted: typing.Union[MetaOapg.properties.is_ultra_restricted, bool, ],
        is_restricted: typing.Union[MetaOapg.properties.is_restricted, bool, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        real_name: typing.Union[MetaOapg.properties.real_name, str, ],
        team: 'DefsWorkspaceId',
        avatar_hash: typing.Union[MetaOapg.properties.avatar_hash, str, ],
        display_name: typing.Union[MetaOapg.properties.display_name, str, ],
        image_72: typing.Union[MetaOapg.properties.image_72, str, ],
        first_name: typing.Union[MetaOapg.properties.first_name, None, str, ],
        display_name_normalized: typing.Union[MetaOapg.properties.display_name_normalized, str, schemas.Unset] = schemas.unset,
        real_name_normalized: typing.Union[MetaOapg.properties.real_name_normalized, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ObjsUserProfileShort':
        return super().__new__(
            cls,
            *args,
            is_ultra_restricted=is_ultra_restricted,
            is_restricted=is_restricted,
            name=name,
            real_name=real_name,
            team=team,
            avatar_hash=avatar_hash,
            display_name=display_name,
            image_72=image_72,
            first_name=first_name,
            display_name_normalized=display_name_normalized,
            real_name_normalized=real_name_normalized,
            _configuration=_configuration,
            **kwargs,
        )

from slack_web_python_sdk.model.defs_workspace_id import DefsWorkspaceId
