# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Created by: https://api.slack.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slack_web_python_sdk import schemas  # noqa: F401


class AdminteamsCreateEnterpriseTeamRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "team_domain",
            "team_name",
        }
        
        class properties:
            team_domain = schemas.StrSchema
            team_name = schemas.StrSchema
            team_description = schemas.StrSchema
            team_discoverability = schemas.StrSchema
            __annotations__ = {
                "team_domain": team_domain,
                "team_name": team_name,
                "team_description": team_description,
                "team_discoverability": team_discoverability,
            }
    
    team_domain: MetaOapg.properties.team_domain
    team_name: MetaOapg.properties.team_name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team_domain"]) -> MetaOapg.properties.team_domain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team_name"]) -> MetaOapg.properties.team_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team_description"]) -> MetaOapg.properties.team_description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team_discoverability"]) -> MetaOapg.properties.team_discoverability: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["team_domain", "team_name", "team_description", "team_discoverability", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team_domain"]) -> MetaOapg.properties.team_domain: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team_name"]) -> MetaOapg.properties.team_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team_description"]) -> typing.Union[MetaOapg.properties.team_description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team_discoverability"]) -> typing.Union[MetaOapg.properties.team_discoverability, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["team_domain", "team_name", "team_description", "team_discoverability", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        team_domain: typing.Union[MetaOapg.properties.team_domain, str, ],
        team_name: typing.Union[MetaOapg.properties.team_name, str, ],
        team_description: typing.Union[MetaOapg.properties.team_description, str, schemas.Unset] = schemas.unset,
        team_discoverability: typing.Union[MetaOapg.properties.team_discoverability, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AdminteamsCreateEnterpriseTeamRequest':
        return super().__new__(
            cls,
            *args,
            team_domain=team_domain,
            team_name=team_name,
            team_description=team_description,
            team_discoverability=team_discoverability,
            _configuration=_configuration,
            **kwargs,
        )
