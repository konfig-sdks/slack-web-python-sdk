# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Created by: https://api.slack.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slack_web_python_sdk import schemas  # noqa: F401


class AuthTestResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Schema for successful response auth.test method
    """


    class MetaOapg:
        required = {
            "user_id",
            "team",
            "team_id",
            "ok",
            "user",
            "url",
        }
        
        class properties:
        
            @staticmethod
            def ok() -> typing.Type['DefsOkTrue']:
                return DefsOkTrue
            team = schemas.StrSchema
        
            @staticmethod
            def team_id() -> typing.Type['DefsTeam']:
                return DefsTeam
            url = schemas.StrSchema
            user = schemas.StrSchema
        
            @staticmethod
            def user_id() -> typing.Type['DefsUserId']:
                return DefsUserId
        
            @staticmethod
            def bot_id() -> typing.Type['DefsBotId']:
                return DefsBotId
            is_enterprise_install = schemas.BoolSchema
            __annotations__ = {
                "ok": ok,
                "team": team,
                "team_id": team_id,
                "url": url,
                "user": user,
                "user_id": user_id,
                "bot_id": bot_id,
                "is_enterprise_install": is_enterprise_install,
            }
    
    user_id: 'DefsUserId'
    team: MetaOapg.properties.team
    team_id: 'DefsTeam'
    ok: 'DefsOkTrue'
    user: MetaOapg.properties.user
    url: MetaOapg.properties.url
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkTrue': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team"]) -> MetaOapg.properties.team: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team_id"]) -> 'DefsTeam': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_id"]) -> 'DefsUserId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bot_id"]) -> 'DefsBotId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_enterprise_install"]) -> MetaOapg.properties.is_enterprise_install: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ok", "team", "team_id", "url", "user", "user_id", "bot_id", "is_enterprise_install", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkTrue': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team"]) -> MetaOapg.properties.team: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team_id"]) -> 'DefsTeam': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_id"]) -> 'DefsUserId': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bot_id"]) -> typing.Union['DefsBotId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_enterprise_install"]) -> typing.Union[MetaOapg.properties.is_enterprise_install, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ok", "team", "team_id", "url", "user", "user_id", "bot_id", "is_enterprise_install", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        user_id: 'DefsUserId',
        team: typing.Union[MetaOapg.properties.team, str, ],
        team_id: 'DefsTeam',
        ok: 'DefsOkTrue',
        user: typing.Union[MetaOapg.properties.user, str, ],
        url: typing.Union[MetaOapg.properties.url, str, ],
        bot_id: typing.Union['DefsBotId', schemas.Unset] = schemas.unset,
        is_enterprise_install: typing.Union[MetaOapg.properties.is_enterprise_install, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AuthTestResponse':
        return super().__new__(
            cls,
            *args,
            user_id=user_id,
            team=team,
            team_id=team_id,
            ok=ok,
            user=user,
            url=url,
            bot_id=bot_id,
            is_enterprise_install=is_enterprise_install,
            _configuration=_configuration,
            **kwargs,
        )

from slack_web_python_sdk.model.defs_bot_id import DefsBotId
from slack_web_python_sdk.model.defs_ok_true import DefsOkTrue
from slack_web_python_sdk.model.defs_team import DefsTeam
from slack_web_python_sdk.model.defs_user_id import DefsUserId
