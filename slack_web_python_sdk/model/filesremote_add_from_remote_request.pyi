# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Created by: https://api.slack.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slack_web_python_sdk import schemas  # noqa: F401


class FilesremoteAddFromRemoteRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            title = schemas.StrSchema
            external_id = schemas.StrSchema
            external_url = schemas.StrSchema
            filetype = schemas.StrSchema
            indexable_file_contents = schemas.StrSchema
            preview_image = schemas.StrSchema
            token = schemas.StrSchema
            __annotations__ = {
                "title": title,
                "external_id": external_id,
                "external_url": external_url,
                "filetype": filetype,
                "indexable_file_contents": indexable_file_contents,
                "preview_image": preview_image,
                "token": token,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["external_id"]) -> MetaOapg.properties.external_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["external_url"]) -> MetaOapg.properties.external_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filetype"]) -> MetaOapg.properties.filetype: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["indexable_file_contents"]) -> MetaOapg.properties.indexable_file_contents: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preview_image"]) -> MetaOapg.properties.preview_image: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["token"]) -> MetaOapg.properties.token: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "external_id", "external_url", "filetype", "indexable_file_contents", "preview_image", "token", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["external_id"]) -> typing.Union[MetaOapg.properties.external_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["external_url"]) -> typing.Union[MetaOapg.properties.external_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filetype"]) -> typing.Union[MetaOapg.properties.filetype, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["indexable_file_contents"]) -> typing.Union[MetaOapg.properties.indexable_file_contents, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preview_image"]) -> typing.Union[MetaOapg.properties.preview_image, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["token"]) -> typing.Union[MetaOapg.properties.token, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "external_id", "external_url", "filetype", "indexable_file_contents", "preview_image", "token", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        external_id: typing.Union[MetaOapg.properties.external_id, str, schemas.Unset] = schemas.unset,
        external_url: typing.Union[MetaOapg.properties.external_url, str, schemas.Unset] = schemas.unset,
        filetype: typing.Union[MetaOapg.properties.filetype, str, schemas.Unset] = schemas.unset,
        indexable_file_contents: typing.Union[MetaOapg.properties.indexable_file_contents, str, schemas.Unset] = schemas.unset,
        preview_image: typing.Union[MetaOapg.properties.preview_image, str, schemas.Unset] = schemas.unset,
        token: typing.Union[MetaOapg.properties.token, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FilesremoteAddFromRemoteRequest':
        return super().__new__(
            cls,
            *args,
            title=title,
            external_id=external_id,
            external_url=external_url,
            filetype=filetype,
            indexable_file_contents=indexable_file_contents,
            preview_image=preview_image,
            token=token,
            _configuration=_configuration,
            **kwargs,
        )
