# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Created by: https://api.slack.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slack_web_python_sdk import schemas  # noqa: F401


class AppspermissionsListPermissionsResponseInfo(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "im",
            "mpim",
            "channel",
            "app_home",
            "team",
            "group",
        }
        
        class properties:
        
            @staticmethod
            def app_home() -> typing.Type['AppspermissionsListPermissionsResponseInfoAppHome']:
                return AppspermissionsListPermissionsResponseInfoAppHome
        
            @staticmethod
            def channel() -> typing.Type['AppspermissionsListPermissionsResponseInfoChannel']:
                return AppspermissionsListPermissionsResponseInfoChannel
        
            @staticmethod
            def group() -> typing.Type['AppspermissionsListPermissionsResponseInfoGroup']:
                return AppspermissionsListPermissionsResponseInfoGroup
        
            @staticmethod
            def im() -> typing.Type['AppspermissionsListPermissionsResponseInfoIm']:
                return AppspermissionsListPermissionsResponseInfoIm
        
            @staticmethod
            def mpim() -> typing.Type['AppspermissionsListPermissionsResponseInfoMpim']:
                return AppspermissionsListPermissionsResponseInfoMpim
        
            @staticmethod
            def team() -> typing.Type['AppspermissionsListPermissionsResponseInfoTeam']:
                return AppspermissionsListPermissionsResponseInfoTeam
            __annotations__ = {
                "app_home": app_home,
                "channel": channel,
                "group": group,
                "im": im,
                "mpim": mpim,
                "team": team,
            }
    
    im: 'AppspermissionsListPermissionsResponseInfoIm'
    mpim: 'AppspermissionsListPermissionsResponseInfoMpim'
    channel: 'AppspermissionsListPermissionsResponseInfoChannel'
    app_home: 'AppspermissionsListPermissionsResponseInfoAppHome'
    team: 'AppspermissionsListPermissionsResponseInfoTeam'
    group: 'AppspermissionsListPermissionsResponseInfoGroup'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["app_home"]) -> 'AppspermissionsListPermissionsResponseInfoAppHome': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channel"]) -> 'AppspermissionsListPermissionsResponseInfoChannel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group"]) -> 'AppspermissionsListPermissionsResponseInfoGroup': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["im"]) -> 'AppspermissionsListPermissionsResponseInfoIm': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mpim"]) -> 'AppspermissionsListPermissionsResponseInfoMpim': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team"]) -> 'AppspermissionsListPermissionsResponseInfoTeam': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["app_home", "channel", "group", "im", "mpim", "team", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["app_home"]) -> 'AppspermissionsListPermissionsResponseInfoAppHome': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channel"]) -> 'AppspermissionsListPermissionsResponseInfoChannel': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group"]) -> 'AppspermissionsListPermissionsResponseInfoGroup': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["im"]) -> 'AppspermissionsListPermissionsResponseInfoIm': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mpim"]) -> 'AppspermissionsListPermissionsResponseInfoMpim': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team"]) -> 'AppspermissionsListPermissionsResponseInfoTeam': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["app_home", "channel", "group", "im", "mpim", "team", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        im: 'AppspermissionsListPermissionsResponseInfoIm',
        mpim: 'AppspermissionsListPermissionsResponseInfoMpim',
        channel: 'AppspermissionsListPermissionsResponseInfoChannel',
        app_home: 'AppspermissionsListPermissionsResponseInfoAppHome',
        team: 'AppspermissionsListPermissionsResponseInfoTeam',
        group: 'AppspermissionsListPermissionsResponseInfoGroup',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AppspermissionsListPermissionsResponseInfo':
        return super().__new__(
            cls,
            *args,
            im=im,
            mpim=mpim,
            channel=channel,
            app_home=app_home,
            team=team,
            group=group,
            _configuration=_configuration,
            **kwargs,
        )

from slack_web_python_sdk.model.appspermissions_list_permissions_response_info_app_home import AppspermissionsListPermissionsResponseInfoAppHome
from slack_web_python_sdk.model.appspermissions_list_permissions_response_info_channel import AppspermissionsListPermissionsResponseInfoChannel
from slack_web_python_sdk.model.appspermissions_list_permissions_response_info_group import AppspermissionsListPermissionsResponseInfoGroup
from slack_web_python_sdk.model.appspermissions_list_permissions_response_info_im import AppspermissionsListPermissionsResponseInfoIm
from slack_web_python_sdk.model.appspermissions_list_permissions_response_info_mpim import AppspermissionsListPermissionsResponseInfoMpim
from slack_web_python_sdk.model.appspermissions_list_permissions_response_info_team import AppspermissionsListPermissionsResponseInfoTeam
