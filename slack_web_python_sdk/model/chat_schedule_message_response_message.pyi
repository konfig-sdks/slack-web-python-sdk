# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Created by: https://api.slack.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slack_web_python_sdk import schemas  # noqa: F401


class ChatScheduleMessageResponseMessage(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "team",
            "text",
            "type",
            "user",
            "bot_id",
        }
        
        class properties:
        
            @staticmethod
            def bot_id() -> typing.Type['DefsBotId']:
                return DefsBotId
        
            @staticmethod
            def team() -> typing.Type['DefsTeam']:
                return DefsTeam
            text = schemas.StrSchema
            type = schemas.StrSchema
        
            @staticmethod
            def user() -> typing.Type['DefsUserId']:
                return DefsUserId
        
            @staticmethod
            def bot_profile() -> typing.Type['ObjsBotProfile']:
                return ObjsBotProfile
            username = schemas.StrSchema
            __annotations__ = {
                "bot_id": bot_id,
                "team": team,
                "text": text,
                "type": type,
                "user": user,
                "bot_profile": bot_profile,
                "username": username,
            }
    
    team: 'DefsTeam'
    text: MetaOapg.properties.text
    type: MetaOapg.properties.type
    user: 'DefsUserId'
    bot_id: 'DefsBotId'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bot_id"]) -> 'DefsBotId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team"]) -> 'DefsTeam': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'DefsUserId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bot_profile"]) -> 'ObjsBotProfile': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["bot_id", "team", "text", "type", "user", "bot_profile", "username", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bot_id"]) -> 'DefsBotId': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team"]) -> 'DefsTeam': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> 'DefsUserId': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bot_profile"]) -> typing.Union['ObjsBotProfile', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> typing.Union[MetaOapg.properties.username, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["bot_id", "team", "text", "type", "user", "bot_profile", "username", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        team: 'DefsTeam',
        text: typing.Union[MetaOapg.properties.text, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        user: 'DefsUserId',
        bot_id: 'DefsBotId',
        bot_profile: typing.Union['ObjsBotProfile', schemas.Unset] = schemas.unset,
        username: typing.Union[MetaOapg.properties.username, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ChatScheduleMessageResponseMessage':
        return super().__new__(
            cls,
            *args,
            team=team,
            text=text,
            type=type,
            user=user,
            bot_id=bot_id,
            bot_profile=bot_profile,
            username=username,
            _configuration=_configuration,
            **kwargs,
        )

from slack_web_python_sdk.model.defs_bot_id import DefsBotId
from slack_web_python_sdk.model.defs_team import DefsTeam
from slack_web_python_sdk.model.defs_user_id import DefsUserId
from slack_web_python_sdk.model.objs_bot_profile import ObjsBotProfile
