# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Created by: https://api.slack.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slack_web_python_sdk import schemas  # noqa: F401


class ChatscheduledMessagesListResponseScheduledMessagesItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "date_created",
            "id",
            "post_at",
            "channel_id",
        }
        
        class properties:
        
            @staticmethod
            def channel_id() -> typing.Type['DefsChannelId']:
                return DefsChannelId
            
            
            class date_created(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
            
            
            class id(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^[Q][A-Z0-9]{8,}$',
                    }]
            
            
            class post_at(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
            text = schemas.StrSchema
            __annotations__ = {
                "channel_id": channel_id,
                "date_created": date_created,
                "id": id,
                "post_at": post_at,
                "text": text,
            }
    
    date_created: MetaOapg.properties.date_created
    id: MetaOapg.properties.id
    post_at: MetaOapg.properties.post_at
    channel_id: 'DefsChannelId'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channel_id"]) -> 'DefsChannelId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_created"]) -> MetaOapg.properties.date_created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["post_at"]) -> MetaOapg.properties.post_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["channel_id", "date_created", "id", "post_at", "text", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channel_id"]) -> 'DefsChannelId': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_created"]) -> MetaOapg.properties.date_created: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["post_at"]) -> MetaOapg.properties.post_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> typing.Union[MetaOapg.properties.text, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["channel_id", "date_created", "id", "post_at", "text", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        date_created: typing.Union[MetaOapg.properties.date_created, decimal.Decimal, int, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        post_at: typing.Union[MetaOapg.properties.post_at, decimal.Decimal, int, ],
        channel_id: 'DefsChannelId',
        text: typing.Union[MetaOapg.properties.text, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ChatscheduledMessagesListResponseScheduledMessagesItem':
        return super().__new__(
            cls,
            *args,
            date_created=date_created,
            id=id,
            post_at=post_at,
            channel_id=channel_id,
            text=text,
            _configuration=_configuration,
            **kwargs,
        )

from slack_web_python_sdk.model.defs_channel_id import DefsChannelId
