# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Created by: https://api.slack.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slack_web_python_sdk import schemas  # noqa: F401


class UsersIdentityResponse(
    schemas.ListSchema
):
    """NOTE:
    This class is auto generated by Konfig (https://konfigthis.com)

    Schema for successful response from users.identity method
    """


    class MetaOapg:
        
        
        class items(
            schemas.ComposedSchema,
        ):
        
        
            class MetaOapg:
                
                
                class any_of_0(
                    schemas.DictSchema
                ):
                
                
                    class MetaOapg:
                        required = {
                            "team",
                            "ok",
                            "user",
                        }
                        
                        class properties:
                        
                            @staticmethod
                            def ok() -> typing.Type['DefsOkTrue']:
                                return DefsOkTrue
                            
                            
                            class team(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    required = {
                                        "id",
                                    }
                                    
                                    class properties:
                                    
                                        @staticmethod
                                        def id() -> typing.Type['DefsTeam']:
                                            return DefsTeam
                                        __annotations__ = {
                                            "id": id,
                                        }
                                
                                id: 'DefsTeam'
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'DefsTeam': ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> 'DefsTeam': ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                    id: 'DefsTeam',
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'team':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        id=id,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                            
                            
                            class user(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    required = {
                                        "name",
                                        "id",
                                    }
                                    
                                    class properties:
                                    
                                        @staticmethod
                                        def id() -> typing.Type['DefsUserId']:
                                            return DefsUserId
                                        name = schemas.StrSchema
                                        __annotations__ = {
                                            "id": id,
                                            "name": name,
                                        }
                                
                                name: MetaOapg.properties.name
                                id: 'DefsUserId'
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'DefsUserId': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> 'DefsUserId': ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                    name: typing.Union[MetaOapg.properties.name, str, ],
                                    id: 'DefsUserId',
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'user':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        name=name,
                                        id=id,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                            __annotations__ = {
                                "ok": ok,
                                "team": team,
                                "user": user,
                            }
                    
                    team: MetaOapg.properties.team
                    ok: 'DefsOkTrue'
                    user: MetaOapg.properties.user
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkTrue': ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["team"]) -> MetaOapg.properties.team: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
                    
                    @typing.overload
                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                    
                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ok", "team", "user", ], str]):
                        # dict_instance[name] accessor
                        return super().__getitem__(name)
                    
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkTrue': ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["team"]) -> MetaOapg.properties.team: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                    
                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ok", "team", "user", ], str]):
                        return super().get_item_oapg(name)
                    
                
                    def __new__(
                        cls,
                        *args: typing.Union[dict, frozendict.frozendict, ],
                        team: typing.Union[MetaOapg.properties.team, dict, frozendict.frozendict, ],
                        ok: 'DefsOkTrue',
                        user: typing.Union[MetaOapg.properties.user, dict, frozendict.frozendict, ],
                        _configuration: typing.Optional[schemas.Configuration] = None,
                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                    ) -> 'any_of_0':
                        return super().__new__(
                            cls,
                            *args,
                            team=team,
                            ok=ok,
                            user=user,
                            _configuration=_configuration,
                            **kwargs,
                        )
                
                
                class any_of_1(
                    schemas.DictSchema
                ):
                
                
                    class MetaOapg:
                        required = {
                            "team",
                            "ok",
                            "user",
                        }
                        
                        class properties:
                        
                            @staticmethod
                            def ok() -> typing.Type['DefsOkTrue']:
                                return DefsOkTrue
                            
                            
                            class team(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    required = {
                                        "id",
                                    }
                                    
                                    class properties:
                                    
                                        @staticmethod
                                        def id() -> typing.Type['DefsTeam']:
                                            return DefsTeam
                                        __annotations__ = {
                                            "id": id,
                                        }
                                
                                id: 'DefsTeam'
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'DefsTeam': ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> 'DefsTeam': ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                    id: 'DefsTeam',
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'team':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        id=id,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                            
                            
                            class user(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    required = {
                                        "name",
                                        "id",
                                        "email",
                                    }
                                    
                                    class properties:
                                        email = schemas.StrSchema
                                    
                                        @staticmethod
                                        def id() -> typing.Type['DefsUserId']:
                                            return DefsUserId
                                        name = schemas.StrSchema
                                        __annotations__ = {
                                            "email": email,
                                            "id": id,
                                            "name": name,
                                        }
                                
                                name: MetaOapg.properties.name
                                id: 'DefsUserId'
                                email: MetaOapg.properties.email
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'DefsUserId': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["email", "id", "name", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> 'DefsUserId': ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["email", "id", "name", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                    name: typing.Union[MetaOapg.properties.name, str, ],
                                    id: 'DefsUserId',
                                    email: typing.Union[MetaOapg.properties.email, str, ],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'user':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        name=name,
                                        id=id,
                                        email=email,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                            __annotations__ = {
                                "ok": ok,
                                "team": team,
                                "user": user,
                            }
                    
                    team: MetaOapg.properties.team
                    ok: 'DefsOkTrue'
                    user: MetaOapg.properties.user
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkTrue': ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["team"]) -> MetaOapg.properties.team: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
                    
                    @typing.overload
                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                    
                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ok", "team", "user", ], str]):
                        # dict_instance[name] accessor
                        return super().__getitem__(name)
                    
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkTrue': ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["team"]) -> MetaOapg.properties.team: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                    
                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ok", "team", "user", ], str]):
                        return super().get_item_oapg(name)
                    
                
                    def __new__(
                        cls,
                        *args: typing.Union[dict, frozendict.frozendict, ],
                        team: typing.Union[MetaOapg.properties.team, dict, frozendict.frozendict, ],
                        ok: 'DefsOkTrue',
                        user: typing.Union[MetaOapg.properties.user, dict, frozendict.frozendict, ],
                        _configuration: typing.Optional[schemas.Configuration] = None,
                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                    ) -> 'any_of_1':
                        return super().__new__(
                            cls,
                            *args,
                            team=team,
                            ok=ok,
                            user=user,
                            _configuration=_configuration,
                            **kwargs,
                        )
                
                
                class any_of_2(
                    schemas.DictSchema
                ):
                
                
                    class MetaOapg:
                        required = {
                            "team",
                            "ok",
                            "user",
                        }
                        
                        class properties:
                        
                            @staticmethod
                            def ok() -> typing.Type['DefsOkTrue']:
                                return DefsOkTrue
                            
                            
                            class team(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    required = {
                                        "id",
                                    }
                                    
                                    class properties:
                                    
                                        @staticmethod
                                        def id() -> typing.Type['DefsTeam']:
                                            return DefsTeam
                                        __annotations__ = {
                                            "id": id,
                                        }
                                
                                id: 'DefsTeam'
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'DefsTeam': ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> 'DefsTeam': ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                    id: 'DefsTeam',
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'team':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        id=id,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                            
                            
                            class user(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    required = {
                                        "image_32",
                                        "image_24",
                                        "name",
                                        "image_192",
                                        "id",
                                        "image_48",
                                        "image_72",
                                        "image_512",
                                    }
                                    
                                    class properties:
                                    
                                        @staticmethod
                                        def id() -> typing.Type['DefsUserId']:
                                            return DefsUserId
                                        image_192 = schemas.StrSchema
                                        image_24 = schemas.StrSchema
                                        image_32 = schemas.StrSchema
                                        image_48 = schemas.StrSchema
                                        image_512 = schemas.StrSchema
                                        image_72 = schemas.StrSchema
                                        name = schemas.StrSchema
                                        __annotations__ = {
                                            "id": id,
                                            "image_192": image_192,
                                            "image_24": image_24,
                                            "image_32": image_32,
                                            "image_48": image_48,
                                            "image_512": image_512,
                                            "image_72": image_72,
                                            "name": name,
                                        }
                                
                                image_32: MetaOapg.properties.image_32
                                image_24: MetaOapg.properties.image_24
                                name: MetaOapg.properties.name
                                image_192: MetaOapg.properties.image_192
                                id: 'DefsUserId'
                                image_48: MetaOapg.properties.image_48
                                image_72: MetaOapg.properties.image_72
                                image_512: MetaOapg.properties.image_512
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'DefsUserId': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["image_192"]) -> MetaOapg.properties.image_192: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["image_24"]) -> MetaOapg.properties.image_24: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["image_32"]) -> MetaOapg.properties.image_32: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["image_48"]) -> MetaOapg.properties.image_48: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["image_512"]) -> MetaOapg.properties.image_512: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["image_72"]) -> MetaOapg.properties.image_72: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "image_192", "image_24", "image_32", "image_48", "image_512", "image_72", "name", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> 'DefsUserId': ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["image_192"]) -> MetaOapg.properties.image_192: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["image_24"]) -> MetaOapg.properties.image_24: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["image_32"]) -> MetaOapg.properties.image_32: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["image_48"]) -> MetaOapg.properties.image_48: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["image_512"]) -> MetaOapg.properties.image_512: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["image_72"]) -> MetaOapg.properties.image_72: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "image_192", "image_24", "image_32", "image_48", "image_512", "image_72", "name", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                    image_32: typing.Union[MetaOapg.properties.image_32, str, ],
                                    image_24: typing.Union[MetaOapg.properties.image_24, str, ],
                                    name: typing.Union[MetaOapg.properties.name, str, ],
                                    image_192: typing.Union[MetaOapg.properties.image_192, str, ],
                                    id: 'DefsUserId',
                                    image_48: typing.Union[MetaOapg.properties.image_48, str, ],
                                    image_72: typing.Union[MetaOapg.properties.image_72, str, ],
                                    image_512: typing.Union[MetaOapg.properties.image_512, str, ],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'user':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        image_32=image_32,
                                        image_24=image_24,
                                        name=name,
                                        image_192=image_192,
                                        id=id,
                                        image_48=image_48,
                                        image_72=image_72,
                                        image_512=image_512,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                            __annotations__ = {
                                "ok": ok,
                                "team": team,
                                "user": user,
                            }
                    
                    team: MetaOapg.properties.team
                    ok: 'DefsOkTrue'
                    user: MetaOapg.properties.user
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkTrue': ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["team"]) -> MetaOapg.properties.team: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
                    
                    @typing.overload
                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                    
                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ok", "team", "user", ], str]):
                        # dict_instance[name] accessor
                        return super().__getitem__(name)
                    
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkTrue': ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["team"]) -> MetaOapg.properties.team: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                    
                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ok", "team", "user", ], str]):
                        return super().get_item_oapg(name)
                    
                
                    def __new__(
                        cls,
                        *args: typing.Union[dict, frozendict.frozendict, ],
                        team: typing.Union[MetaOapg.properties.team, dict, frozendict.frozendict, ],
                        ok: 'DefsOkTrue',
                        user: typing.Union[MetaOapg.properties.user, dict, frozendict.frozendict, ],
                        _configuration: typing.Optional[schemas.Configuration] = None,
                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                    ) -> 'any_of_2':
                        return super().__new__(
                            cls,
                            *args,
                            team=team,
                            ok=ok,
                            user=user,
                            _configuration=_configuration,
                            **kwargs,
                        )
                
                
                class any_of_3(
                    schemas.DictSchema
                ):
                
                
                    class MetaOapg:
                        required = {
                            "team",
                            "ok",
                            "user",
                        }
                        
                        class properties:
                        
                            @staticmethod
                            def ok() -> typing.Type['DefsOkTrue']:
                                return DefsOkTrue
                            
                            
                            class team(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    required = {
                                        "image_132",
                                        "image_102",
                                        "image_68",
                                        "image_default",
                                        "image_34",
                                        "domain",
                                        "image_230",
                                        "image_44",
                                        "image_88",
                                        "name",
                                        "id",
                                    }
                                    
                                    class properties:
                                        domain = schemas.StrSchema
                                    
                                        @staticmethod
                                        def id() -> typing.Type['DefsTeam']:
                                            return DefsTeam
                                        image_102 = schemas.StrSchema
                                        image_132 = schemas.StrSchema
                                        image_230 = schemas.StrSchema
                                        image_34 = schemas.StrSchema
                                        image_44 = schemas.StrSchema
                                        image_68 = schemas.StrSchema
                                        image_88 = schemas.StrSchema
                                        image_default = schemas.BoolSchema
                                        name = schemas.StrSchema
                                        __annotations__ = {
                                            "domain": domain,
                                            "id": id,
                                            "image_102": image_102,
                                            "image_132": image_132,
                                            "image_230": image_230,
                                            "image_34": image_34,
                                            "image_44": image_44,
                                            "image_68": image_68,
                                            "image_88": image_88,
                                            "image_default": image_default,
                                            "name": name,
                                        }
                                
                                image_132: MetaOapg.properties.image_132
                                image_102: MetaOapg.properties.image_102
                                image_68: MetaOapg.properties.image_68
                                image_default: MetaOapg.properties.image_default
                                image_34: MetaOapg.properties.image_34
                                domain: MetaOapg.properties.domain
                                image_230: MetaOapg.properties.image_230
                                image_44: MetaOapg.properties.image_44
                                image_88: MetaOapg.properties.image_88
                                name: MetaOapg.properties.name
                                id: 'DefsTeam'
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["domain"]) -> MetaOapg.properties.domain: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'DefsTeam': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["image_102"]) -> MetaOapg.properties.image_102: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["image_132"]) -> MetaOapg.properties.image_132: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["image_230"]) -> MetaOapg.properties.image_230: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["image_34"]) -> MetaOapg.properties.image_34: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["image_44"]) -> MetaOapg.properties.image_44: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["image_68"]) -> MetaOapg.properties.image_68: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["image_88"]) -> MetaOapg.properties.image_88: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["image_default"]) -> MetaOapg.properties.image_default: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["domain", "id", "image_102", "image_132", "image_230", "image_34", "image_44", "image_68", "image_88", "image_default", "name", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["domain"]) -> MetaOapg.properties.domain: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> 'DefsTeam': ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["image_102"]) -> MetaOapg.properties.image_102: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["image_132"]) -> MetaOapg.properties.image_132: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["image_230"]) -> MetaOapg.properties.image_230: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["image_34"]) -> MetaOapg.properties.image_34: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["image_44"]) -> MetaOapg.properties.image_44: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["image_68"]) -> MetaOapg.properties.image_68: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["image_88"]) -> MetaOapg.properties.image_88: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["image_default"]) -> MetaOapg.properties.image_default: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["domain", "id", "image_102", "image_132", "image_230", "image_34", "image_44", "image_68", "image_88", "image_default", "name", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                    image_132: typing.Union[MetaOapg.properties.image_132, str, ],
                                    image_102: typing.Union[MetaOapg.properties.image_102, str, ],
                                    image_68: typing.Union[MetaOapg.properties.image_68, str, ],
                                    image_default: typing.Union[MetaOapg.properties.image_default, bool, ],
                                    image_34: typing.Union[MetaOapg.properties.image_34, str, ],
                                    domain: typing.Union[MetaOapg.properties.domain, str, ],
                                    image_230: typing.Union[MetaOapg.properties.image_230, str, ],
                                    image_44: typing.Union[MetaOapg.properties.image_44, str, ],
                                    image_88: typing.Union[MetaOapg.properties.image_88, str, ],
                                    name: typing.Union[MetaOapg.properties.name, str, ],
                                    id: 'DefsTeam',
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'team':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        image_132=image_132,
                                        image_102=image_102,
                                        image_68=image_68,
                                        image_default=image_default,
                                        image_34=image_34,
                                        domain=domain,
                                        image_230=image_230,
                                        image_44=image_44,
                                        image_88=image_88,
                                        name=name,
                                        id=id,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                            
                            
                            class user(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    required = {
                                        "name",
                                        "id",
                                    }
                                    
                                    class properties:
                                    
                                        @staticmethod
                                        def id() -> typing.Type['DefsUserId']:
                                            return DefsUserId
                                        name = schemas.StrSchema
                                        __annotations__ = {
                                            "id": id,
                                            "name": name,
                                        }
                                
                                name: MetaOapg.properties.name
                                id: 'DefsUserId'
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'DefsUserId': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> 'DefsUserId': ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                    name: typing.Union[MetaOapg.properties.name, str, ],
                                    id: 'DefsUserId',
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'user':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        name=name,
                                        id=id,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                            __annotations__ = {
                                "ok": ok,
                                "team": team,
                                "user": user,
                            }
                    
                    team: MetaOapg.properties.team
                    ok: 'DefsOkTrue'
                    user: MetaOapg.properties.user
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkTrue': ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["team"]) -> MetaOapg.properties.team: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
                    
                    @typing.overload
                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                    
                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ok", "team", "user", ], str]):
                        # dict_instance[name] accessor
                        return super().__getitem__(name)
                    
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkTrue': ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["team"]) -> MetaOapg.properties.team: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                    
                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ok", "team", "user", ], str]):
                        return super().get_item_oapg(name)
                    
                
                    def __new__(
                        cls,
                        *args: typing.Union[dict, frozendict.frozendict, ],
                        team: typing.Union[MetaOapg.properties.team, dict, frozendict.frozendict, ],
                        ok: 'DefsOkTrue',
                        user: typing.Union[MetaOapg.properties.user, dict, frozendict.frozendict, ],
                        _configuration: typing.Optional[schemas.Configuration] = None,
                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                    ) -> 'any_of_3':
                        return super().__new__(
                            cls,
                            *args,
                            team=team,
                            ok=ok,
                            user=user,
                            _configuration=_configuration,
                            **kwargs,
                        )
                
                @classmethod
                @functools.lru_cache()
                def any_of(cls):
                    # we need this here to make our import statements work
                    # we must store _composed_schemas in here so the code is only run
                    # when we invoke this method. If we kept this at the class
                    # level we would get an error because the class level
                    # code would be run when this module is imported, and these composed
                    # classes don't exist yet because their module has not finished
                    # loading
                    return [
                        cls.any_of_0,
                        cls.any_of_1,
                        cls.any_of_2,
                        cls.any_of_3,
                    ]
        
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'items':
                return super().__new__(
                    cls,
                    *args,
                    _configuration=_configuration,
                    **kwargs,
                )

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'UsersIdentityResponse':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)

from slack_web_python_sdk.model.defs_ok_true import DefsOkTrue
from slack_web_python_sdk.model.defs_team import DefsTeam
from slack_web_python_sdk.model.defs_user_id import DefsUserId
