# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Created by: https://api.slack.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slack_web_python_sdk import schemas  # noqa: F401


class AdminusersInviteUserToWorkspaceRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "channel_ids",
            "team_id",
            "email",
        }
        
        class properties:
            channel_ids = schemas.StrSchema
            email = schemas.StrSchema
            team_id = schemas.StrSchema
            custom_message = schemas.StrSchema
            guest_expiration_ts = schemas.StrSchema
            is_restricted = schemas.BoolSchema
            is_ultra_restricted = schemas.BoolSchema
            real_name = schemas.StrSchema
            resend = schemas.BoolSchema
            __annotations__ = {
                "channel_ids": channel_ids,
                "email": email,
                "team_id": team_id,
                "custom_message": custom_message,
                "guest_expiration_ts": guest_expiration_ts,
                "is_restricted": is_restricted,
                "is_ultra_restricted": is_ultra_restricted,
                "real_name": real_name,
                "resend": resend,
            }
    
    channel_ids: MetaOapg.properties.channel_ids
    team_id: MetaOapg.properties.team_id
    email: MetaOapg.properties.email
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channel_ids"]) -> MetaOapg.properties.channel_ids: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team_id"]) -> MetaOapg.properties.team_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_message"]) -> MetaOapg.properties.custom_message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["guest_expiration_ts"]) -> MetaOapg.properties.guest_expiration_ts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_restricted"]) -> MetaOapg.properties.is_restricted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_ultra_restricted"]) -> MetaOapg.properties.is_ultra_restricted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["real_name"]) -> MetaOapg.properties.real_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resend"]) -> MetaOapg.properties.resend: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["channel_ids", "email", "team_id", "custom_message", "guest_expiration_ts", "is_restricted", "is_ultra_restricted", "real_name", "resend", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channel_ids"]) -> MetaOapg.properties.channel_ids: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team_id"]) -> MetaOapg.properties.team_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_message"]) -> typing.Union[MetaOapg.properties.custom_message, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["guest_expiration_ts"]) -> typing.Union[MetaOapg.properties.guest_expiration_ts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_restricted"]) -> typing.Union[MetaOapg.properties.is_restricted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_ultra_restricted"]) -> typing.Union[MetaOapg.properties.is_ultra_restricted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["real_name"]) -> typing.Union[MetaOapg.properties.real_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resend"]) -> typing.Union[MetaOapg.properties.resend, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["channel_ids", "email", "team_id", "custom_message", "guest_expiration_ts", "is_restricted", "is_ultra_restricted", "real_name", "resend", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        channel_ids: typing.Union[MetaOapg.properties.channel_ids, str, ],
        team_id: typing.Union[MetaOapg.properties.team_id, str, ],
        email: typing.Union[MetaOapg.properties.email, str, ],
        custom_message: typing.Union[MetaOapg.properties.custom_message, str, schemas.Unset] = schemas.unset,
        guest_expiration_ts: typing.Union[MetaOapg.properties.guest_expiration_ts, str, schemas.Unset] = schemas.unset,
        is_restricted: typing.Union[MetaOapg.properties.is_restricted, bool, schemas.Unset] = schemas.unset,
        is_ultra_restricted: typing.Union[MetaOapg.properties.is_ultra_restricted, bool, schemas.Unset] = schemas.unset,
        real_name: typing.Union[MetaOapg.properties.real_name, str, schemas.Unset] = schemas.unset,
        resend: typing.Union[MetaOapg.properties.resend, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AdminusersInviteUserToWorkspaceRequest':
        return super().__new__(
            cls,
            *args,
            channel_ids=channel_ids,
            team_id=team_id,
            email=email,
            custom_message=custom_message,
            guest_expiration_ts=guest_expiration_ts,
            is_restricted=is_restricted,
            is_ultra_restricted=is_ultra_restricted,
            real_name=real_name,
            resend=resend,
            _configuration=_configuration,
            **kwargs,
        )
