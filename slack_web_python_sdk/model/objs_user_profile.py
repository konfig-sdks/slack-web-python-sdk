# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Created by: https://api.slack.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slack_web_python_sdk import schemas  # noqa: F401


class ObjsUserProfile(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "status_emoji",
            "skype",
            "phone",
            "real_name_normalized",
            "real_name",
            "status_text",
            "avatar_hash",
            "display_name",
            "fields",
            "title",
            "display_name_normalized",
        }
        
        class properties:
            title = schemas.StrSchema
            avatar_hash = schemas.StrSchema
            display_name = schemas.StrSchema
            display_name_normalized = schemas.StrSchema
            
            
            class fields(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.DictSchema
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'fields':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            phone = schemas.StrSchema
            real_name = schemas.StrSchema
            real_name_normalized = schemas.StrSchema
            skype = schemas.StrSchema
            status_emoji = schemas.StrSchema
            status_text = schemas.StrSchema
            always_active = schemas.BoolSchema
        
            @staticmethod
            def api_app_id() -> typing.Type['DefsOptionalAppId']:
                return DefsOptionalAppId
        
            @staticmethod
            def bot_id() -> typing.Type['DefsBotId']:
                return DefsBotId
            
            
            class email(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'email'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'email':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class first_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'first_name':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class guest_expiration_ts(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'guest_expiration_ts':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class guest_invited_by(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'guest_invited_by':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class image_1024(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'uri'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'image_1024':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class image_192(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'uri'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'image_192':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class image_24(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'uri'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'image_24':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class image_32(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'uri'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'image_32':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class image_48(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'uri'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'image_48':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class image_512(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'uri'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'image_512':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class image_72(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'uri'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'image_72':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class image_original(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'uri'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'image_original':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            is_app_user = schemas.BoolSchema
            is_custom_image = schemas.BoolSchema
            
            
            class is_restricted(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'is_restricted':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class is_ultra_restricted(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'is_ultra_restricted':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            last_avatar_image_hash = schemas.StrSchema
            
            
            class last_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'last_name':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            memberships_count = schemas.IntSchema
            
            
            class name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'name':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            pronouns = schemas.StrSchema
            status_default_emoji = schemas.StrSchema
            status_default_text = schemas.StrSchema
            
            
            class status_default_text_canonical(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'status_default_text_canonical':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            status_expiration = schemas.IntSchema
            
            
            class status_text_canonical(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'status_text_canonical':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def team() -> typing.Type['DefsWorkspaceId']:
                return DefsWorkspaceId
            updated = schemas.IntSchema
            user_id = schemas.StrSchema
            
            
            class username(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'username':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "title": title,
                "avatar_hash": avatar_hash,
                "display_name": display_name,
                "display_name_normalized": display_name_normalized,
                "fields": fields,
                "phone": phone,
                "real_name": real_name,
                "real_name_normalized": real_name_normalized,
                "skype": skype,
                "status_emoji": status_emoji,
                "status_text": status_text,
                "always_active": always_active,
                "api_app_id": api_app_id,
                "bot_id": bot_id,
                "email": email,
                "first_name": first_name,
                "guest_expiration_ts": guest_expiration_ts,
                "guest_invited_by": guest_invited_by,
                "image_1024": image_1024,
                "image_192": image_192,
                "image_24": image_24,
                "image_32": image_32,
                "image_48": image_48,
                "image_512": image_512,
                "image_72": image_72,
                "image_original": image_original,
                "is_app_user": is_app_user,
                "is_custom_image": is_custom_image,
                "is_restricted": is_restricted,
                "is_ultra_restricted": is_ultra_restricted,
                "last_avatar_image_hash": last_avatar_image_hash,
                "last_name": last_name,
                "memberships_count": memberships_count,
                "name": name,
                "pronouns": pronouns,
                "status_default_emoji": status_default_emoji,
                "status_default_text": status_default_text,
                "status_default_text_canonical": status_default_text_canonical,
                "status_expiration": status_expiration,
                "status_text_canonical": status_text_canonical,
                "team": team,
                "updated": updated,
                "user_id": user_id,
                "username": username,
            }
    
    status_emoji: MetaOapg.properties.status_emoji
    skype: MetaOapg.properties.skype
    phone: MetaOapg.properties.phone
    real_name_normalized: MetaOapg.properties.real_name_normalized
    real_name: MetaOapg.properties.real_name
    status_text: MetaOapg.properties.status_text
    avatar_hash: MetaOapg.properties.avatar_hash
    display_name: MetaOapg.properties.display_name
    fields: MetaOapg.properties.fields
    title: MetaOapg.properties.title
    display_name_normalized: MetaOapg.properties.display_name_normalized
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["avatar_hash"]) -> MetaOapg.properties.avatar_hash: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["display_name"]) -> MetaOapg.properties.display_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["display_name_normalized"]) -> MetaOapg.properties.display_name_normalized: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fields"]) -> MetaOapg.properties.fields: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone"]) -> MetaOapg.properties.phone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["real_name"]) -> MetaOapg.properties.real_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["real_name_normalized"]) -> MetaOapg.properties.real_name_normalized: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skype"]) -> MetaOapg.properties.skype: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status_emoji"]) -> MetaOapg.properties.status_emoji: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status_text"]) -> MetaOapg.properties.status_text: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["always_active"]) -> MetaOapg.properties.always_active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["api_app_id"]) -> 'DefsOptionalAppId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bot_id"]) -> 'DefsBotId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["first_name"]) -> MetaOapg.properties.first_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["guest_expiration_ts"]) -> MetaOapg.properties.guest_expiration_ts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["guest_invited_by"]) -> MetaOapg.properties.guest_invited_by: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image_1024"]) -> MetaOapg.properties.image_1024: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image_192"]) -> MetaOapg.properties.image_192: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image_24"]) -> MetaOapg.properties.image_24: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image_32"]) -> MetaOapg.properties.image_32: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image_48"]) -> MetaOapg.properties.image_48: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image_512"]) -> MetaOapg.properties.image_512: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image_72"]) -> MetaOapg.properties.image_72: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image_original"]) -> MetaOapg.properties.image_original: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_app_user"]) -> MetaOapg.properties.is_app_user: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_custom_image"]) -> MetaOapg.properties.is_custom_image: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_restricted"]) -> MetaOapg.properties.is_restricted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_ultra_restricted"]) -> MetaOapg.properties.is_ultra_restricted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_avatar_image_hash"]) -> MetaOapg.properties.last_avatar_image_hash: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_name"]) -> MetaOapg.properties.last_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memberships_count"]) -> MetaOapg.properties.memberships_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pronouns"]) -> MetaOapg.properties.pronouns: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status_default_emoji"]) -> MetaOapg.properties.status_default_emoji: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status_default_text"]) -> MetaOapg.properties.status_default_text: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status_default_text_canonical"]) -> MetaOapg.properties.status_default_text_canonical: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status_expiration"]) -> MetaOapg.properties.status_expiration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status_text_canonical"]) -> MetaOapg.properties.status_text_canonical: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team"]) -> 'DefsWorkspaceId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated"]) -> MetaOapg.properties.updated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "avatar_hash", "display_name", "display_name_normalized", "fields", "phone", "real_name", "real_name_normalized", "skype", "status_emoji", "status_text", "always_active", "api_app_id", "bot_id", "email", "first_name", "guest_expiration_ts", "guest_invited_by", "image_1024", "image_192", "image_24", "image_32", "image_48", "image_512", "image_72", "image_original", "is_app_user", "is_custom_image", "is_restricted", "is_ultra_restricted", "last_avatar_image_hash", "last_name", "memberships_count", "name", "pronouns", "status_default_emoji", "status_default_text", "status_default_text_canonical", "status_expiration", "status_text_canonical", "team", "updated", "user_id", "username", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["avatar_hash"]) -> MetaOapg.properties.avatar_hash: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["display_name"]) -> MetaOapg.properties.display_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["display_name_normalized"]) -> MetaOapg.properties.display_name_normalized: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fields"]) -> MetaOapg.properties.fields: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phone"]) -> MetaOapg.properties.phone: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["real_name"]) -> MetaOapg.properties.real_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["real_name_normalized"]) -> MetaOapg.properties.real_name_normalized: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skype"]) -> MetaOapg.properties.skype: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status_emoji"]) -> MetaOapg.properties.status_emoji: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status_text"]) -> MetaOapg.properties.status_text: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["always_active"]) -> typing.Union[MetaOapg.properties.always_active, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["api_app_id"]) -> typing.Union['DefsOptionalAppId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bot_id"]) -> typing.Union['DefsBotId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["first_name"]) -> typing.Union[MetaOapg.properties.first_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["guest_expiration_ts"]) -> typing.Union[MetaOapg.properties.guest_expiration_ts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["guest_invited_by"]) -> typing.Union[MetaOapg.properties.guest_invited_by, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image_1024"]) -> typing.Union[MetaOapg.properties.image_1024, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image_192"]) -> typing.Union[MetaOapg.properties.image_192, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image_24"]) -> typing.Union[MetaOapg.properties.image_24, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image_32"]) -> typing.Union[MetaOapg.properties.image_32, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image_48"]) -> typing.Union[MetaOapg.properties.image_48, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image_512"]) -> typing.Union[MetaOapg.properties.image_512, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image_72"]) -> typing.Union[MetaOapg.properties.image_72, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image_original"]) -> typing.Union[MetaOapg.properties.image_original, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_app_user"]) -> typing.Union[MetaOapg.properties.is_app_user, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_custom_image"]) -> typing.Union[MetaOapg.properties.is_custom_image, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_restricted"]) -> typing.Union[MetaOapg.properties.is_restricted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_ultra_restricted"]) -> typing.Union[MetaOapg.properties.is_ultra_restricted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_avatar_image_hash"]) -> typing.Union[MetaOapg.properties.last_avatar_image_hash, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_name"]) -> typing.Union[MetaOapg.properties.last_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memberships_count"]) -> typing.Union[MetaOapg.properties.memberships_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pronouns"]) -> typing.Union[MetaOapg.properties.pronouns, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status_default_emoji"]) -> typing.Union[MetaOapg.properties.status_default_emoji, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status_default_text"]) -> typing.Union[MetaOapg.properties.status_default_text, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status_default_text_canonical"]) -> typing.Union[MetaOapg.properties.status_default_text_canonical, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status_expiration"]) -> typing.Union[MetaOapg.properties.status_expiration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status_text_canonical"]) -> typing.Union[MetaOapg.properties.status_text_canonical, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team"]) -> typing.Union['DefsWorkspaceId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated"]) -> typing.Union[MetaOapg.properties.updated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_id"]) -> typing.Union[MetaOapg.properties.user_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> typing.Union[MetaOapg.properties.username, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "avatar_hash", "display_name", "display_name_normalized", "fields", "phone", "real_name", "real_name_normalized", "skype", "status_emoji", "status_text", "always_active", "api_app_id", "bot_id", "email", "first_name", "guest_expiration_ts", "guest_invited_by", "image_1024", "image_192", "image_24", "image_32", "image_48", "image_512", "image_72", "image_original", "is_app_user", "is_custom_image", "is_restricted", "is_ultra_restricted", "last_avatar_image_hash", "last_name", "memberships_count", "name", "pronouns", "status_default_emoji", "status_default_text", "status_default_text_canonical", "status_expiration", "status_text_canonical", "team", "updated", "user_id", "username", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        status_emoji: typing.Union[MetaOapg.properties.status_emoji, str, ],
        skype: typing.Union[MetaOapg.properties.skype, str, ],
        phone: typing.Union[MetaOapg.properties.phone, str, ],
        real_name_normalized: typing.Union[MetaOapg.properties.real_name_normalized, str, ],
        real_name: typing.Union[MetaOapg.properties.real_name, str, ],
        status_text: typing.Union[MetaOapg.properties.status_text, str, ],
        avatar_hash: typing.Union[MetaOapg.properties.avatar_hash, str, ],
        display_name: typing.Union[MetaOapg.properties.display_name, str, ],
        fields: typing.Union[MetaOapg.properties.fields, list, tuple, None, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        display_name_normalized: typing.Union[MetaOapg.properties.display_name_normalized, str, ],
        always_active: typing.Union[MetaOapg.properties.always_active, bool, schemas.Unset] = schemas.unset,
        api_app_id: typing.Union['DefsOptionalAppId', schemas.Unset] = schemas.unset,
        bot_id: typing.Union['DefsBotId', schemas.Unset] = schemas.unset,
        email: typing.Union[MetaOapg.properties.email, None, str, schemas.Unset] = schemas.unset,
        first_name: typing.Union[MetaOapg.properties.first_name, None, str, schemas.Unset] = schemas.unset,
        guest_expiration_ts: typing.Union[MetaOapg.properties.guest_expiration_ts, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        guest_invited_by: typing.Union[MetaOapg.properties.guest_invited_by, None, str, schemas.Unset] = schemas.unset,
        image_1024: typing.Union[MetaOapg.properties.image_1024, None, str, schemas.Unset] = schemas.unset,
        image_192: typing.Union[MetaOapg.properties.image_192, None, str, schemas.Unset] = schemas.unset,
        image_24: typing.Union[MetaOapg.properties.image_24, None, str, schemas.Unset] = schemas.unset,
        image_32: typing.Union[MetaOapg.properties.image_32, None, str, schemas.Unset] = schemas.unset,
        image_48: typing.Union[MetaOapg.properties.image_48, None, str, schemas.Unset] = schemas.unset,
        image_512: typing.Union[MetaOapg.properties.image_512, None, str, schemas.Unset] = schemas.unset,
        image_72: typing.Union[MetaOapg.properties.image_72, None, str, schemas.Unset] = schemas.unset,
        image_original: typing.Union[MetaOapg.properties.image_original, None, str, schemas.Unset] = schemas.unset,
        is_app_user: typing.Union[MetaOapg.properties.is_app_user, bool, schemas.Unset] = schemas.unset,
        is_custom_image: typing.Union[MetaOapg.properties.is_custom_image, bool, schemas.Unset] = schemas.unset,
        is_restricted: typing.Union[MetaOapg.properties.is_restricted, None, bool, schemas.Unset] = schemas.unset,
        is_ultra_restricted: typing.Union[MetaOapg.properties.is_ultra_restricted, None, bool, schemas.Unset] = schemas.unset,
        last_avatar_image_hash: typing.Union[MetaOapg.properties.last_avatar_image_hash, str, schemas.Unset] = schemas.unset,
        last_name: typing.Union[MetaOapg.properties.last_name, None, str, schemas.Unset] = schemas.unset,
        memberships_count: typing.Union[MetaOapg.properties.memberships_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, None, str, schemas.Unset] = schemas.unset,
        pronouns: typing.Union[MetaOapg.properties.pronouns, str, schemas.Unset] = schemas.unset,
        status_default_emoji: typing.Union[MetaOapg.properties.status_default_emoji, str, schemas.Unset] = schemas.unset,
        status_default_text: typing.Union[MetaOapg.properties.status_default_text, str, schemas.Unset] = schemas.unset,
        status_default_text_canonical: typing.Union[MetaOapg.properties.status_default_text_canonical, None, str, schemas.Unset] = schemas.unset,
        status_expiration: typing.Union[MetaOapg.properties.status_expiration, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        status_text_canonical: typing.Union[MetaOapg.properties.status_text_canonical, None, str, schemas.Unset] = schemas.unset,
        team: typing.Union['DefsWorkspaceId', schemas.Unset] = schemas.unset,
        updated: typing.Union[MetaOapg.properties.updated, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        user_id: typing.Union[MetaOapg.properties.user_id, str, schemas.Unset] = schemas.unset,
        username: typing.Union[MetaOapg.properties.username, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ObjsUserProfile':
        return super().__new__(
            cls,
            *args,
            status_emoji=status_emoji,
            skype=skype,
            phone=phone,
            real_name_normalized=real_name_normalized,
            real_name=real_name,
            status_text=status_text,
            avatar_hash=avatar_hash,
            display_name=display_name,
            fields=fields,
            title=title,
            display_name_normalized=display_name_normalized,
            always_active=always_active,
            api_app_id=api_app_id,
            bot_id=bot_id,
            email=email,
            first_name=first_name,
            guest_expiration_ts=guest_expiration_ts,
            guest_invited_by=guest_invited_by,
            image_1024=image_1024,
            image_192=image_192,
            image_24=image_24,
            image_32=image_32,
            image_48=image_48,
            image_512=image_512,
            image_72=image_72,
            image_original=image_original,
            is_app_user=is_app_user,
            is_custom_image=is_custom_image,
            is_restricted=is_restricted,
            is_ultra_restricted=is_ultra_restricted,
            last_avatar_image_hash=last_avatar_image_hash,
            last_name=last_name,
            memberships_count=memberships_count,
            name=name,
            pronouns=pronouns,
            status_default_emoji=status_default_emoji,
            status_default_text=status_default_text,
            status_default_text_canonical=status_default_text_canonical,
            status_expiration=status_expiration,
            status_text_canonical=status_text_canonical,
            team=team,
            updated=updated,
            user_id=user_id,
            username=username,
            _configuration=_configuration,
            **kwargs,
        )

from slack_web_python_sdk.model.defs_bot_id import DefsBotId
from slack_web_python_sdk.model.defs_optional_app_id import DefsOptionalAppId
from slack_web_python_sdk.model.defs_workspace_id import DefsWorkspaceId
