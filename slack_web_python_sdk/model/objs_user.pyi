# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Created by: https://api.slack.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slack_web_python_sdk import schemas  # noqa: F401


class ObjsUser(
    schemas.ListSchema
):
    """NOTE:
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class items(
            schemas.ComposedSchema,
        ):
        
        
            class MetaOapg:
                
                
                class any_of_0(
                    schemas.DictSchema
                ):
                
                
                    class MetaOapg:
                        required = {
                            "is_app_user",
                            "profile",
                            "name",
                            "id",
                            "is_bot",
                            "updated",
                        }
                        
                        class properties:
                            
                            
                            class color(
                                schemas.StrSchema
                            ):
                                pass
                            deleted = schemas.BoolSchema
                        
                            @staticmethod
                            def enterprise_user() -> typing.Type['ObjsEnterpriseUser']:
                                return ObjsEnterpriseUser
                            has_2fa = schemas.BoolSchema
                        
                            @staticmethod
                            def id() -> typing.Type['DefsUserId']:
                                return DefsUserId
                            is_admin = schemas.BoolSchema
                            is_app_user = schemas.BoolSchema
                            is_bot = schemas.BoolSchema
                            is_external = schemas.BoolSchema
                            is_forgotten = schemas.BoolSchema
                            is_invited_user = schemas.BoolSchema
                            is_owner = schemas.BoolSchema
                            is_primary_owner = schemas.BoolSchema
                            is_restricted = schemas.BoolSchema
                            is_stranger = schemas.BoolSchema
                            is_ultra_restricted = schemas.BoolSchema
                            locale = schemas.StrSchema
                            name = schemas.StrSchema
                            presence = schemas.StrSchema
                        
                            @staticmethod
                            def profile() -> typing.Type['ObjsUserProfile']:
                                return ObjsUserProfile
                            real_name = schemas.StrSchema
                        
                            @staticmethod
                            def team() -> typing.Type['DefsWorkspaceId']:
                                return DefsWorkspaceId
                        
                            @staticmethod
                            def team_id() -> typing.Type['DefsWorkspaceId']:
                                return DefsWorkspaceId
                            
                            
                            class team_profile(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    required = {
                                        "fields",
                                    }
                                    
                                    class properties:
                                        
                                        
                                        class fields(
                                            schemas.ListSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                @staticmethod
                                                def items() -> typing.Type['ObjsTeamProfileField']:
                                                    return ObjsTeamProfileField
                                        
                                            def __new__(
                                                cls,
                                                arg: typing.Union[typing.Tuple['ObjsTeamProfileField'], typing.List['ObjsTeamProfileField']],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                            ) -> 'fields':
                                                return super().__new__(
                                                    cls,
                                                    arg,
                                                    _configuration=_configuration,
                                                )
                                        
                                            def __getitem__(self, i: int) -> 'ObjsTeamProfileField':
                                                return super().__getitem__(i)
                                        __annotations__ = {
                                            "fields": fields,
                                        }
                                
                                fields: MetaOapg.properties.fields
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["fields"]) -> MetaOapg.properties.fields: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["fields", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["fields"]) -> MetaOapg.properties.fields: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["fields", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                    fields: typing.Union[MetaOapg.properties.fields, list, tuple, ],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'team_profile':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        fields=fields,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                            two_factor_type = schemas.StrSchema
                            
                            
                            class tz(
                                schemas.ListSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    
                                    class items(
                                        schemas.ComposedSchema,
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            any_of_0 = schemas.AnyTypeSchema
                                            any_of_1 = schemas.StrSchema
                                            
                                            @classmethod
                                            @functools.lru_cache()
                                            def any_of(cls):
                                                # we need this here to make our import statements work
                                                # we must store _composed_schemas in here so the code is only run
                                                # when we invoke this method. If we kept this at the class
                                                # level we would get an error because the class level
                                                # code would be run when this module is imported, and these composed
                                                # classes don't exist yet because their module has not finished
                                                # loading
                                                return [
                                                    cls.any_of_0,
                                                    cls.any_of_1,
                                                ]
                                    
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'items':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                            
                                def __new__(
                                    cls,
                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                ) -> 'tz':
                                    return super().__new__(
                                        cls,
                                        arg,
                                        _configuration=_configuration,
                                    )
                            
                                def __getitem__(self, i: int) -> MetaOapg.items:
                                    return super().__getitem__(i)
                            tz_label = schemas.StrSchema
                            tz_offset = schemas.NumberSchema
                            updated = schemas.NumberSchema
                            __annotations__ = {
                                "color": color,
                                "deleted": deleted,
                                "enterprise_user": enterprise_user,
                                "has_2fa": has_2fa,
                                "id": id,
                                "is_admin": is_admin,
                                "is_app_user": is_app_user,
                                "is_bot": is_bot,
                                "is_external": is_external,
                                "is_forgotten": is_forgotten,
                                "is_invited_user": is_invited_user,
                                "is_owner": is_owner,
                                "is_primary_owner": is_primary_owner,
                                "is_restricted": is_restricted,
                                "is_stranger": is_stranger,
                                "is_ultra_restricted": is_ultra_restricted,
                                "locale": locale,
                                "name": name,
                                "presence": presence,
                                "profile": profile,
                                "real_name": real_name,
                                "team": team,
                                "team_id": team_id,
                                "team_profile": team_profile,
                                "two_factor_type": two_factor_type,
                                "tz": tz,
                                "tz_label": tz_label,
                                "tz_offset": tz_offset,
                                "updated": updated,
                            }
                    
                    is_app_user: MetaOapg.properties.is_app_user
                    profile: 'ObjsUserProfile'
                    name: MetaOapg.properties.name
                    id: 'DefsUserId'
                    is_bot: MetaOapg.properties.is_bot
                    updated: MetaOapg.properties.updated
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["deleted"]) -> MetaOapg.properties.deleted: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["enterprise_user"]) -> 'ObjsEnterpriseUser': ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["has_2fa"]) -> MetaOapg.properties.has_2fa: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'DefsUserId': ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_admin"]) -> MetaOapg.properties.is_admin: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_app_user"]) -> MetaOapg.properties.is_app_user: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_bot"]) -> MetaOapg.properties.is_bot: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_external"]) -> MetaOapg.properties.is_external: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_forgotten"]) -> MetaOapg.properties.is_forgotten: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_invited_user"]) -> MetaOapg.properties.is_invited_user: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_owner"]) -> MetaOapg.properties.is_owner: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_primary_owner"]) -> MetaOapg.properties.is_primary_owner: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_restricted"]) -> MetaOapg.properties.is_restricted: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_stranger"]) -> MetaOapg.properties.is_stranger: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_ultra_restricted"]) -> MetaOapg.properties.is_ultra_restricted: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["locale"]) -> MetaOapg.properties.locale: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["presence"]) -> MetaOapg.properties.presence: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["profile"]) -> 'ObjsUserProfile': ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["real_name"]) -> MetaOapg.properties.real_name: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["team"]) -> 'DefsWorkspaceId': ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["team_id"]) -> 'DefsWorkspaceId': ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["team_profile"]) -> MetaOapg.properties.team_profile: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["two_factor_type"]) -> MetaOapg.properties.two_factor_type: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["tz"]) -> MetaOapg.properties.tz: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["tz_label"]) -> MetaOapg.properties.tz_label: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["tz_offset"]) -> MetaOapg.properties.tz_offset: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["updated"]) -> MetaOapg.properties.updated: ...
                    
                    @typing.overload
                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                    
                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["color", "deleted", "enterprise_user", "has_2fa", "id", "is_admin", "is_app_user", "is_bot", "is_external", "is_forgotten", "is_invited_user", "is_owner", "is_primary_owner", "is_restricted", "is_stranger", "is_ultra_restricted", "locale", "name", "presence", "profile", "real_name", "team", "team_id", "team_profile", "two_factor_type", "tz", "tz_label", "tz_offset", "updated", ], str]):
                        # dict_instance[name] accessor
                        return super().__getitem__(name)
                    
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["color"]) -> typing.Union[MetaOapg.properties.color, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["deleted"]) -> typing.Union[MetaOapg.properties.deleted, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["enterprise_user"]) -> typing.Union['ObjsEnterpriseUser', schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["has_2fa"]) -> typing.Union[MetaOapg.properties.has_2fa, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> 'DefsUserId': ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_admin"]) -> typing.Union[MetaOapg.properties.is_admin, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_app_user"]) -> MetaOapg.properties.is_app_user: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_bot"]) -> MetaOapg.properties.is_bot: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_external"]) -> typing.Union[MetaOapg.properties.is_external, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_forgotten"]) -> typing.Union[MetaOapg.properties.is_forgotten, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_invited_user"]) -> typing.Union[MetaOapg.properties.is_invited_user, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_owner"]) -> typing.Union[MetaOapg.properties.is_owner, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_primary_owner"]) -> typing.Union[MetaOapg.properties.is_primary_owner, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_restricted"]) -> typing.Union[MetaOapg.properties.is_restricted, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_stranger"]) -> typing.Union[MetaOapg.properties.is_stranger, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_ultra_restricted"]) -> typing.Union[MetaOapg.properties.is_ultra_restricted, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["locale"]) -> typing.Union[MetaOapg.properties.locale, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["presence"]) -> typing.Union[MetaOapg.properties.presence, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["profile"]) -> 'ObjsUserProfile': ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["real_name"]) -> typing.Union[MetaOapg.properties.real_name, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["team"]) -> typing.Union['DefsWorkspaceId', schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["team_id"]) -> typing.Union['DefsWorkspaceId', schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["team_profile"]) -> typing.Union[MetaOapg.properties.team_profile, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["two_factor_type"]) -> typing.Union[MetaOapg.properties.two_factor_type, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["tz"]) -> typing.Union[MetaOapg.properties.tz, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["tz_label"]) -> typing.Union[MetaOapg.properties.tz_label, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["tz_offset"]) -> typing.Union[MetaOapg.properties.tz_offset, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["updated"]) -> MetaOapg.properties.updated: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                    
                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["color", "deleted", "enterprise_user", "has_2fa", "id", "is_admin", "is_app_user", "is_bot", "is_external", "is_forgotten", "is_invited_user", "is_owner", "is_primary_owner", "is_restricted", "is_stranger", "is_ultra_restricted", "locale", "name", "presence", "profile", "real_name", "team", "team_id", "team_profile", "two_factor_type", "tz", "tz_label", "tz_offset", "updated", ], str]):
                        return super().get_item_oapg(name)
                    
                
                    def __new__(
                        cls,
                        *args: typing.Union[dict, frozendict.frozendict, ],
                        is_app_user: typing.Union[MetaOapg.properties.is_app_user, bool, ],
                        profile: 'ObjsUserProfile',
                        name: typing.Union[MetaOapg.properties.name, str, ],
                        id: 'DefsUserId',
                        is_bot: typing.Union[MetaOapg.properties.is_bot, bool, ],
                        updated: typing.Union[MetaOapg.properties.updated, decimal.Decimal, int, float, ],
                        color: typing.Union[MetaOapg.properties.color, str, schemas.Unset] = schemas.unset,
                        deleted: typing.Union[MetaOapg.properties.deleted, bool, schemas.Unset] = schemas.unset,
                        enterprise_user: typing.Union['ObjsEnterpriseUser', schemas.Unset] = schemas.unset,
                        has_2fa: typing.Union[MetaOapg.properties.has_2fa, bool, schemas.Unset] = schemas.unset,
                        is_admin: typing.Union[MetaOapg.properties.is_admin, bool, schemas.Unset] = schemas.unset,
                        is_external: typing.Union[MetaOapg.properties.is_external, bool, schemas.Unset] = schemas.unset,
                        is_forgotten: typing.Union[MetaOapg.properties.is_forgotten, bool, schemas.Unset] = schemas.unset,
                        is_invited_user: typing.Union[MetaOapg.properties.is_invited_user, bool, schemas.Unset] = schemas.unset,
                        is_owner: typing.Union[MetaOapg.properties.is_owner, bool, schemas.Unset] = schemas.unset,
                        is_primary_owner: typing.Union[MetaOapg.properties.is_primary_owner, bool, schemas.Unset] = schemas.unset,
                        is_restricted: typing.Union[MetaOapg.properties.is_restricted, bool, schemas.Unset] = schemas.unset,
                        is_stranger: typing.Union[MetaOapg.properties.is_stranger, bool, schemas.Unset] = schemas.unset,
                        is_ultra_restricted: typing.Union[MetaOapg.properties.is_ultra_restricted, bool, schemas.Unset] = schemas.unset,
                        locale: typing.Union[MetaOapg.properties.locale, str, schemas.Unset] = schemas.unset,
                        presence: typing.Union[MetaOapg.properties.presence, str, schemas.Unset] = schemas.unset,
                        real_name: typing.Union[MetaOapg.properties.real_name, str, schemas.Unset] = schemas.unset,
                        team: typing.Union['DefsWorkspaceId', schemas.Unset] = schemas.unset,
                        team_id: typing.Union['DefsWorkspaceId', schemas.Unset] = schemas.unset,
                        team_profile: typing.Union[MetaOapg.properties.team_profile, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                        two_factor_type: typing.Union[MetaOapg.properties.two_factor_type, str, schemas.Unset] = schemas.unset,
                        tz: typing.Union[MetaOapg.properties.tz, list, tuple, schemas.Unset] = schemas.unset,
                        tz_label: typing.Union[MetaOapg.properties.tz_label, str, schemas.Unset] = schemas.unset,
                        tz_offset: typing.Union[MetaOapg.properties.tz_offset, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                        _configuration: typing.Optional[schemas.Configuration] = None,
                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                    ) -> 'any_of_0':
                        return super().__new__(
                            cls,
                            *args,
                            is_app_user=is_app_user,
                            profile=profile,
                            name=name,
                            id=id,
                            is_bot=is_bot,
                            updated=updated,
                            color=color,
                            deleted=deleted,
                            enterprise_user=enterprise_user,
                            has_2fa=has_2fa,
                            is_admin=is_admin,
                            is_external=is_external,
                            is_forgotten=is_forgotten,
                            is_invited_user=is_invited_user,
                            is_owner=is_owner,
                            is_primary_owner=is_primary_owner,
                            is_restricted=is_restricted,
                            is_stranger=is_stranger,
                            is_ultra_restricted=is_ultra_restricted,
                            locale=locale,
                            presence=presence,
                            real_name=real_name,
                            team=team,
                            team_id=team_id,
                            team_profile=team_profile,
                            two_factor_type=two_factor_type,
                            tz=tz,
                            tz_label=tz_label,
                            tz_offset=tz_offset,
                            _configuration=_configuration,
                            **kwargs,
                        )
                
                
                class any_of_1(
                    schemas.DictSchema
                ):
                
                
                    class MetaOapg:
                        required = {
                            "is_app_user",
                            "profile",
                            "name",
                            "id",
                            "is_bot",
                            "updated",
                        }
                        
                        class properties:
                            
                            
                            class color(
                                schemas.StrSchema
                            ):
                                pass
                            deleted = schemas.BoolSchema
                        
                            @staticmethod
                            def enterprise_user() -> typing.Type['ObjsEnterpriseUser']:
                                return ObjsEnterpriseUser
                            has_2fa = schemas.BoolSchema
                        
                            @staticmethod
                            def id() -> typing.Type['DefsUserId']:
                                return DefsUserId
                            is_admin = schemas.BoolSchema
                            is_app_user = schemas.BoolSchema
                            is_bot = schemas.BoolSchema
                            is_external = schemas.BoolSchema
                            is_forgotten = schemas.BoolSchema
                            is_owner = schemas.BoolSchema
                            is_primary_owner = schemas.BoolSchema
                            is_restricted = schemas.BoolSchema
                            is_stranger = schemas.BoolSchema
                            is_ultra_restricted = schemas.BoolSchema
                            locale = schemas.StrSchema
                            name = schemas.StrSchema
                            presence = schemas.StrSchema
                        
                            @staticmethod
                            def profile() -> typing.Type['ObjsUserProfile']:
                                return ObjsUserProfile
                            real_name = schemas.StrSchema
                        
                            @staticmethod
                            def team_id() -> typing.Type['DefsWorkspaceId']:
                                return DefsWorkspaceId
                            
                            
                            class team_profile(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    required = {
                                        "fields",
                                    }
                                    
                                    class properties:
                                        
                                        
                                        class fields(
                                            schemas.ListSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                @staticmethod
                                                def items() -> typing.Type['ObjsTeamProfileField']:
                                                    return ObjsTeamProfileField
                                        
                                            def __new__(
                                                cls,
                                                arg: typing.Union[typing.Tuple['ObjsTeamProfileField'], typing.List['ObjsTeamProfileField']],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                            ) -> 'fields':
                                                return super().__new__(
                                                    cls,
                                                    arg,
                                                    _configuration=_configuration,
                                                )
                                        
                                            def __getitem__(self, i: int) -> 'ObjsTeamProfileField':
                                                return super().__getitem__(i)
                                        __annotations__ = {
                                            "fields": fields,
                                        }
                                
                                fields: MetaOapg.properties.fields
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["fields"]) -> MetaOapg.properties.fields: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["fields", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["fields"]) -> MetaOapg.properties.fields: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["fields", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                    fields: typing.Union[MetaOapg.properties.fields, list, tuple, ],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'team_profile':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        fields=fields,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                            
                            
                            class teams(
                                schemas.ListSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    @staticmethod
                                    def items() -> typing.Type['DefsWorkspaceId']:
                                        return DefsWorkspaceId
                            
                                def __new__(
                                    cls,
                                    arg: typing.Union[typing.Tuple['DefsWorkspaceId'], typing.List['DefsWorkspaceId']],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                ) -> 'teams':
                                    return super().__new__(
                                        cls,
                                        arg,
                                        _configuration=_configuration,
                                    )
                            
                                def __getitem__(self, i: int) -> 'DefsWorkspaceId':
                                    return super().__getitem__(i)
                            two_factor_type = schemas.StrSchema
                            
                            
                            class tz(
                                schemas.ListSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    
                                    class items(
                                        schemas.ComposedSchema,
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            any_of_0 = schemas.AnyTypeSchema
                                            any_of_1 = schemas.StrSchema
                                            
                                            @classmethod
                                            @functools.lru_cache()
                                            def any_of(cls):
                                                # we need this here to make our import statements work
                                                # we must store _composed_schemas in here so the code is only run
                                                # when we invoke this method. If we kept this at the class
                                                # level we would get an error because the class level
                                                # code would be run when this module is imported, and these composed
                                                # classes don't exist yet because their module has not finished
                                                # loading
                                                return [
                                                    cls.any_of_0,
                                                    cls.any_of_1,
                                                ]
                                    
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'items':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                            
                                def __new__(
                                    cls,
                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                ) -> 'tz':
                                    return super().__new__(
                                        cls,
                                        arg,
                                        _configuration=_configuration,
                                    )
                            
                                def __getitem__(self, i: int) -> MetaOapg.items:
                                    return super().__getitem__(i)
                            tz_label = schemas.StrSchema
                            tz_offset = schemas.NumberSchema
                            updated = schemas.NumberSchema
                            __annotations__ = {
                                "color": color,
                                "deleted": deleted,
                                "enterprise_user": enterprise_user,
                                "has_2fa": has_2fa,
                                "id": id,
                                "is_admin": is_admin,
                                "is_app_user": is_app_user,
                                "is_bot": is_bot,
                                "is_external": is_external,
                                "is_forgotten": is_forgotten,
                                "is_owner": is_owner,
                                "is_primary_owner": is_primary_owner,
                                "is_restricted": is_restricted,
                                "is_stranger": is_stranger,
                                "is_ultra_restricted": is_ultra_restricted,
                                "locale": locale,
                                "name": name,
                                "presence": presence,
                                "profile": profile,
                                "real_name": real_name,
                                "team_id": team_id,
                                "team_profile": team_profile,
                                "teams": teams,
                                "two_factor_type": two_factor_type,
                                "tz": tz,
                                "tz_label": tz_label,
                                "tz_offset": tz_offset,
                                "updated": updated,
                            }
                    
                    is_app_user: MetaOapg.properties.is_app_user
                    profile: 'ObjsUserProfile'
                    name: MetaOapg.properties.name
                    id: 'DefsUserId'
                    is_bot: MetaOapg.properties.is_bot
                    updated: MetaOapg.properties.updated
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["deleted"]) -> MetaOapg.properties.deleted: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["enterprise_user"]) -> 'ObjsEnterpriseUser': ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["has_2fa"]) -> MetaOapg.properties.has_2fa: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'DefsUserId': ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_admin"]) -> MetaOapg.properties.is_admin: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_app_user"]) -> MetaOapg.properties.is_app_user: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_bot"]) -> MetaOapg.properties.is_bot: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_external"]) -> MetaOapg.properties.is_external: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_forgotten"]) -> MetaOapg.properties.is_forgotten: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_owner"]) -> MetaOapg.properties.is_owner: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_primary_owner"]) -> MetaOapg.properties.is_primary_owner: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_restricted"]) -> MetaOapg.properties.is_restricted: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_stranger"]) -> MetaOapg.properties.is_stranger: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["is_ultra_restricted"]) -> MetaOapg.properties.is_ultra_restricted: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["locale"]) -> MetaOapg.properties.locale: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["presence"]) -> MetaOapg.properties.presence: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["profile"]) -> 'ObjsUserProfile': ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["real_name"]) -> MetaOapg.properties.real_name: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["team_id"]) -> 'DefsWorkspaceId': ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["team_profile"]) -> MetaOapg.properties.team_profile: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["teams"]) -> MetaOapg.properties.teams: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["two_factor_type"]) -> MetaOapg.properties.two_factor_type: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["tz"]) -> MetaOapg.properties.tz: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["tz_label"]) -> MetaOapg.properties.tz_label: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["tz_offset"]) -> MetaOapg.properties.tz_offset: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["updated"]) -> MetaOapg.properties.updated: ...
                    
                    @typing.overload
                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                    
                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["color", "deleted", "enterprise_user", "has_2fa", "id", "is_admin", "is_app_user", "is_bot", "is_external", "is_forgotten", "is_owner", "is_primary_owner", "is_restricted", "is_stranger", "is_ultra_restricted", "locale", "name", "presence", "profile", "real_name", "team_id", "team_profile", "teams", "two_factor_type", "tz", "tz_label", "tz_offset", "updated", ], str]):
                        # dict_instance[name] accessor
                        return super().__getitem__(name)
                    
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["color"]) -> typing.Union[MetaOapg.properties.color, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["deleted"]) -> typing.Union[MetaOapg.properties.deleted, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["enterprise_user"]) -> typing.Union['ObjsEnterpriseUser', schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["has_2fa"]) -> typing.Union[MetaOapg.properties.has_2fa, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> 'DefsUserId': ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_admin"]) -> typing.Union[MetaOapg.properties.is_admin, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_app_user"]) -> MetaOapg.properties.is_app_user: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_bot"]) -> MetaOapg.properties.is_bot: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_external"]) -> typing.Union[MetaOapg.properties.is_external, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_forgotten"]) -> typing.Union[MetaOapg.properties.is_forgotten, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_owner"]) -> typing.Union[MetaOapg.properties.is_owner, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_primary_owner"]) -> typing.Union[MetaOapg.properties.is_primary_owner, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_restricted"]) -> typing.Union[MetaOapg.properties.is_restricted, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_stranger"]) -> typing.Union[MetaOapg.properties.is_stranger, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["is_ultra_restricted"]) -> typing.Union[MetaOapg.properties.is_ultra_restricted, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["locale"]) -> typing.Union[MetaOapg.properties.locale, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["presence"]) -> typing.Union[MetaOapg.properties.presence, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["profile"]) -> 'ObjsUserProfile': ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["real_name"]) -> typing.Union[MetaOapg.properties.real_name, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["team_id"]) -> typing.Union['DefsWorkspaceId', schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["team_profile"]) -> typing.Union[MetaOapg.properties.team_profile, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["teams"]) -> typing.Union[MetaOapg.properties.teams, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["two_factor_type"]) -> typing.Union[MetaOapg.properties.two_factor_type, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["tz"]) -> typing.Union[MetaOapg.properties.tz, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["tz_label"]) -> typing.Union[MetaOapg.properties.tz_label, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["tz_offset"]) -> typing.Union[MetaOapg.properties.tz_offset, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["updated"]) -> MetaOapg.properties.updated: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                    
                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["color", "deleted", "enterprise_user", "has_2fa", "id", "is_admin", "is_app_user", "is_bot", "is_external", "is_forgotten", "is_owner", "is_primary_owner", "is_restricted", "is_stranger", "is_ultra_restricted", "locale", "name", "presence", "profile", "real_name", "team_id", "team_profile", "teams", "two_factor_type", "tz", "tz_label", "tz_offset", "updated", ], str]):
                        return super().get_item_oapg(name)
                    
                
                    def __new__(
                        cls,
                        *args: typing.Union[dict, frozendict.frozendict, ],
                        is_app_user: typing.Union[MetaOapg.properties.is_app_user, bool, ],
                        profile: 'ObjsUserProfile',
                        name: typing.Union[MetaOapg.properties.name, str, ],
                        id: 'DefsUserId',
                        is_bot: typing.Union[MetaOapg.properties.is_bot, bool, ],
                        updated: typing.Union[MetaOapg.properties.updated, decimal.Decimal, int, float, ],
                        color: typing.Union[MetaOapg.properties.color, str, schemas.Unset] = schemas.unset,
                        deleted: typing.Union[MetaOapg.properties.deleted, bool, schemas.Unset] = schemas.unset,
                        enterprise_user: typing.Union['ObjsEnterpriseUser', schemas.Unset] = schemas.unset,
                        has_2fa: typing.Union[MetaOapg.properties.has_2fa, bool, schemas.Unset] = schemas.unset,
                        is_admin: typing.Union[MetaOapg.properties.is_admin, bool, schemas.Unset] = schemas.unset,
                        is_external: typing.Union[MetaOapg.properties.is_external, bool, schemas.Unset] = schemas.unset,
                        is_forgotten: typing.Union[MetaOapg.properties.is_forgotten, bool, schemas.Unset] = schemas.unset,
                        is_owner: typing.Union[MetaOapg.properties.is_owner, bool, schemas.Unset] = schemas.unset,
                        is_primary_owner: typing.Union[MetaOapg.properties.is_primary_owner, bool, schemas.Unset] = schemas.unset,
                        is_restricted: typing.Union[MetaOapg.properties.is_restricted, bool, schemas.Unset] = schemas.unset,
                        is_stranger: typing.Union[MetaOapg.properties.is_stranger, bool, schemas.Unset] = schemas.unset,
                        is_ultra_restricted: typing.Union[MetaOapg.properties.is_ultra_restricted, bool, schemas.Unset] = schemas.unset,
                        locale: typing.Union[MetaOapg.properties.locale, str, schemas.Unset] = schemas.unset,
                        presence: typing.Union[MetaOapg.properties.presence, str, schemas.Unset] = schemas.unset,
                        real_name: typing.Union[MetaOapg.properties.real_name, str, schemas.Unset] = schemas.unset,
                        team_id: typing.Union['DefsWorkspaceId', schemas.Unset] = schemas.unset,
                        team_profile: typing.Union[MetaOapg.properties.team_profile, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                        teams: typing.Union[MetaOapg.properties.teams, list, tuple, schemas.Unset] = schemas.unset,
                        two_factor_type: typing.Union[MetaOapg.properties.two_factor_type, str, schemas.Unset] = schemas.unset,
                        tz: typing.Union[MetaOapg.properties.tz, list, tuple, schemas.Unset] = schemas.unset,
                        tz_label: typing.Union[MetaOapg.properties.tz_label, str, schemas.Unset] = schemas.unset,
                        tz_offset: typing.Union[MetaOapg.properties.tz_offset, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                        _configuration: typing.Optional[schemas.Configuration] = None,
                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                    ) -> 'any_of_1':
                        return super().__new__(
                            cls,
                            *args,
                            is_app_user=is_app_user,
                            profile=profile,
                            name=name,
                            id=id,
                            is_bot=is_bot,
                            updated=updated,
                            color=color,
                            deleted=deleted,
                            enterprise_user=enterprise_user,
                            has_2fa=has_2fa,
                            is_admin=is_admin,
                            is_external=is_external,
                            is_forgotten=is_forgotten,
                            is_owner=is_owner,
                            is_primary_owner=is_primary_owner,
                            is_restricted=is_restricted,
                            is_stranger=is_stranger,
                            is_ultra_restricted=is_ultra_restricted,
                            locale=locale,
                            presence=presence,
                            real_name=real_name,
                            team_id=team_id,
                            team_profile=team_profile,
                            teams=teams,
                            two_factor_type=two_factor_type,
                            tz=tz,
                            tz_label=tz_label,
                            tz_offset=tz_offset,
                            _configuration=_configuration,
                            **kwargs,
                        )
                
                @classmethod
                @functools.lru_cache()
                def any_of(cls):
                    # we need this here to make our import statements work
                    # we must store _composed_schemas in here so the code is only run
                    # when we invoke this method. If we kept this at the class
                    # level we would get an error because the class level
                    # code would be run when this module is imported, and these composed
                    # classes don't exist yet because their module has not finished
                    # loading
                    return [
                        cls.any_of_0,
                        cls.any_of_1,
                    ]
        
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'items':
                return super().__new__(
                    cls,
                    *args,
                    _configuration=_configuration,
                    **kwargs,
                )

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ObjsUser':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)

from slack_web_python_sdk.model.defs_user_id import DefsUserId
from slack_web_python_sdk.model.defs_workspace_id import DefsWorkspaceId
from slack_web_python_sdk.model.objs_enterprise_user import ObjsEnterpriseUser
from slack_web_python_sdk.model.objs_team_profile_field import ObjsTeamProfileField
from slack_web_python_sdk.model.objs_user_profile import ObjsUserProfile
