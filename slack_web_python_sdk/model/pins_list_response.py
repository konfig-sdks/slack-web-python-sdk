# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Created by: https://api.slack.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slack_web_python_sdk import schemas  # noqa: F401


class PinsListResponse(
    schemas.ListSchema
):
    """NOTE:
    This class is auto generated by Konfig (https://konfigthis.com)

    Schema for successful response from pins.list method
    """


    class MetaOapg:
        
        
        class items(
            schemas.ComposedSchema,
        ):
        
        
            class MetaOapg:
                
                
                class any_of_0(
                    schemas.DictSchema
                ):
                
                
                    class MetaOapg:
                        required = {
                            "ok",
                            "items",
                        }
                        
                        class properties:
                            
                            
                            class items(
                                schemas.ListSchema
                            ):
                            
                            
                                class MetaOapg:
                                    unique_items = True
                                    
                                    
                                    class items(
                                        schemas.ComposedSchema,
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            
                                            class any_of_0(
                                                schemas.DictSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    class properties:
                                                        created = schemas.IntSchema
                                                    
                                                        @staticmethod
                                                        def created_by() -> typing.Type['DefsUserId']:
                                                            return DefsUserId
                                                    
                                                        @staticmethod
                                                        def file() -> typing.Type['ObjsFile']:
                                                            return ObjsFile
                                                        
                                                        
                                                        class type(
                                                            schemas.EnumBase,
                                                            schemas.StrSchema
                                                        ):
                                                        
                                                        
                                                            class MetaOapg:
                                                                enum_value_to_name = {
                                                                    "file": "FILE",
                                                                }
                                                            
                                                            @schemas.classproperty
                                                            def FILE(cls):
                                                                return cls("file")
                                                        __annotations__ = {
                                                            "created": created,
                                                            "created_by": created_by,
                                                            "file": file,
                                                            "type": type,
                                                        }
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["created_by"]) -> 'DefsUserId': ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["file"]) -> 'ObjsFile': ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                
                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["created", "created_by", "file", "type", ], str]):
                                                    # dict_instance[name] accessor
                                                    return super().__getitem__(name)
                                                
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["created_by"]) -> typing.Union['DefsUserId', schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["file"]) -> typing.Union['ObjsFile', schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                
                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["created", "created_by", "file", "type", ], str]):
                                                    return super().get_item_oapg(name)
                                                
                                            
                                                def __new__(
                                                    cls,
                                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                                    created: typing.Union[MetaOapg.properties.created, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                    created_by: typing.Union['DefsUserId', schemas.Unset] = schemas.unset,
                                                    file: typing.Union['ObjsFile', schemas.Unset] = schemas.unset,
                                                    type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                ) -> 'any_of_0':
                                                    return super().__new__(
                                                        cls,
                                                        *args,
                                                        created=created,
                                                        created_by=created_by,
                                                        file=file,
                                                        type=type,
                                                        _configuration=_configuration,
                                                        **kwargs,
                                                    )
                                            
                                            
                                            class any_of_1(
                                                schemas.DictSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    class properties:
                                                    
                                                        @staticmethod
                                                        def channel() -> typing.Type['DefsChannel']:
                                                            return DefsChannel
                                                        created = schemas.IntSchema
                                                    
                                                        @staticmethod
                                                        def created_by() -> typing.Type['DefsUserId']:
                                                            return DefsUserId
                                                    
                                                        @staticmethod
                                                        def message() -> typing.Type['ObjsMessage']:
                                                            return ObjsMessage
                                                        
                                                        
                                                        class type(
                                                            schemas.EnumBase,
                                                            schemas.StrSchema
                                                        ):
                                                        
                                                        
                                                            class MetaOapg:
                                                                enum_value_to_name = {
                                                                    "message": "MESSAGE",
                                                                }
                                                            
                                                            @schemas.classproperty
                                                            def MESSAGE(cls):
                                                                return cls("message")
                                                        __annotations__ = {
                                                            "channel": channel,
                                                            "created": created,
                                                            "created_by": created_by,
                                                            "message": message,
                                                            "type": type,
                                                        }
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["channel"]) -> 'DefsChannel': ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["created_by"]) -> 'DefsUserId': ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["message"]) -> 'ObjsMessage': ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                
                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["channel", "created", "created_by", "message", "type", ], str]):
                                                    # dict_instance[name] accessor
                                                    return super().__getitem__(name)
                                                
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["channel"]) -> typing.Union['DefsChannel', schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["created_by"]) -> typing.Union['DefsUserId', schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> typing.Union['ObjsMessage', schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                
                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["channel", "created", "created_by", "message", "type", ], str]):
                                                    return super().get_item_oapg(name)
                                                
                                            
                                                def __new__(
                                                    cls,
                                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                                    channel: typing.Union['DefsChannel', schemas.Unset] = schemas.unset,
                                                    created: typing.Union[MetaOapg.properties.created, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                    created_by: typing.Union['DefsUserId', schemas.Unset] = schemas.unset,
                                                    message: typing.Union['ObjsMessage', schemas.Unset] = schemas.unset,
                                                    type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                ) -> 'any_of_1':
                                                    return super().__new__(
                                                        cls,
                                                        *args,
                                                        channel=channel,
                                                        created=created,
                                                        created_by=created_by,
                                                        message=message,
                                                        type=type,
                                                        _configuration=_configuration,
                                                        **kwargs,
                                                    )
                                            
                                            @classmethod
                                            @functools.lru_cache()
                                            def any_of(cls):
                                                # we need this here to make our import statements work
                                                # we must store _composed_schemas in here so the code is only run
                                                # when we invoke this method. If we kept this at the class
                                                # level we would get an error because the class level
                                                # code would be run when this module is imported, and these composed
                                                # classes don't exist yet because their module has not finished
                                                # loading
                                                return [
                                                    cls.any_of_0,
                                                    cls.any_of_1,
                                                ]
                                    
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'items':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                            
                                def __new__(
                                    cls,
                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                ) -> 'items':
                                    return super().__new__(
                                        cls,
                                        arg,
                                        _configuration=_configuration,
                                    )
                            
                                def __getitem__(self, i: int) -> MetaOapg.items:
                                    return super().__getitem__(i)
                        
                            @staticmethod
                            def ok() -> typing.Type['DefsOkTrue']:
                                return DefsOkTrue
                            __annotations__ = {
                                "items": items,
                                "ok": ok,
                            }
                    
                    ok: 'DefsOkTrue'
                    items: MetaOapg.properties.items
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["items"]) -> MetaOapg.properties.items: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkTrue': ...
                    
                    @typing.overload
                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                    
                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["items", "ok", ], str]):
                        # dict_instance[name] accessor
                        return super().__getitem__(name)
                    
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["items"]) -> MetaOapg.properties.items: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkTrue': ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                    
                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["items", "ok", ], str]):
                        return super().get_item_oapg(name)
                    
                
                    def __new__(
                        cls,
                        *args: typing.Union[dict, frozendict.frozendict, ],
                        ok: 'DefsOkTrue',
                        items: typing.Union[MetaOapg.properties.items, list, tuple, ],
                        _configuration: typing.Optional[schemas.Configuration] = None,
                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                    ) -> 'any_of_0':
                        return super().__new__(
                            cls,
                            *args,
                            ok=ok,
                            items=items,
                            _configuration=_configuration,
                            **kwargs,
                        )
                
                
                class any_of_1(
                    schemas.DictSchema
                ):
                
                
                    class MetaOapg:
                        required = {
                            "count",
                            "ok",
                        }
                        
                        class properties:
                            count = schemas.IntSchema
                        
                            @staticmethod
                            def ok() -> typing.Type['DefsOkTrue']:
                                return DefsOkTrue
                            __annotations__ = {
                                "count": count,
                                "ok": ok,
                            }
                    
                    count: MetaOapg.properties.count
                    ok: 'DefsOkTrue'
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkTrue': ...
                    
                    @typing.overload
                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                    
                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["count", "ok", ], str]):
                        # dict_instance[name] accessor
                        return super().__getitem__(name)
                    
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkTrue': ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                    
                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["count", "ok", ], str]):
                        return super().get_item_oapg(name)
                    
                
                    def __new__(
                        cls,
                        *args: typing.Union[dict, frozendict.frozendict, ],
                        count: typing.Union[MetaOapg.properties.count, decimal.Decimal, int, ],
                        ok: 'DefsOkTrue',
                        _configuration: typing.Optional[schemas.Configuration] = None,
                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                    ) -> 'any_of_1':
                        return super().__new__(
                            cls,
                            *args,
                            count=count,
                            ok=ok,
                            _configuration=_configuration,
                            **kwargs,
                        )
                
                @classmethod
                @functools.lru_cache()
                def any_of(cls):
                    # we need this here to make our import statements work
                    # we must store _composed_schemas in here so the code is only run
                    # when we invoke this method. If we kept this at the class
                    # level we would get an error because the class level
                    # code would be run when this module is imported, and these composed
                    # classes don't exist yet because their module has not finished
                    # loading
                    return [
                        cls.any_of_0,
                        cls.any_of_1,
                    ]
        
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'items':
                return super().__new__(
                    cls,
                    *args,
                    _configuration=_configuration,
                    **kwargs,
                )

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'PinsListResponse':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)

from slack_web_python_sdk.model.defs_channel import DefsChannel
from slack_web_python_sdk.model.defs_ok_true import DefsOkTrue
from slack_web_python_sdk.model.defs_user_id import DefsUserId
from slack_web_python_sdk.model.objs_file import ObjsFile
from slack_web_python_sdk.model.objs_message import ObjsMessage
