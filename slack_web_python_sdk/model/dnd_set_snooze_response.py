# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

    The version of the OpenAPI document: 1.7.0
    Created by: https://api.slack.com/support
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slack_web_python_sdk import schemas  # noqa: F401


class DndSetSnoozeResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Schema for successful response from dnd.setSnooze method
    """


    class MetaOapg:
        required = {
            "snooze_endtime",
            "snooze_enabled",
            "snooze_remaining",
            "ok",
        }
        
        class properties:
        
            @staticmethod
            def ok() -> typing.Type['DefsOkTrue']:
                return DefsOkTrue
            snooze_enabled = schemas.BoolSchema
            snooze_endtime = schemas.IntSchema
            snooze_remaining = schemas.IntSchema
            __annotations__ = {
                "ok": ok,
                "snooze_enabled": snooze_enabled,
                "snooze_endtime": snooze_endtime,
                "snooze_remaining": snooze_remaining,
            }
    
    snooze_endtime: MetaOapg.properties.snooze_endtime
    snooze_enabled: MetaOapg.properties.snooze_enabled
    snooze_remaining: MetaOapg.properties.snooze_remaining
    ok: 'DefsOkTrue'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkTrue': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["snooze_enabled"]) -> MetaOapg.properties.snooze_enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["snooze_endtime"]) -> MetaOapg.properties.snooze_endtime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["snooze_remaining"]) -> MetaOapg.properties.snooze_remaining: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ok", "snooze_enabled", "snooze_endtime", "snooze_remaining", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkTrue': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["snooze_enabled"]) -> MetaOapg.properties.snooze_enabled: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["snooze_endtime"]) -> MetaOapg.properties.snooze_endtime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["snooze_remaining"]) -> MetaOapg.properties.snooze_remaining: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ok", "snooze_enabled", "snooze_endtime", "snooze_remaining", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        snooze_endtime: typing.Union[MetaOapg.properties.snooze_endtime, decimal.Decimal, int, ],
        snooze_enabled: typing.Union[MetaOapg.properties.snooze_enabled, bool, ],
        snooze_remaining: typing.Union[MetaOapg.properties.snooze_remaining, decimal.Decimal, int, ],
        ok: 'DefsOkTrue',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DndSetSnoozeResponse':
        return super().__new__(
            cls,
            *args,
            snooze_endtime=snooze_endtime,
            snooze_enabled=snooze_enabled,
            snooze_remaining=snooze_remaining,
            ok=ok,
            _configuration=_configuration,
            **kwargs,
        )

from slack_web_python_sdk.model.defs_ok_true import DefsOkTrue
